

;
; �������������������������������������������������������������������������ͻ
; �	This file is generated by The Interactive Disassembler (IDA)	    �
; �	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    �
; �			 Licensed to: Freeware version			    �
; �������������������������������������������������������������������������ͼ
;
; Input	MD5   :	3754B4F4EFEAB79E1BC20405AA0CB198

; File Name   :	D:\code\eaglestrike-stuff\ida\hello.exe
; Format      :	MS-DOS executable (EXE)
; Base Address:	1000h Range: 10000h-12870h Loaded length: 1A43h
; Entry	Point :	1000:20

		.8086
		.model compact
; ���������������������������������������������������������������������������

; Segment type:	Pure code
seg000		segment	para public 'CODE'
		assume cs:seg000
		assume es:nothing, ss:nothing, ds:dseg
		db 10h dup(0)

; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_10010	proc near		; CODE XREF: start+8Dp
		xor	ax, ax
		call	sub_10268
		mov	ax, 42h	; 'B'
		push	ax
		call	sub_105B8
		add	sp, 2
		retn
sub_10010	endp

		assume ss:seg002, ds:nothing

; ��������������� S U B	R O U T	I N E ���������������������������������������


		public start
start		proc near
		mov	ah, 30h
		int	21h		; DOS -	GET DOS	VERSION
					; Return: AL = major version number (00h for DOS 1.x)
		cmp	al, 2
		jnb	short loc_1002A
		int	20h		; DOS -	PROGRAM	TERMINATION
					; returns to DOS--identical to INT 21/AH=00h
; ���������������������������������������������������������������������������

loc_1002A:				; CODE XREF: start+6j
		mov	di, seg	dseg
		mov	si, ds:2
		sub	si, di
		cmp	si, 1000h
		jb	short loc_1003C
		mov	si, 1000h

loc_1003C:				; CODE XREF: start+17j
		cli
		mov	ss, di
		assume ss:dseg
		add	sp, 97Eh
		sti
		jnb	short loc_10056
		push	ss
		pop	ds
		assume ds:dseg
		call	sub_10242
		xor	ax, ax
		push	ax
		call	sub_104C7
		mov	ax, 4CFFh
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
					; AL = exit code
; ���������������������������������������������������������������������������

loc_10056:				; CODE XREF: start+24j
		and	sp, 0FFFEh
		mov	ss:word_11748, sp
		mov	ss:word_11744, sp
		mov	ax, si
		mov	cl, 4
		shl	ax, cl
		dec	ax
		mov	ss:word_11742, ax
		add	si, di
		mov	word_116F2, si
		mov	bx, es
		sub	bx, si
		neg	bx
		mov	ah, 4Ah
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		mov	ss:word_117B9, ds
		push	ss
		pop	es
		assume es:dseg
		cld
		mov	di, 354h
		mov	cx, 980h
		sub	cx, di
		xor	ax, ax
		rep stosb
		push	ss
		pop	ds
		call	sub_100D2
		push	ss
		pop	ds
		call	sub_1042E
		call	sub_102A0
		xor	bp, bp
		push	word_117DA
		push	word_117D8
		push	word_117D6
		call	sub_10010
		push	ax
		call	sub_10196
		mov	ax, seg	dseg
		mov	ds, ax
		mov	ax, 3
		mov	ss:off_11746, 196h

loc_100C3:				; CODE XREF: sub_10262+3j
					; sub_10268+13j ...
		push	ax
		call	sub_10242
		call	sub_104C7
		mov	ax, 0FFh
		push	ax
		call	off_11746
start		endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_100D2	proc near		; CODE XREF: start+74p
		mov	ah, 30h
		int	21h		; DOS -	GET DOS	VERSION
					; Return: AL = major version number (00h for DOS 1.x)
		mov	word_117BB, ax
		mov	ax, 3500h
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	word ptr dword_117A7, bx
		mov	word ptr dword_117A7+2,	es
		push	cs
		pop	ds
		assume ds:seg000
		mov	ax, 2500h
		mov	dx, 0B4h ; '�'
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		push	ss
		pop	ds
		assume ds:dseg
		mov	cx, word_1195E
		jcxz	short loc_10126
		mov	es, word_117B9
		assume es:nothing
		mov	si, es:2Ch
		lds	ax, dword_11960
		mov	dx, ds
		xor	bx, bx
		call	dword ptr ss:unk_1195C
		jnb	short loc_10115
		push	ss
		pop	ds
		jmp	sub_10262
; ���������������������������������������������������������������������������

loc_10115:				; CODE XREF: sub_100D2+3Cj
		lds	ax, ss:dword_11964
		mov	dx, ds
		mov	bx, 3
		call	dword ptr ss:unk_1195C
		push	ss
		pop	ds

loc_10126:				; CODE XREF: sub_100D2+24j
		mov	es, word_117B9
		mov	cx, es:2Ch
		jcxz	short loc_10167
		mov	es, cx
		xor	di, di

loc_10135:				; CODE XREF: sub_100D2+7Cj
		cmp	byte ptr es:[di], 0
		jz	short loc_10167
		mov	cx, 0Ch
		mov	si, 0AAh ; '�'
		repe cmpsb
		jz	short loc_10150
		mov	cx, 7FFFh
		xor	ax, ax
		repne scasb
		jnz	short loc_10167
		jmp	short loc_10135
; ���������������������������������������������������������������������������

loc_10150:				; CODE XREF: sub_100D2+71j
		push	es
		push	ds
		pop	es
		assume es:dseg
		pop	ds
		mov	si, di
		mov	di, 0D2h ; '�'
		lodsb
		cbw
		xchg	ax, cx

loc_1015C:				; CODE XREF: sub_100D2+91j
		lodsb
		inc	al
		jz	short loc_10162
		dec	ax

loc_10162:				; CODE XREF: sub_100D2+8Dj
		stosb
		loop	loc_1015C
		push	ss
		pop	ds

loc_10167:				; CODE XREF: sub_100D2+5Dj
					; sub_100D2+67j ...
		mov	bx, 4

loc_1016A:				; CODE XREF: sub_100D2+AFj
		and	byte ptr [bx+0D2h], 0BFh
		mov	ax, 4400h
		int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
					; BX = file or device handle
		jb	short loc_10180
		test	dl, 80h
		jz	short loc_10180
		or	byte ptr [bx+0D2h], 40h

loc_10180:				; CODE XREF: sub_100D2+A2j
					; sub_100D2+A7j
		dec	bx
		jns	short loc_1016A
		mov	si, 278h
		mov	di, 278h
		call	sub_1022E
		mov	si, 278h
		mov	di, 278h
		call	sub_1021F
		retn
sub_100D2	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_10196	proc near		; CODE XREF: start+91p
		push	bp
		mov	bp, sp
		mov	si, 37Ah
		mov	di, 37Ah
		call	sub_1021F
		mov	si, 278h
		mov	di, 27Ah
		call	sub_1021F
		jmp	short loc_101B0
sub_10196	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_101AD	proc near		; CODE XREF: start+AEp
					; DATA XREF: dseg:off_11746o

arg_0		= word ptr  4

		push	bp
		mov	bp, sp

loc_101B0:				; CODE XREF: sub_10196+15j
		mov	si, 27Ah
		mov	di, 27Ah
		call	sub_1021F
		mov	si, 27Ah
		mov	di, 27Ah
		call	sub_1022E
		call	sub_1027E
		or	ax, ax
		jz	short loc_101D4
		cmp	[bp+arg_0], 0
		jnz	short loc_101D4
		mov	[bp+arg_0], 0FFh

loc_101D4:				; CODE XREF: sub_101AD+1Aj
					; sub_101AD+20j
		mov	cx, 0Fh
		mov	bx, 5

loc_101DA:				; CODE XREF: sub_101AD+39j
		test	byte ptr [bx+0D2h], 1
		jz	short loc_101E5
		mov	ah, 3Eh
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle

loc_101E5:				; CODE XREF: sub_101AD+32j
		inc	bx
		loop	loc_101DA
		call	sub_101F2
		mov	ax, [bp+arg_0]
		mov	ah, 4Ch
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
sub_101AD	endp			; AL = exit code


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_101F2	proc near		; CODE XREF: sub_101AD+3Bp
		mov	cx, word_1195E
		jcxz	short loc_101FF
		mov	bx, 2
		call	dword ptr unk_1195C

loc_101FF:				; CODE XREF: sub_101F2+4j
		push	ds
		lds	dx, dword_117A7
		mov	ax, 2500h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		cmp	byte_117E4, 0
		jz	short locret_1021E
		push	ds
		mov	al, byte_117E5
		lds	dx, dword_117E6
		mov	ah, 25h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds

locret_1021E:				; CODE XREF: sub_101F2+1Dj
		retn
sub_101F2	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_1021F	proc near		; CODE XREF: sub_100D2+C0p
					; sub_10196+9p	...
		cmp	si, di
		jnb	short locret_1022D
		dec	di
		dec	di
		mov	cx, [di]
		jcxz	short sub_1021F
		call	cx
		jmp	short sub_1021F
; ���������������������������������������������������������������������������

locret_1022D:				; CODE XREF: sub_1021F+2j
		retn
sub_1021F	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_1022E	proc near		; CODE XREF: sub_100D2+B7p
					; sub_101AD+12p ...
		cmp	si, di
		jnb	short locret_10240
		sub	di, 4
		mov	ax, [di]
		or	ax, [di+2]
		jz	short sub_1022E
		call	dword ptr [di]
		jmp	short sub_1022E
; ���������������������������������������������������������������������������

locret_10240:				; CODE XREF: sub_1022E+2j
		retn
sub_1022E	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_10242	proc near		; CODE XREF: start+28p	start+A4p ...
		push	bp
		mov	bp, sp
		mov	ax, 0FCh ; '�'
		push	ax
		call	sub_104C7
		cmp	word_117EA, 0
		jz	short loc_10257
		call	word_117EA

loc_10257:				; CODE XREF: sub_10242+Fj
		mov	ax, 0FFh
		push	ax
		call	sub_104C7
		mov	sp, bp
		pop	bp
		retn
sub_10242	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_10262	proc near		; CODE XREF: sub_100D2+40j
					; sub_10E7A+53p ...
		mov	ax, 2
		jmp	loc_100C3
sub_10262	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_10268	proc near		; CODE XREF: sub_10010+2p sub_1093E+6p
		pop	cx
		mov	bx, sp
		sub	bx, ax
		jb	short loc_10279
		cmp	bx, word_117EC
		jb	short loc_10279
		mov	sp, bx
		jmp	cx
; ���������������������������������������������������������������������������

loc_10279:				; CODE XREF: sub_10268+5j sub_10268+Bj
		xor	ax, ax
		jmp	loc_100C3
sub_10268	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_1027E	proc near		; CODE XREF: sub_101AD+15p
		push	si
		xor	si, si
		mov	cx, 42h	; 'B'
		xor	ah, ah
		cld

loc_10287:				; CODE XREF: sub_1027E+Cj
		lodsb
		xor	ah, al
		loop	loc_10287
		xor	ah, 55h
		jz	short loc_1029E
		call	sub_10242
		mov	ax, 1
		push	ax
		call	sub_104C7
		mov	ax, 1

loc_1029E:				; CODE XREF: sub_1027E+11j
		pop	si
		retn
sub_1027E	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_102A0	proc near		; CODE XREF: start+7Cp
		pop	word_117EE
		mov	dx, 2
		cmp	byte ptr word_117BB, dl
		jz	short loc_102D6
		mov	es, word_117B9
		assume es:nothing
		mov	es, word ptr es:2Ch
		mov	seg_117DE, es
		xor	ax, ax
		cwd
		mov	cx, 8000h
		xor	di, di

loc_102C2:				; CODE XREF: sub_102A0+25j
		repne scasb
		scasb
		jnz	short loc_102C2
		inc	di
		inc	di
		mov	word_117DC, di
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		mov	dx, cx

loc_102D6:				; CODE XREF: sub_102A0+Bj
		mov	di, 1
		mov	si, 81h	; '�'
		mov	ds, word_117B9

loc_102E0:				; CODE XREF: sub_102A0+43j
					; sub_102A0+47j ...
		lodsb
		cmp	al, 20h	; ' '
		jz	short loc_102E0
		cmp	al, 9
		jz	short loc_102E0
		cmp	al, 0Dh
		jz	short loc_1035C
		or	al, al
		jz	short loc_1035C
		inc	di

loc_102F2:				; CODE XREF: sub_102A0+7Dj
		dec	si

loc_102F3:				; CODE XREF: sub_102A0+6Dj
					; sub_102A0+87j ...
		lodsb
		cmp	al, 20h	; ' '
		jz	short loc_102E0
		cmp	al, 9
		jz	short loc_102E0
		cmp	al, 0Dh
		jz	short loc_1035C
		or	al, al
		jz	short loc_1035C
		cmp	al, 22h	; '"'
		jz	short loc_1032C
		cmp	al, 5Ch	; '\'
		jz	short loc_1030F
		inc	dx
		jmp	short loc_102F3
; ���������������������������������������������������������������������������

loc_1030F:				; CODE XREF: sub_102A0+6Aj
		xor	cx, cx

loc_10311:				; CODE XREF: sub_102A0+75j
		inc	cx
		lodsb
		cmp	al, 5Ch	; '\'
		jz	short loc_10311
		cmp	al, 22h	; '"'
		jz	short loc_1031F
		add	dx, cx
		jmp	short loc_102F2
; ���������������������������������������������������������������������������

loc_1031F:				; CODE XREF: sub_102A0+79j
		mov	ax, cx
		shr	cx, 1
		adc	dx, cx
		test	al, 1
		jnz	short loc_102F3
		jmp	short loc_1032C
; ���������������������������������������������������������������������������

loc_1032B:				; CODE XREF: sub_102A0+AEj
		dec	si

loc_1032C:				; CODE XREF: sub_102A0+66j
					; sub_102A0+89j ...
		lodsb
		cmp	al, 0Dh
		jz	short loc_1035C
		or	al, al
		jz	short loc_1035C
		cmp	al, 22h	; '"'
		jz	short loc_102F3
		cmp	al, 5Ch	; '\'
		jz	short loc_10340
		inc	dx
		jmp	short loc_1032C
; ���������������������������������������������������������������������������

loc_10340:				; CODE XREF: sub_102A0+9Bj
		xor	cx, cx

loc_10342:				; CODE XREF: sub_102A0+A6j
		inc	cx
		lodsb
		cmp	al, 5Ch	; '\'
		jz	short loc_10342
		cmp	al, 22h	; '"'
		jz	short loc_10350
		add	dx, cx
		jmp	short loc_1032B
; ���������������������������������������������������������������������������

loc_10350:				; CODE XREF: sub_102A0+AAj
		mov	ax, cx
		shr	cx, 1
		adc	dx, cx
		test	al, 1
		jnz	short loc_1032C
		jmp	short loc_102F3
; ���������������������������������������������������������������������������

loc_1035C:				; CODE XREF: sub_102A0+4Bj
					; sub_102A0+4Fj ...
		push	ss
		pop	ds
		mov	word_117D6, di
		add	dx, di
		inc	di
		shl	di, 1
		add	dx, di
		and	dl, 0FEh
		sub	sp, dx
		mov	ax, sp
		mov	word_117D8, ax
		mov	bx, ax
		add	di, bx
		push	ss
		pop	es
		assume es:dseg
		mov	ss:[bx], di
		inc	bx
		inc	bx
		lds	si, dword ptr word_117DC

loc_10382:				; CODE XREF: sub_102A0+E6j
		lodsb
		stosb
		or	al, al
		jnz	short loc_10382
		mov	si, 81h	; '�'
		mov	ds, ss:word_117B9
		jmp	short loc_10395
; ���������������������������������������������������������������������������

loc_10392:				; CODE XREF: sub_102A0+115j
					; sub_102A0+119j
		xor	ax, ax
		stosb

loc_10395:				; CODE XREF: sub_102A0+F0j
					; sub_102A0+F8j ...
		lodsb
		cmp	al, 20h	; ' '
		jz	short loc_10395
		cmp	al, 9
		jz	short loc_10395
		cmp	al, 0Dh
		jnz	short loc_103A5
		jmp	loc_10424
; ���������������������������������������������������������������������������

loc_103A5:				; CODE XREF: sub_102A0+100j
		or	al, al
		jnz	short loc_103AC
		jmp	short loc_10424
; ���������������������������������������������������������������������������
		align 2

loc_103AC:				; CODE XREF: sub_102A0+107j
		mov	ss:[bx], di
		inc	bx
		inc	bx

loc_103B1:				; CODE XREF: sub_102A0+13Ej
		dec	si

loc_103B2:				; CODE XREF: sub_102A0+12Cj
					; sub_102A0+14Bj ...
		lodsb
		cmp	al, 20h	; ' '
		jz	short loc_10392
		cmp	al, 9
		jz	short loc_10392
		cmp	al, 0Dh
		jz	short loc_10421
		or	al, al
		jz	short loc_10421
		cmp	al, 22h	; '"'
		jz	short loc_103EE
		cmp	al, 5Ch	; '\'
		jz	short loc_103CE
		stosb
		jmp	short loc_103B2
; ���������������������������������������������������������������������������

loc_103CE:				; CODE XREF: sub_102A0+129j
		xor	cx, cx

loc_103D0:				; CODE XREF: sub_102A0+134j
		inc	cx
		lodsb
		cmp	al, 5Ch	; '\'
		jz	short loc_103D0
		cmp	al, 22h	; '"'
		jz	short loc_103E0
		mov	al, 5Ch	; '\'
		rep stosb
		jmp	short loc_103B1
; ���������������������������������������������������������������������������

loc_103E0:				; CODE XREF: sub_102A0+138j
		mov	al, 5Ch	; '\'
		shr	cx, 1
		rep stosb
		jnb	short loc_103EE
		mov	al, 22h	; '"'
		stosb
		jmp	short loc_103B2
; ���������������������������������������������������������������������������

loc_103ED:				; CODE XREF: sub_102A0+172j
		dec	si

loc_103EE:				; CODE XREF: sub_102A0+125j
					; sub_102A0+146j ...
		lodsb
		cmp	al, 0Dh
		jz	short loc_10421
		or	al, al
		jz	short loc_10421
		cmp	al, 22h	; '"'
		jz	short loc_103B2
		cmp	al, 5Ch	; '\'
		jz	short loc_10402
		stosb
		jmp	short loc_103EE
; ���������������������������������������������������������������������������

loc_10402:				; CODE XREF: sub_102A0+15Dj
		xor	cx, cx

loc_10404:				; CODE XREF: sub_102A0+168j
		inc	cx
		lodsb
		cmp	al, 5Ch	; '\'
		jz	short loc_10404
		cmp	al, 22h	; '"'
		jz	short loc_10414
		mov	al, 5Ch	; '\'
		rep stosb
		jmp	short loc_103ED
; ���������������������������������������������������������������������������

loc_10414:				; CODE XREF: sub_102A0+16Cj
		mov	al, 5Ch	; '\'
		shr	cx, 1
		rep stosb
		jnb	short loc_103B2
		mov	al, 22h	; '"'
		stosb
		jmp	short loc_103EE
; ���������������������������������������������������������������������������

loc_10421:				; CODE XREF: sub_102A0+11Dj
					; sub_102A0+121j ...
		xor	ax, ax
		stosb

loc_10424:				; CODE XREF: sub_102A0+102j
					; sub_102A0+109j
		push	ss
		pop	ds
		mov	word ptr [bx], 0
		jmp	word_117EE
sub_102A0	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_1042E	proc near		; CODE XREF: start+79p
		push	bp
		mov	bp, sp
		push	bp
		mov	ds, word_117B9
		xor	cx, cx
		mov	ax, cx
		mov	bp, cx
		mov	di, cx
		dec	cx
		mov	si, word_1171C
		or	si, si
		jz	short loc_10457
		mov	es, si
		assume es:nothing
		cmp	byte ptr es:0, 0
		jz	short loc_10457

loc_10451:				; CODE XREF: sub_1042E+27j
		repne scasb
		inc	bp
		scasb
		jnz	short loc_10451

loc_10457:				; CODE XREF: sub_1042E+17j
					; sub_1042E+21j
		inc	bp
		xchg	ax, di
		inc	ax
		and	al, 0FEh
		mov	di, bp
		shl	bp, 1
		add	ax, bp
		push	ss
		pop	ds
		push	di
		mov	di, 9
		call	sub_104F0
		pop	di
		mov	cx, di
		mov	di, bp
		add	di, ax
		mov	word_117DA, bp
		push	ds
		pop	es
		assume es:dseg
		mov	ds, si
		xor	si, si
		dec	cx
		jcxz	short loc_10492

loc_1047F:				; CODE XREF: sub_1042E+62j
		cmp	word ptr [si], 433Bh
		jz	short loc_1048A
		mov	[bp+0],	di
		inc	bp
		inc	bp

loc_1048A:				; CODE XREF: sub_1042E+55j
					; sub_1042E+60j
		lodsb
		stosb
		or	al, al
		jnz	short loc_1048A
		loop	loc_1047F

loc_10492:				; CODE XREF: sub_1042E+4Fj
		mov	[bp+0],	cx
		push	ss
		pop	ds
		pop	bp
		mov	sp, bp
		pop	bp
		retn
sub_1042E	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_1049C	proc near		; CODE XREF: sub_104C7+7p

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	ds
		pop	es
		mov	dx, [bp+arg_0]
		mov	si, 282h

loc_104A9:				; CODE XREF: sub_1049C+20j
		lodsw
		cmp	ax, dx
		jz	short loc_104BE
		inc	ax
		xchg	ax, si
		jz	short loc_104BE
		xchg	ax, di
		xor	ax, ax
		mov	cx, 0FFFFh
		repne scasb
		mov	si, di
		jmp	short loc_104A9
; ���������������������������������������������������������������������������

loc_104BE:				; CODE XREF: sub_1049C+10j
					; sub_1049C+14j
		xchg	ax, si
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn	2
sub_1049C	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_104C7	proc near		; CODE XREF: start+2Ep	start+A7p ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	di
		push	[bp+arg_0]
		call	sub_1049C
		or	ax, ax
		jz	short loc_104E9
		xchg	ax, dx
		mov	di, dx
		xor	ax, ax
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		dec	cx
		mov	bx, 2
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer

loc_104E9:				; CODE XREF: sub_104C7+Cj
		pop	di
		mov	sp, bp
		pop	bp
		retn	2
sub_104C7	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_104F0	proc near		; CODE XREF: sub_1042E+3Ap
		mov	dx, ax
		add	ax, word_11748
		jb	short loc_1052D
		cmp	word_11742, ax
		jnb	short loc_10523
		add	ax, 0Fh
		push	ax
		rcr	ax, 1
		mov	cl, 3
		shr	ax, cl
		mov	cx, ds
		mov	bx, word_117B9
		sub	cx, bx
		add	ax, cx
		mov	es, bx
		assume es:nothing
		mov	bx, ax
		mov	ah, 4Ah
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		pop	ax
		jb	short loc_1052D
		and	al, 0F0h
		dec	ax
		mov	word_11742, ax

loc_10523:				; CODE XREF: sub_104F0+Cj
		xchg	ax, bp
		mov	bp, word_11748
		add	word_11748, dx
		retn
; ���������������������������������������������������������������������������

loc_1052D:				; CODE XREF: sub_104F0+6j
					; sub_104F0+2Bj
		mov	ax, di
		jmp	loc_100C3
sub_104F0	endp

; ���������������������������������������������������������������������������
		jb	short loc_10547

loc_10534:				; CODE XREF: seg000:053Aj
		xor	ax, ax
		mov	sp, bp
		pop	bp
		retn
; ���������������������������������������������������������������������������
		jnb	short loc_10534
		push	ax
		call	sub_10558
		pop	ax
		mov	sp, bp
		pop	bp
		retn
; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11206

loc_10545:				; CODE XREF: sub_11206:loc_1127Dj
					; sub_11280:loc_11293j	...
		jnb	short loc_1054E

loc_10547:				; CODE XREF: seg000:0532j
		call	sub_10558
		mov	ax, 0FFFFh
		cwd

loc_1054E:				; CODE XREF: sub_11206:loc_10545j
		mov	sp, bp
		pop	bp
		retn
; END OF FUNCTION CHUNK	FOR sub_11206
; ���������������������������������������������������������������������������
		xor	ah, ah
		call	sub_10558
		retn

; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_10558	proc near		; CODE XREF: seg000:053Dp
					; sub_11206:loc_10547p	...
		mov	byte_117BE, al
		or	ah, ah
		jnz	short loc_10582
		cmp	byte ptr word_117BB, 3
		jb	short loc_10573
		cmp	al, 22h	; '"'
		jnb	short loc_10577
		cmp	al, 20h	; ' '
		jb	short loc_10573
		mov	al, 5
		jmp	short loc_10579
; ���������������������������������������������������������������������������
		db 90h
; ���������������������������������������������������������������������������

loc_10573:				; CODE XREF: sub_10558+Cj
					; sub_10558+14j
		cmp	al, 13h
		jbe	short loc_10579

loc_10577:				; CODE XREF: sub_10558+10j
		mov	al, 13h

loc_10579:				; CODE XREF: sub_10558+18j
					; sub_10558+1Dj
		mov	bx, 100h
		xlat

loc_1057D:				; CODE XREF: sub_10558+2Cj
		cbw
		mov	word_117B3, ax
		retn
; ���������������������������������������������������������������������������

loc_10582:				; CODE XREF: sub_10558+5j
		mov	al, ah
		jmp	short loc_1057D
sub_10558	endp

; ���������������������������������������������������������������������������
		push	bp
		mov	bp, sp
		sub	sp, 4
		push	di
		push	si
		mov	si, 116h
		sub	di, di
		jmp	short loc_105AA
; ���������������������������������������������������������������������������
		align 2

loc_10596:				; CODE XREF: seg000:05AEj
		test	byte ptr [si+6], 83h
		jz	short loc_105A7
		push	si
		call	sub_108D0
		add	sp, 2
		inc	ax
		jz	short loc_105A7
		inc	di

loc_105A7:				; CODE XREF: seg000:059Aj seg000:05A4j
		add	si, 8

loc_105AA:				; CODE XREF: seg000:0593j
		cmp	word_1191E, si
		jnb	short loc_10596
		mov	ax, di
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_105B8	proc near		; CODE XREF: sub_10010+9p

var_8		= word ptr -8
var_4		= word ptr -4
arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	di
		push	si
		mov	si, 11Eh
		lea	ax, [bp+arg_2]
		mov	[bp+var_4], ax
		push	si
		call	sub_107B6
		add	sp, 2
		mov	di, ax
		lea	ax, [bp+arg_2]
		push	ax
		push	[bp+arg_0]
		push	si
		call	sub_1093E
		add	sp, 6
		mov	[bp+var_8], ax
		push	si
		push	di
		call	sub_1083A
		add	sp, 4
		mov	ax, [bp+var_8]
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
sub_105B8	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_105F4	proc near		; CODE XREF: sub_10F36+26p
					; sub_10F74+20p ...

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 8
		push	di
		push	si
		mov	si, [bp+arg_2]
		mov	al, [si+7]
		cbw
		mov	[bp+var_6], ax
		mov	ax, si
		sub	ax, 116h
		mov	cl, 3
		sar	ax, cl
		mov	cx, ax
		shl	ax, 1
		add	ax, cx
		shl	ax, 1
		add	ax, 1B6h
		mov	[bp+var_8], ax
		test	byte ptr [si+6], 83h
		jz	short loc_10629
		test	byte ptr [si+6], 40h
		jz	short loc_10634

loc_10629:				; CODE XREF: sub_105F4+2Dj
					; sub_105F4+44j ...
		or	byte ptr [si+6], 20h
		mov	ax, 0FFFFh
		jmp	loc_10743
; ���������������������������������������������������������������������������
		align 2

loc_10634:				; CODE XREF: sub_105F4+33j
		test	byte ptr [si+6], 1
		jnz	short loc_10629
		or	byte ptr [si+6], 2
		and	byte ptr [si+6], 0EFh
		sub	ax, ax
		mov	[si+2],	ax
		mov	di, ax
		mov	[bp+var_4], di
		test	byte ptr [si+6], 0Ch
		jnz	short loc_106B1
		mov	bx, si
		sub	bx, 116h
		mov	cl, 3
		sar	bx, cl
		mov	ax, bx
		shl	bx, 1
		add	bx, ax
		shl	bx, 1
		test	byte ptr [bx+1B6h], 1
		jnz	short loc_106B1
		cmp	si, 11Eh
		jz	short loc_10677
		cmp	si, 126h
		jnz	short loc_106AA

loc_10677:				; CODE XREF: sub_105F4+7Bj
		push	[bp+var_6]
		call	sub_1165E
		add	sp, 2
		or	ax, ax
		jnz	short loc_106B1
		inc	word_11804
		cmp	si, 11Eh
		jnz	short loc_10694
		mov	ax, 380h
		jmp	short loc_10697
; ���������������������������������������������������������������������������
		align 2

loc_10694:				; CODE XREF: sub_105F4+98j
		mov	ax, 780h

loc_10697:				; CODE XREF: sub_105F4+9Dj
		mov	[si+4],	ax
		mov	[si], ax
		mov	bx, [bp+var_8]
		mov	word ptr [bx+2], 200h
		mov	byte ptr [bx], 1
		jmp	short loc_106B1
; ���������������������������������������������������������������������������
		align 2

loc_106AA:				; CODE XREF: sub_105F4+81j
		push	si
		call	sub_1074A
		add	sp, 2

loc_106B1:				; CODE XREF: sub_105F4+5Cj
					; sub_105F4+75j ...
		test	byte ptr [si+6], 8
		jnz	short loc_106D0
		mov	bx, si
		sub	bx, 116h
		mov	cl, 3
		sar	bx, cl
		mov	ax, bx
		shl	bx, 1
		add	bx, ax
		shl	bx, 1
		test	byte ptr [bx+1B6h], 1
		jz	short loc_10720

loc_106D0:				; CODE XREF: sub_105F4+C1j
		mov	di, [si]
		sub	di, [si+4]
		mov	ax, [si+4]
		inc	ax
		mov	[si], ax
		mov	bx, [bp+var_8]
		mov	ax, [bx+2]
		dec	ax
		mov	[si+2],	ax
		or	di, di
		jle	short loc_106FC
		push	di
		push	word ptr [si+4]
		push	[bp+var_6]
		call	sub_11280
		add	sp, 6
		mov	[bp+var_4], ax
		jmp	short loc_10715
; ���������������������������������������������������������������������������
		align 2

loc_106FC:				; CODE XREF: sub_105F4+F3j
		mov	bx, [bp+var_6]
		test	byte ptr [bx+0D2h], 20h
		jz	short loc_10715
		mov	ax, 2
		push	ax
		sub	ax, ax
		push	ax
		push	ax
		push	bx
		call	sub_11206
		add	sp, 8

loc_10715:				; CODE XREF: sub_105F4+105j
					; sub_105F4+110j
		mov	bx, [si+4]
		mov	al, byte ptr [bp+arg_0]
		mov	[bx], al
		jmp	short loc_10736
; ���������������������������������������������������������������������������
		align 2

loc_10720:				; CODE XREF: sub_105F4+DAj
		mov	di, 1
		mov	ax, di
		push	ax
		lea	ax, [bp+arg_0]
		push	ax
		push	[bp+var_6]
		call	sub_11280
		add	sp, 6
		mov	[bp+var_4], ax

loc_10736:				; CODE XREF: sub_105F4+129j
		cmp	[bp+var_4], di
		jz	short loc_1073E
		jmp	loc_10629
; ���������������������������������������������������������������������������

loc_1073E:				; CODE XREF: sub_105F4+145j
		mov	al, byte ptr [bp+arg_0]
		sub	ah, ah

loc_10743:				; CODE XREF: sub_105F4+3Cj
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
sub_105F4	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_1074A	proc near		; CODE XREF: sub_105F4+B7p

var_2		= word ptr -2
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		mov	ax, [bp+arg_0]
		sub	ax, 116h
		mov	cl, 3
		sar	ax, cl
		mov	cx, ax
		shl	ax, 1
		add	ax, cx
		shl	ax, 1
		add	ax, 1B6h
		mov	[bp+var_2], ax
		mov	ax, 200h
		push	ax
		call	sub_113CC
		add	sp, 2
		mov	bx, [bp+arg_0]
		mov	[bx+4],	ax
		or	ax, ax
		jz	short loc_1078C
		or	byte ptr [bx+6], 8
		mov	bx, [bp+var_2]
		mov	word ptr [bx+2], 200h
		jmp	short loc_107A2
; ���������������������������������������������������������������������������
		align 2

loc_1078C:				; CODE XREF: sub_1074A+31j
		mov	bx, [bp+arg_0]
		or	byte ptr [bx+6], 4
		mov	ax, [bp+var_2]
		inc	ax
		mov	[bx+4],	ax
		mov	bx, [bp+var_2]
		mov	word ptr [bx+2], 1

loc_107A2:				; CODE XREF: sub_1074A+3Fj
		mov	bx, [bp+arg_0]
		mov	si, bx
		mov	ax, [si+4]
		mov	[bx], ax
		mov	word ptr [bx+2], 0
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_1074A	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_107B6	proc near		; CODE XREF: sub_105B8+12p

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	si
		mov	si, [bp+arg_0]
		inc	word_11804
		cmp	si, 11Eh
		jnz	short loc_107D2
		mov	[bp+var_2], 380h
		jmp	short loc_107DD
; ���������������������������������������������������������������������������
		align 2

loc_107D2:				; CODE XREF: sub_107B6+12j
		cmp	si, 126h
		jnz	short loc_107FC
		mov	[bp+var_2], 780h

loc_107DD:				; CODE XREF: sub_107B6+19j
		test	byte ptr [si+6], 0Ch
		jnz	short loc_107FC
		mov	bx, si
		sub	bx, 116h
		mov	cl, 3
		sar	bx, cl
		mov	ax, bx
		shl	bx, 1
		add	bx, ax
		shl	bx, 1
		test	byte ptr [bx+1B6h], 1
		jz	short loc_10800

loc_107FC:				; CODE XREF: sub_107B6+20j
					; sub_107B6+2Bj
		sub	ax, ax
		jmp	short loc_10835
; ���������������������������������������������������������������������������

loc_10800:				; CODE XREF: sub_107B6+44j
		mov	ax, si
		sub	ax, 116h
		mov	cl, 3
		sar	ax, cl
		mov	cx, ax
		shl	ax, 1
		add	ax, cx
		shl	ax, 1
		add	ax, 1B6h
		mov	[bp+var_4], ax
		mov	ax, [bp+var_2]
		mov	[si+4],	ax
		mov	[si], ax
		mov	bx, [bp+var_4]
		mov	ax, 200h
		mov	[bx+2],	ax
		mov	[si+2],	ax
		mov	byte ptr [bx], 1
		or	byte ptr [si+6], 2
		mov	ax, 1

loc_10835:				; CODE XREF: sub_107B6+48j
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_107B6	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_1083A	proc near		; CODE XREF: sub_105B8+2Dp

var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		cmp	[bp+arg_0], 0
		jz	short loc_108A2
		cmp	[bp+arg_2], 11Eh
		jz	short loc_10855
		cmp	[bp+arg_2], 126h
		jnz	short loc_108CB

loc_10855:				; CODE XREF: sub_1083A+12j
		mov	bx, [bp+arg_2]
		mov	al, [bx+7]
		cbw
		push	ax
		call	sub_1165E
		add	sp, 2
		or	ax, ax
		jz	short loc_108CB
		mov	ax, [bp+arg_2]
		sub	ax, 116h
		mov	cl, 3
		sar	ax, cl
		mov	cx, ax
		shl	ax, 1
		add	ax, cx
		shl	ax, 1
		add	ax, 1B6h
		mov	[bp+var_2], ax
		push	[bp+arg_2]
		call	sub_108D0
		add	sp, 2
		mov	bx, [bp+var_2]
		mov	byte ptr [bx], 0
		mov	word ptr [bx+2], 0
		mov	bx, [bp+arg_2]
		mov	si, bx
		sub	ax, ax
		mov	[si], ax
		mov	[bx+4],	ax
		jmp	short loc_108CB
; ���������������������������������������������������������������������������
		align 2

loc_108A2:				; CODE XREF: sub_1083A+Bj
		mov	bx, [bp+arg_2]
		cmp	word ptr [bx+4], 380h
		jz	short loc_108B3
		cmp	word ptr [bx+4], 780h
		jnz	short loc_108CB

loc_108B3:				; CODE XREF: sub_1083A+70j
		mov	al, [bx+7]
		cbw
		push	ax
		call	sub_1165E
		add	sp, 2
		or	ax, ax
		jz	short loc_108CB
		push	[bp+arg_2]
		call	sub_108D0
		add	sp, 2

loc_108CB:				; CODE XREF: sub_1083A+19j
					; sub_1083A+2Bj ...
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_1083A	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_108D0	proc near		; CODE XREF: seg000:059Dp
					; sub_1083A+48p ...

var_4		= word ptr -4
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	di
		push	si
		mov	si, [bp+arg_0]
		sub	di, di
		mov	al, [si+6]
		and	al, 3
		cmp	al, 2
		jnz	short loc_1092C
		test	byte ptr [si+6], 8
		jnz	short loc_10905
		mov	bx, si
		sub	bx, 116h
		mov	cl, 3
		sar	bx, cl
		mov	ax, bx
		shl	bx, 1
		add	bx, ax
		shl	bx, 1
		test	byte ptr [bx+1B6h], 1
		jz	short loc_1092C

loc_10905:				; CODE XREF: sub_108D0+1Aj
		mov	ax, [si]
		sub	ax, [si+4]
		mov	[bp+var_4], ax
		or	ax, ax
		jle	short loc_1092C
		push	ax
		push	word ptr [si+4]
		mov	al, [si+7]
		cbw
		push	ax
		call	sub_11280
		add	sp, 6
		cmp	ax, [bp+var_4]
		jz	short loc_1092C
		or	byte ptr [si+6], 20h
		mov	di, 0FFFFh

loc_1092C:				; CODE XREF: sub_108D0+14j
					; sub_108D0+33j ...
		mov	ax, [si+4]
		mov	[si], ax
		mov	word ptr [si+2], 0
		mov	ax, di
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
sub_108D0	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_1093E	proc near		; CODE XREF: sub_105B8+22p

var_164		= word ptr -164h
var_162		= word ptr -162h
var_4		= word ptr -4
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		mov	ax, 164h
		call	sub_10268
		push	di
		push	si
		mov	si, [bp+arg_2]
		lea	ax, [bp+var_162]
		mov	word_11A62, ax
		mov	ax, [bp+arg_4]
		mov	word_11A52, ax
		mov	ax, [bp+arg_0]
		mov	word_11A46, ax
		mov	word_11A5C, 0
		mov	word_11A5A, 0
		jmp	loc_10BEA
; ���������������������������������������������������������������������������

loc_1096E:				; CODE XREF: sub_1093E+2B1j
		cmp	byte ptr [si], 25h ; '%'
		jz	short loc_10976
		jmp	loc_10BCE
; ���������������������������������������������������������������������������

loc_10976:				; CODE XREF: sub_1093E+33j
		mov	word_11A5E, 1
		sub	ax, ax
		mov	word_11A4E, ax
		mov	word_11A4A, ax
		mov	word_11A58, ax
		mov	word_11A4C, ax
		mov	word_11A56, ax
		mov	word_11A54, ax
		mov	word_11A48, ax
		mov	word_11A44, ax
		mov	word_11A50, ax
		mov	word_11A68, 20h	; ' '
		cmp	byte ptr [si+1], 30h ; '0'
		jnz	short loc_109E1
		inc	si
		mov	word_11A68, 30h	; '0'
		jmp	short loc_109E1
; ���������������������������������������������������������������������������

loc_109AE:				; CODE XREF: sub_1093E+9Dj
		cmp	byte ptr [si], 2Bh ; '+'
		jnz	short loc_109C0
		inc	word_11A4E
		mov	word_11A54, 0
		jmp	short loc_109E1
; ���������������������������������������������������������������������������
		align 2

loc_109C0:				; CODE XREF: sub_1093E+73j
		cmp	byte ptr [si], 20h ; ' '
		jnz	short loc_109D2
		cmp	word_11A4E, 0
		jnz	short loc_109E1
		inc	word_11A54
		jmp	short loc_109E1
; ���������������������������������������������������������������������������

loc_109D2:				; CODE XREF: sub_1093E+85j
		inc	word_11A44
		jmp	short loc_109E1
; ���������������������������������������������������������������������������

loc_109D8:				; CODE XREF: sub_1093E+B0j
		cmp	byte ptr [si], 2Dh ; '-'
		jnz	short loc_109AE
		inc	word_11A50

loc_109E1:				; CODE XREF: sub_1093E+65j
					; sub_1093E+6Ej ...
		inc	si
		mov	al, [si]
		cbw
		push	ax
		call	sub_111DE
		add	sp, 2
		or	ax, ax
		jnz	short loc_109D8
		push	si
		mov	ax, 374h
		push	ax
		call	sub_1115E
		add	sp, 4
		mov	si, ax
		cmp	word_11A64, 0
		jge	short loc_10A10
		inc	word_11A50
		mov	ax, word_11A64
		neg	ax
		mov	word_11A64, ax

loc_10A10:				; CODE XREF: sub_1093E+C4j
		cmp	byte ptr [si], 2Eh ; '.'
		jnz	short loc_10A38
		inc	word_11A56
		inc	si
		push	si
		mov	ax, 36Eh
		push	ax
		call	sub_1115E
		add	sp, 4
		mov	si, ax
		cmp	word_11A5E, 0
		jge	short loc_10A38
		mov	word_11A5E, 1
		dec	word_11A56

loc_10A38:				; CODE XREF: sub_1093E+D5j
					; sub_1093E+EEj
		mov	al, [si]
		cbw
		cmp	ax, 46h	; 'F'
		jz	short loc_10A72
		cmp	ax, 4Eh	; 'N'
		jz	short loc_10A7A
		cmp	ax, 68h	; 'h'
		jz	short loc_10A6A
		cmp	ax, 6Ch	; 'l'
		jnz	short loc_10A55
		mov	word_11A4C, 2

loc_10A55:				; CODE XREF: sub_1093E+10Fj
					; sub_1093E+132j ...
		cmp	word_11A4C, 0
		jnz	short loc_10A61
		cmp	byte ptr [si], 4Ch ; 'L'
		jnz	short loc_10A62

loc_10A61:				; CODE XREF: sub_1093E+11Cj
		inc	si

loc_10A62:				; CODE XREF: sub_1093E+121j
		cmp	byte ptr [si], 0
		jnz	short loc_10A82
		jmp	loc_10BF2
; ���������������������������������������������������������������������������

loc_10A6A:				; CODE XREF: sub_1093E+10Aj
		mov	word_11A4C, 1
		jmp	short loc_10A55
; ���������������������������������������������������������������������������

loc_10A72:				; CODE XREF: sub_1093E+100j
		mov	word_11A4C, 10h
		jmp	short loc_10A55
; ���������������������������������������������������������������������������

loc_10A7A:				; CODE XREF: sub_1093E+105j
		mov	word_11A4C, 8
		jmp	short loc_10A55
; ���������������������������������������������������������������������������

loc_10A82:				; CODE XREF: sub_1093E+127j
		mov	al, [si]
		cbw
		mov	[bp+var_164], ax
		cmp	ax, 45h	; 'E'
		jz	short loc_10A98
		cmp	ax, 47h	; 'G'
		jz	short loc_10A98
		cmp	ax, 58h	; 'X'
		jnz	short loc_10AA1

loc_10A98:				; CODE XREF: sub_1093E+14Ej
					; sub_1093E+153j
		inc	word_11A4A
		add	[bp+var_164], 20h ; ' '

loc_10AA1:				; CODE XREF: sub_1093E+158j
		mov	ax, [bp+var_164]
		sub	ax, 63h	; 'c'
		cmp	ax, 15h
		jbe	short loc_10AB0
		jmp	loc_10BC4
; ���������������������������������������������������������������������������

loc_10AB0:				; CODE XREF: sub_1093E+16Dj
		add	ax, ax
		xchg	ax, bx
		jmp	cs:off_10C08[bx]

loc_10AB8:				; DATA XREF: sub_1093E+2E0o
		mov	bx, word_11A52
		mov	bx, [bx]
		mov	ax, word_11A5A
		mov	[bx], ax

loc_10AC3:				; CODE XREF: sub_1093E+263j
		add	word_11A52, 2
		jmp	loc_10C34
; ���������������������������������������������������������������������������
		align 2

loc_10ACC:				; CODE XREF: sub_1093E+175j
					; DATA XREF: sub_1093E+2EEo
		inc	word_11A58

loc_10AD0:				; CODE XREF: sub_1093E+175j
					; DATA XREF: sub_1093E+2CCo ...
		mov	word_11A44, 0
		mov	ax, 0Ah

loc_10AD9:				; CODE XREF: sub_1093E+1A9j
					; sub_1093E+269j
		push	ax
		call	sub_10C5C

loc_10ADD:				; CODE XREF: sub_1093E+272j
					; sub_1093E+283j
		add	sp, 2
		jmp	loc_10C34
; ���������������������������������������������������������������������������
		align 2

loc_10AE4:				; CODE XREF: sub_1093E+175j
					; DATA XREF: sub_1093E+2E2o
		mov	ax, 8
		jmp	short loc_10AD9
; ���������������������������������������������������������������������������
		align 2

loc_10AEA:				; CODE XREF: sub_1093E+175j
					; DATA XREF: sub_1093E+2E4o
		inc	word_11A48
		inc	word_11A4A
		cmp	word_11A56, 0
		jnz	short loc_10B02
		mov	word_11A60, 1
		jmp	short loc_10B08
; ���������������������������������������������������������������������������
		align 2

loc_10B02:				; CODE XREF: sub_1093E+1B9j
		mov	word_11A60, 0

loc_10B08:				; CODE XREF: sub_1093E+1C1j
		inc	word_11A56
		mov	word_11A5E, 4
		cmp	word_11A4C, 8
		jnz	short loc_10B1C
		jmp	loc_10BA4
; ���������������������������������������������������������������������������

loc_10B1C:				; CODE XREF: sub_1093E+1D9j
		sub	ax, ax
		mov	word_11A4C, ax
		mov	[bp+var_4], ax
		cmp	word_11A64, ax
		jz	short loc_10B51
		mov	ax, word_11A64
		mov	[bp+var_4], ax
		cmp	word_11A50, 0
		jz	short loc_10B40
		mov	word_11A64, 0
		jmp	short loc_10B51
; ���������������������������������������������������������������������������
		align 2

loc_10B40:				; CODE XREF: sub_1093E+1F7j
		sub	word_11A64, 5
		mov	ax, word_11A64
		or	ax, ax
		jge	short loc_10B4E
		sub	ax, ax

loc_10B4E:				; CODE XREF: sub_1093E+20Cj
		mov	word_11A64, ax

loc_10B51:				; CODE XREF: sub_1093E+1EAj
					; sub_1093E+1FFj
		add	word_11A52, 2
		mov	ax, 10h
		push	ax
		call	sub_10C5C
		add	sp, 2
		mov	ax, 3Ah	; ':'
		push	ax
		call	sub_10F36
		add	sp, 2
		cmp	[bp+var_4], 0
		jz	short loc_10B92
		cmp	word_11A50, 0
		jz	short loc_10B8C
		mov	ax, [bp+var_4]
		sub	ax, 5
		mov	word_11A64, ax
		or	ax, ax
		jge	short loc_10B86
		sub	ax, ax

loc_10B86:				; CODE XREF: sub_1093E+244j
		mov	word_11A64, ax
		jmp	short loc_10B92
; ���������������������������������������������������������������������������
		align 2

loc_10B8C:				; CODE XREF: sub_1093E+237j
		mov	word_11A64, 0

loc_10B92:				; CODE XREF: sub_1093E+230j
					; sub_1093E+24Bj
		sub	word_11A52, 4
		mov	ax, 10h
		push	ax
		call	sub_10C5C
		add	sp, 2
		jmp	loc_10AC3
; ���������������������������������������������������������������������������

loc_10BA4:				; CODE XREF: sub_1093E+175j
					; sub_1093E+1DBj
					; DATA XREF: ...
		mov	ax, 10h
		jmp	loc_10AD9
; ���������������������������������������������������������������������������

loc_10BAA:				; CODE XREF: sub_1093E+175j
					; DATA XREF: sub_1093E+2EAo
		sub	ax, ax

loc_10BAC:				; CODE XREF: sub_1093E+279j
		push	ax
		call	sub_10D92
		jmp	loc_10ADD
; ���������������������������������������������������������������������������
		align 2

loc_10BB4:				; CODE XREF: sub_1093E+175j
					; DATA XREF: sub_1093E:off_10C08o
		mov	ax, 1
		jmp	short loc_10BAC
; ���������������������������������������������������������������������������
		align 2

loc_10BBA:				; CODE XREF: sub_1093E+175j
					; DATA XREF: sub_1093E+2CEo ...
		push	[bp+var_164]
		call	sub_10E7A
		jmp	loc_10ADD
; ���������������������������������������������������������������������������

loc_10BC4:				; CODE XREF: sub_1093E+16Fj
					; sub_1093E+175j
					; DATA XREF: ...
		cmp	word_11A4C, 0
		jz	short loc_10BCE
		mov	ax, si
		dec	si

loc_10BCE:				; CODE XREF: sub_1093E+35j
					; sub_1093E+28Bj
		mov	di, si

loc_10BD0:				; CODE XREF: sub_1093E+29Bj
		inc	di
		cmp	byte ptr [di], 0
		jz	short loc_10BDB
		cmp	byte ptr [di], 25h ; '%'
		jnz	short loc_10BD0

loc_10BDB:				; CODE XREF: sub_1093E+296j
		mov	ax, di
		sub	ax, si
		push	ax
		push	ds
		push	si
		call	sub_10FD2
		add	sp, 6
		mov	si, di

loc_10BEA:				; CODE XREF: sub_1093E+2Dj
					; sub_1093E+311j
		cmp	byte ptr [si], 0
		jz	short loc_10BF2
		jmp	loc_1096E
; ���������������������������������������������������������������������������

loc_10BF2:				; CODE XREF: sub_1093E+129j
					; sub_1093E+2AFj
		cmp	word_11A5A, 0
		jnz	short loc_10C52
		mov	bx, word_11A46
		test	byte ptr [bx+6], 20h
		jz	short loc_10C52

loc_10C03:				; CODE XREF: sub_1093E+30Cj
		mov	ax, 0FFFFh
		jmp	short loc_10C55
; ���������������������������������������������������������������������������
off_10C08	dw offset loc_10BB4	; DATA XREF: sub_1093E+175r
		dw offset loc_10AD0
		dw offset loc_10BBA
		dw offset loc_10BBA
		dw offset loc_10BBA
		dw offset loc_10BC4
		dw offset loc_10AD0
		dw offset loc_10BC4
		dw offset loc_10BC4
		dw offset loc_10BC4
		dw offset loc_10BC4
		dw offset loc_10AB8
		dw offset loc_10AE4
		dw offset loc_10AEA
		dw offset loc_10BC4
		dw offset loc_10BC4
		dw offset loc_10BAA
		dw offset loc_10BC4
		dw offset loc_10ACC
		dw offset loc_10BC4
		dw offset loc_10BC4
		dw offset loc_10BA4
; ���������������������������������������������������������������������������

loc_10C34:				; CODE XREF: sub_1093E+18Aj
					; sub_1093E+1A2j
		cmp	word_11A5C, 0
		jz	short loc_10C4E
		cmp	word_11A5A, 0
		jnz	short loc_10C52
		mov	bx, word_11A46
		test	byte ptr [bx+6], 20h
		jnz	short loc_10C03
		jmp	short loc_10C52
; ���������������������������������������������������������������������������

loc_10C4E:				; CODE XREF: sub_1093E+2FBj
		inc	si
		jmp	short loc_10BEA
; ���������������������������������������������������������������������������
		align 2

loc_10C52:				; CODE XREF: sub_1093E+2B9j
					; sub_1093E+2C3j ...
		mov	ax, word_11A5A

loc_10C55:				; CODE XREF: sub_1093E+2C8j
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
sub_1093E	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_10C5C	proc near		; CODE XREF: sub_1093E+19Cp
					; sub_1093E+21Cp ...

var_18		= word ptr -18h
var_C		= word ptr -0Ch
var_8		= word ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 18h
		push	di
		push	si
		cmp	[bp+arg_0], 0Ah
		jz	short loc_10C6E
		inc	word_11A58

loc_10C6E:				; CODE XREF: sub_10C5C+Cj
		cmp	word_11A4C, 2
		jz	short loc_10C7C
		cmp	word_11A4C, 10h
		jnz	short loc_10C92

loc_10C7C:				; CODE XREF: sub_10C5C+17j
		mov	bx, word_11A52
		mov	ax, [bx]
		mov	dx, [bx+2]
		mov	[bp+var_4], ax
		mov	[bp+var_2], dx
		add	word_11A52, 4
		jmp	short loc_10CBC
; ���������������������������������������������������������������������������

loc_10C92:				; CODE XREF: sub_10C5C+1Ej
		cmp	word_11A58, 0
		jz	short loc_10CAA
		mov	bx, word_11A52
		mov	ax, [bx]
		mov	[bp+var_4], ax
		mov	[bp+var_2], 0
		jmp	short loc_10CB7
; ���������������������������������������������������������������������������
		align 2

loc_10CAA:				; CODE XREF: sub_10C5C+3Bj
		mov	bx, word_11A52
		mov	ax, [bx]
		cwd
		mov	[bp+var_4], ax
		mov	[bp+var_2], dx

loc_10CB7:				; CODE XREF: sub_10C5C+4Bj
		add	word_11A52, 2

loc_10CBC:				; CODE XREF: sub_10C5C+34j
		cmp	word_11A44, 0
		jz	short loc_10CD0
		mov	ax, [bp+var_4]
		or	ax, [bp+var_2]
		jz	short loc_10CD0
		mov	ax, [bp+arg_0]
		jmp	short loc_10CD2
; ���������������������������������������������������������������������������

loc_10CD0:				; CODE XREF: sub_10C5C+65j
					; sub_10C5C+6Dj
		sub	ax, ax

loc_10CD2:				; CODE XREF: sub_10C5C+72j
		mov	word_11A66, ax
		mov	si, word_11A62
		cmp	word_11A58, 0
		jnz	short loc_10D0A
		cmp	[bp+var_2], 0
		jge	short loc_10D0A
		cmp	[bp+arg_0], 0Ah
		jnz	short loc_10D03
		mov	byte ptr [si], 2Dh ; '-'
		inc	si
		mov	ax, [bp+var_4]
		mov	dx, [bp+var_2]
		neg	ax
		adc	dx, 0
		neg	dx
		mov	[bp+var_4], ax
		mov	[bp+var_2], dx

loc_10D03:				; CODE XREF: sub_10C5C+8Ej
		mov	[bp+var_8], 1
		jmp	short loc_10D0F
; ���������������������������������������������������������������������������

loc_10D0A:				; CODE XREF: sub_10C5C+82j
					; sub_10C5C+88j
		mov	[bp+var_8], 0

loc_10D0F:				; CODE XREF: sub_10C5C+ACj
		lea	ax, [bp+var_18]
		mov	di, ax
		push	[bp+arg_0]
		push	di
		push	[bp+var_2]
		push	[bp+var_4]
		call	sub_11654
		add	sp, 8
		cmp	word_11A56, 0
		jz	short loc_10D4C
		push	di
		call	sub_11638
		add	sp, 2
		mov	cx, word_11A5E
		sub	cx, ax
		mov	[bp+var_C], cx
		jmp	short loc_10D42
; ���������������������������������������������������������������������������
		align 2

loc_10D3E:				; CODE XREF: sub_10C5C+EBj
		mov	byte ptr [si], 30h ; '0'
		inc	si

loc_10D42:				; CODE XREF: sub_10C5C+DFj
		mov	ax, cx
		dec	cx
		or	ax, ax
		jg	short loc_10D3E
		mov	[bp+var_C], cx

loc_10D4C:				; CODE XREF: sub_10C5C+CDj
		mov	cx, word_11A4A

loc_10D50:				; CODE XREF: sub_10C5C+109j
		mov	al, [di]
		mov	[si], al
		or	cx, cx
		jz	short loc_10D5F
		cmp	al, 61h	; 'a'
		jl	short loc_10D5F
		sub	byte ptr [si], 20h ; ' '

loc_10D5F:				; CODE XREF: sub_10C5C+FAj
					; sub_10C5C+FEj
		inc	si
		inc	di
		cmp	byte ptr [di-1], 0
		jnz	short loc_10D50
		cmp	word_11A58, 0
		jnz	short loc_10D82
		mov	ax, word_11A4E
		or	ax, word_11A54
		jz	short loc_10D82
		cmp	[bp+var_8], 0
		jnz	short loc_10D82
		mov	ax, 1
		jmp	short loc_10D84
; ���������������������������������������������������������������������������

loc_10D82:				; CODE XREF: sub_10C5C+110j
					; sub_10C5C+119j ...
		sub	ax, ax

loc_10D84:				; CODE XREF: sub_10C5C+124j
		push	ax
		call	sub_1103A
		add	sp, 2
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
sub_10C5C	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_10D92	proc near		; CODE XREF: sub_1093E+26Fp

var_E		= dword	ptr -0Eh
var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 10h
		push	di
		push	si
		cmp	[bp+arg_0], 0
		jz	short loc_10DB4
		mov	si, 1
		mov	ax, word_11A52
		mov	[bp+var_8], ax
		mov	[bp+var_6], ds
		add	word_11A52, 2
		jmp	loc_10E45
; ���������������������������������������������������������������������������

loc_10DB4:				; CODE XREF: sub_10D92+Cj
		cmp	word_11A4C, 10h
		jnz	short loc_10DD2
		mov	bx, word_11A52
		mov	ax, [bx]
		mov	dx, [bx+2]
		mov	[bp+var_8], ax
		mov	[bp+var_6], dx
		add	word_11A52, 4
		jmp	short loc_10DE6
; ���������������������������������������������������������������������������
		align 2

loc_10DD2:				; CODE XREF: sub_10D92+27j
		mov	bx, word_11A52
		mov	ax, [bx]
		mov	[bp+var_4], ax
		mov	[bp+var_8], ax
		mov	[bp+var_6], ds
		add	word_11A52, 2

loc_10DE6:				; CODE XREF: sub_10D92+3Dj
		cmp	word_11A4C, 10h
		jnz	short loc_10DFA
		mov	ax, [bp+var_8]
		or	ax, [bp+var_6]
		jnz	short loc_10E09
		mov	ax, 230h
		jmp	short loc_10E03
; ���������������������������������������������������������������������������

loc_10DFA:				; CODE XREF: sub_10D92+59j
		cmp	[bp+var_4], 0
		jnz	short loc_10E09
		mov	ax, 237h

loc_10E03:				; CODE XREF: sub_10D92+66j
		mov	[bp+var_8], ax
		mov	[bp+var_6], ds

loc_10E09:				; CODE XREF: sub_10D92+61j
					; sub_10D92+6Cj
		mov	ax, [bp+var_8]
		mov	dx, [bp+var_6]
		mov	word ptr [bp+var_E], ax
		mov	word ptr [bp+var_E+2], dx
		sub	si, si
		cmp	word_11A56, si
		jz	short loc_10E39
		mov	cx, word_11A5E
		jmp	short loc_10E31
; ���������������������������������������������������������������������������
		align 2

loc_10E24:				; CODE XREF: sub_10D92+A3j
		les	bx, [bp+var_E]
		inc	word ptr [bp+var_E]
		cmp	byte ptr es:[bx], 0
		jz	short loc_10E45
		inc	si

loc_10E31:				; CODE XREF: sub_10D92+8Fj
		cmp	cx, si
		jle	short loc_10E45
		jmp	short loc_10E24
; ���������������������������������������������������������������������������
		align 2

loc_10E38:				; CODE XREF: sub_10D92+B1j
		inc	si

loc_10E39:				; CODE XREF: sub_10D92+89j
		les	bx, [bp+var_E]
		inc	word ptr [bp+var_E]
		cmp	byte ptr es:[bx], 0
		jnz	short loc_10E38

loc_10E45:				; CODE XREF: sub_10D92+1Fj
					; sub_10D92+9Cj ...
		mov	di, word_11A64
		sub	di, si
		cmp	word_11A50, 0
		jnz	short loc_10E59
		push	di
		call	sub_10F74
		add	sp, 2

loc_10E59:				; CODE XREF: sub_10D92+BEj
		push	si
		push	[bp+var_6]
		push	[bp+var_8]
		call	sub_10FD2
		add	sp, 6
		cmp	word_11A50, 0
		jz	short loc_10E74
		push	di
		call	sub_10F74
		add	sp, 2

loc_10E74:				; CODE XREF: sub_10D92+D9j
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
sub_10D92	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_10E7A	proc near		; CODE XREF: sub_1093E+280p

var_4		= byte ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 4
		mov	ax, word_11A52
		mov	[bp+var_2], ax
		cmp	[bp+arg_0], 67h	; 'g'
		jz	short loc_10E92
		cmp	[bp+arg_0], 47h	; 'G'
		jnz	short loc_10E96

loc_10E92:				; CODE XREF: sub_10E7A+10j
		mov	al, 1
		jmp	short loc_10E98
; ���������������������������������������������������������������������������

loc_10E96:				; CODE XREF: sub_10E7A+16j
		sub	al, al

loc_10E98:				; CODE XREF: sub_10E7A+1Aj
		mov	[bp+var_4], al
		cmp	word_11A56, 0
		jnz	short loc_10EA8
		mov	word_11A5E, 6

loc_10EA8:				; CODE XREF: sub_10E7A+26j
		cmp	[bp+var_4], 0
		jz	short loc_10EBB
		cmp	word_11A5E, 0
		jnz	short loc_10EBB
		mov	word_11A5E, 1

loc_10EBB:				; CODE XREF: sub_10E7A+32j
					; sub_10E7A+39j
		push	word_11A4A
		push	word_11A5E
		push	[bp+arg_0]
		push	word_11A62
		push	[bp+var_2]
		call	off_1194A
		add	sp, 0Ah
		cmp	[bp+var_4], 0
		jz	short loc_10EEC
		cmp	word_11A44, 0
		jnz	short loc_10EEC
		push	word_11A62
		call	off_1194C
		add	sp, 2

loc_10EEC:				; CODE XREF: sub_10E7A+5Ej
					; sub_10E7A+65j
		cmp	word_11A44, 0
		jz	short loc_10F05
		cmp	word_11A5E, 0
		jnz	short loc_10F05
		push	word_11A62
		call	off_11950
		add	sp, 2

loc_10F05:				; CODE XREF: sub_10E7A+77j
					; sub_10E7A+7Ej
		add	word_11A52, 8
		mov	word_11A66, 0
		mov	ax, word_11A4E
		or	ax, word_11A54
		jz	short loc_10F2C
		push	[bp+var_2]
		call	off_11952
		add	sp, 2
		or	ax, ax
		jz	short loc_10F2C
		mov	ax, 1
		jmp	short loc_10F2E
; ���������������������������������������������������������������������������

loc_10F2C:				; CODE XREF: sub_10E7A+9Dj
					; sub_10E7A+ABj
		sub	ax, ax

loc_10F2E:				; CODE XREF: sub_10E7A+B0j
		push	ax
		call	sub_1103A
		mov	sp, bp
		pop	bp
		retn
sub_10E7A	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_10F36	proc near		; CODE XREF: sub_1093E+226p
					; sub_1103A+5Cp ...

arg_0		= byte ptr  4

		push	bp
		mov	bp, sp
		push	si
		cmp	word_11A5C, 0
		jnz	short loc_10F70
		mov	bx, word_11A46
		dec	word ptr [bx+2]
		js	short loc_10F58
		mov	al, [bp+arg_0]
		mov	si, [bx]
		inc	word ptr [bx]
		mov	[si], al
		sub	ah, ah
		jmp	short loc_10F62
; ���������������������������������������������������������������������������
		align 2

loc_10F58:				; CODE XREF: sub_10F36+12j
		push	bx
		push	word ptr [bp+arg_0]
		call	sub_105F4
		add	sp, 4

loc_10F62:				; CODE XREF: sub_10F36+1Fj
		inc	ax
		jnz	short loc_10F6C
		inc	word_11A5C
		jmp	short loc_10F70
; ���������������������������������������������������������������������������
		align 2

loc_10F6C:				; CODE XREF: sub_10F36+2Dj
		inc	word_11A5A

loc_10F70:				; CODE XREF: sub_10F36+9j
					; sub_10F36+33j
		pop	si
		pop	bp
		retn
sub_10F36	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_10F74	proc near		; CODE XREF: sub_10D92+C1p
					; sub_10D92+DCp ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	di
		push	si
		cmp	word_11A5C, 0
		jnz	short loc_10FCC
		mov	si, [bp+arg_0]
		or	si, si
		jle	short loc_10FCC
		jmp	short loc_10FA1
; ���������������������������������������������������������������������������

loc_10F8C:				; CODE XREF: sub_10F74+3Bj
		push	word_11A46
		push	word_11A68
		call	sub_105F4
		add	sp, 4

loc_10F9A:				; CODE XREF: sub_10F74+48j
		inc	ax
		jnz	short loc_10FA1
		inc	word_11A5C

loc_10FA1:				; CODE XREF: sub_10F74+16j
					; sub_10F74+27j
		mov	ax, si
		dec	si
		or	ax, ax
		jle	short loc_10FBE
		mov	bx, word_11A46
		dec	word ptr [bx+2]
		js	short loc_10F8C
		mov	al, byte ptr word_11A68
		mov	di, [bx]
		inc	word ptr [bx]
		mov	[di], al
		sub	ah, ah
		jmp	short loc_10F9A
; ���������������������������������������������������������������������������

loc_10FBE:				; CODE XREF: sub_10F74+32j
		cmp	word_11A5C, 0
		jnz	short loc_10FCC
		mov	ax, [bp+arg_0]
		add	word_11A5A, ax

loc_10FCC:				; CODE XREF: sub_10F74+Dj
					; sub_10F74+14j ...
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
sub_10F74	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_10FD2	proc near		; CODE XREF: sub_1093E+2A4p
					; sub_10D92+CEp ...

arg_0		= dword	ptr  4
arg_4		= word ptr  8

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	di
		push	si
		mov	si, [bp+arg_4]
		cmp	word_11A5C, 0
		jnz	short loc_11034
		jmp	short loc_11002
; ���������������������������������������������������������������������������

loc_10FE6:				; CODE XREF: sub_10FD2+3Ej
		push	word_11A46
		les	bx, [bp+arg_0]
		mov	al, es:[bx]
		cbw
		push	ax
		call	sub_105F4
		add	sp, 4

loc_10FF8:				; CODE XREF: sub_10FD2+52j
		inc	ax
		jnz	short loc_10FFF
		inc	word_11A5C

loc_10FFF:				; CODE XREF: sub_10FD2+27j
		inc	word ptr [bp+arg_0]

loc_11002:				; CODE XREF: sub_10FD2+12j
		mov	ax, si
		dec	si
		or	ax, ax
		jz	short loc_11026
		mov	bx, word_11A46
		dec	word ptr [bx+2]
		js	short loc_10FE6
		les	bx, [bp+arg_0]
		mov	al, es:[bx]
		mov	bx, word_11A46
		mov	di, [bx]
		inc	word ptr [bx]
		mov	[di], al
		sub	ah, ah
		jmp	short loc_10FF8
; ���������������������������������������������������������������������������

loc_11026:				; CODE XREF: sub_10FD2+35j
		cmp	word_11A5C, 0
		jnz	short loc_11034
		mov	ax, [bp+arg_4]
		add	word_11A5A, ax

loc_11034:				; CODE XREF: sub_10FD2+10j
					; sub_10FD2+59j
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
sub_10FD2	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_1103A	proc near		; CODE XREF: sub_10C5C+129p
					; sub_10E7A+B5p

var_8		= word ptr -8
var_6		= word ptr -6
var_4		= word ptr -4
arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 0Ah
		push	di
		push	si
		mov	si, word_11A62
		sub	ax, ax
		mov	[bp+var_4], ax
		mov	[bp+var_6], ax
		cmp	word_11A68, 30h	; '0'
		jnz	short loc_1106D
		cmp	word_11A56, ax
		jz	short loc_1106D
		cmp	word_11A48, ax
		jz	short loc_11067
		cmp	word_11A60, ax
		jnz	short loc_1106D

loc_11067:				; CODE XREF: sub_1103A+25j
		mov	word_11A68, 20h	; ' '

loc_1106D:				; CODE XREF: sub_1103A+19j
					; sub_1103A+1Fj ...
		mov	di, word_11A64
		push	si
		call	sub_11638
		add	sp, 2
		mov	[bp+var_8], ax
		sub	di, ax
		sub	di, [bp+arg_0]
		cmp	word_11A50, 0
		jnz	short loc_1109F
		cmp	byte ptr [si], 2Dh ; '-'
		jnz	short loc_1109F
		cmp	word_11A68, 30h	; '0'
		jnz	short loc_1109F
		lodsb
		cbw
		push	ax
		call	sub_10F36
		add	sp, 2
		dec	[bp+var_8]

loc_1109F:				; CODE XREF: sub_1103A+4Bj
					; sub_1103A+50j ...
		cmp	word_11A68, 30h	; '0'
		jz	short loc_110B1
		or	di, di
		jle	short loc_110B1
		cmp	word_11A50, 0
		jz	short loc_110CA

loc_110B1:				; CODE XREF: sub_1103A+6Aj
					; sub_1103A+6Ej
		cmp	[bp+arg_0], 0
		jz	short loc_110BD
		inc	[bp+var_6]
		call	sub_1111C

loc_110BD:				; CODE XREF: sub_1103A+7Bj
		cmp	word_11A66, 0
		jz	short loc_110CA
		inc	[bp+var_4]
		call	sub_11134

loc_110CA:				; CODE XREF: sub_1103A+75j
					; sub_1103A+88j
		cmp	word_11A50, 0
		jnz	short loc_110F7
		push	di
		call	sub_10F74
		add	sp, 2
		cmp	[bp+arg_0], 0
		jz	short loc_110E7
		cmp	[bp+var_6], 0
		jnz	short loc_110E7
		call	sub_1111C

loc_110E7:				; CODE XREF: sub_1103A+A2j
					; sub_1103A+A8j
		cmp	word_11A66, 0
		jz	short loc_110F7
		cmp	[bp+var_4], 0
		jnz	short loc_110F7
		call	sub_11134

loc_110F7:				; CODE XREF: sub_1103A+95j
					; sub_1103A+B2j ...
		push	[bp+var_8]
		push	ds
		push	si
		call	sub_10FD2
		add	sp, 6
		cmp	word_11A50, 0
		jz	short loc_11116
		mov	word_11A68, 20h	; ' '
		push	di
		call	sub_10F74
		add	sp, 2

loc_11116:				; CODE XREF: sub_1103A+CDj
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
sub_1103A	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_1111C	proc near		; CODE XREF: sub_1103A+80p
					; sub_1103A+AAp
		cmp	word_11A4E, 0
		jz	short loc_11128
		mov	ax, 2Bh	; '+'
		jmp	short loc_1112B
; ���������������������������������������������������������������������������

loc_11128:				; CODE XREF: sub_1111C+5j
		mov	ax, 20h	; ' '

loc_1112B:				; CODE XREF: sub_1111C+Aj
		push	ax
		call	sub_10F36
		add	sp, 2
		retn
sub_1111C	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_11134	proc near		; CODE XREF: sub_1103A+8Dp
					; sub_1103A+BAp
		mov	ax, 30h	; '0'
		push	ax
		call	sub_10F36
		add	sp, 2
		cmp	word_11A66, 10h
		jnz	short locret_1115C
		cmp	word_11A4A, 0
		jz	short loc_11152
		mov	ax, 58h	; 'X'
		jmp	short loc_11155
; ���������������������������������������������������������������������������
		align 2

loc_11152:				; CODE XREF: sub_11134+16j
		mov	ax, 78h	; 'x'

loc_11155:				; CODE XREF: sub_11134+1Bj
		push	ax
		call	sub_10F36
		add	sp, 2

locret_1115C:				; CODE XREF: sub_11134+Fj
		retn
sub_11134	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_1115E	proc near		; CODE XREF: sub_1093E+B7p
					; sub_1093E+E1p

var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6

		push	bp
		mov	bp, sp
		sub	sp, 4
		push	di
		push	si
		mov	si, [bp+arg_2]
		mov	[bp+var_2], 1
		cmp	byte ptr [si], 2Ah ; '*'
		jnz	short loc_11182
		mov	bx, word_11A52
		mov	di, [bx]
		add	word_11A52, 2
		inc	si
		jmp	short loc_111C9
; ���������������������������������������������������������������������������
		align 2

loc_11182:				; CODE XREF: sub_1115E+13j
		cmp	byte ptr [si], 2Dh ; '-'
		jnz	short loc_1118D
		mov	[bp+var_2], 0FFFFh
		inc	si

loc_1118D:				; CODE XREF: sub_1115E+27j
		sub	di, di
		cmp	byte ptr [si], 30h ; '0'
		jl	short loc_111C9
		cmp	byte ptr [si], 39h ; '9'
		jg	short loc_111C9
		cmp	word_11A56, di
		jnz	short loc_111AA
		cmp	byte ptr [si], 30h ; '0'
		jnz	short loc_111AA
		mov	word_11A68, 30h	; '0'

loc_111AA:				; CODE XREF: sub_1115E+3Fj
					; sub_1115E+44j ...
		mov	al, [si]
		cbw
		mov	cx, di
		shl	cx, 1
		shl	cx, 1
		add	cx, di
		shl	cx, 1
		add	cx, ax
		sub	cx, 30h	; '0'
		mov	di, cx
		inc	si
		cmp	byte ptr [si], 30h ; '0'
		jl	short loc_111C9
		cmp	byte ptr [si], 39h ; '9'
		jle	short loc_111AA

loc_111C9:				; CODE XREF: sub_1115E+21j
					; sub_1115E+34j ...
		mov	ax, [bp+var_2]
		imul	di
		mov	di, ax
		mov	bx, [bp+arg_0]
		mov	[bx], di
		mov	ax, si
		pop	si
		pop	di
		mov	sp, bp
		pop	bp
		retn
sub_1115E	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_111DE	proc near		; CODE XREF: sub_1093E+A8p

arg_0		= byte ptr  4

		push	bp
		mov	bp, sp
		sub	sp, 2
		push	si
		mov	si, 23Eh
		mov	cl, [bp+arg_0]
		jmp	short loc_111EF
; ���������������������������������������������������������������������������
		align 2

loc_111EE:				; CODE XREF: sub_111DE+18j
		inc	si

loc_111EF:				; CODE XREF: sub_111DE+Dj
		cmp	byte ptr [si], 0
		jz	short loc_111FE
		cmp	cl, [si]
		jnz	short loc_111EE
		mov	ax, 1
		jmp	short loc_11200
; ���������������������������������������������������������������������������
		align 2

loc_111FE:				; CODE XREF: sub_111DE+14j
		sub	ax, ax

loc_11200:				; CODE XREF: sub_111DE+1Dj
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_111DE	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_11206	proc near		; CODE XREF: sub_105F4+11Bp

var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

; FUNCTION CHUNK AT 0545 SIZE 0000000D BYTES

		push	bp
		mov	bp, sp
		sub	sp, 4
		mov	bx, [bp+arg_0]
		cmp	bx, word_117C0
		jb	short loc_1121A
		mov	ax, 900h
		jmp	short loc_11244
; ���������������������������������������������������������������������������

loc_1121A:				; CODE XREF: sub_11206+Dj
		test	[bp+arg_4], 8000h
		jz	short loc_11269
		cmp	[bp+arg_6], 0
		jz	short loc_11241
		xor	cx, cx
		mov	dx, cx
		mov	ax, 4201h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from present location
		jb	short loc_1127D
		test	[bp+arg_6], 2
		jnz	short loc_11247
		add	ax, [bp+arg_2]
		adc	dx, [bp+arg_4]
		jns	short loc_11269

loc_11241:				; CODE XREF: sub_11206+1Fj
					; sub_11206+61j
		mov	ax, 1600h

loc_11244:				; CODE XREF: sub_11206+12j
		stc
		jmp	short loc_1127D
; ���������������������������������������������������������������������������

loc_11247:				; CODE XREF: sub_11206+31j
		mov	[bp+var_2], dx
		mov	[bp+var_4], ax
		mov	dx, cx
		mov	ax, 4202h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from end of file
		add	ax, [bp+arg_2]
		adc	dx, [bp+arg_4]
		jns	short loc_11269
		mov	cx, [bp+var_2]
		mov	dx, [bp+var_4]
		mov	ax, 4200h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from beginning of	file
		jmp	short loc_11241
; ���������������������������������������������������������������������������

loc_11269:				; CODE XREF: sub_11206+19j
					; sub_11206+39j ...
		mov	dx, [bp+arg_2]
		mov	cx, [bp+arg_4]
		mov	al, byte ptr [bp+arg_6]
		mov	ah, 42h
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method:
					; 0-from beginnig,1-from current,2-from	end
		jb	short loc_1127D
		and	byte ptr [bx+0D2h], 0FDh

loc_1127D:				; CODE XREF: sub_11206+2Aj
					; sub_11206+3Fj ...
		jmp	loc_10545
sub_11206	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_11280	proc near		; CODE XREF: sub_105F4+FCp
					; sub_105F4+139p ...

var_8		= word ptr -8
var_4		= word ptr -4
var_2		= word ptr -2
arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8

; FUNCTION CHUNK AT 1374 SIZE 00000034 BYTES

		push	bp
		mov	bp, sp
		sub	sp, 8
		mov	bx, [bp+arg_0]
		cmp	bx, word_117C0
		jb	short loc_11296
		mov	ax, 900h
		stc

loc_11293:				; CODE XREF: sub_11280+26j
		jmp	loc_10545
; ���������������������������������������������������������������������������

loc_11296:				; CODE XREF: sub_11280+Dj
		test	byte ptr [bx+0D2h], 20h
		jz	short loc_112A8
		mov	ax, 4202h
		xor	cx, cx
		mov	dx, cx
		int	21h		; DOS -	2+ - MOVE FILE READ/WRITE POINTER (LSEEK)
					; AL = method: offset from end of file
		jb	short loc_11293

loc_112A8:				; CODE XREF: sub_11280+1Bj
		test	byte ptr [bx+0D2h], 80h
		jz	short loc_1131D
		mov	dx, [bp+arg_2]
		push	ds
		pop	es
		assume es:dseg
		xor	ax, ax
		mov	[bp+var_2], ax
		mov	[bp+var_4], ax
		cld
		push	di
		push	si
		mov	di, dx
		mov	si, dx
		mov	[bp+var_8], sp
		mov	cx, [bp+arg_4]
		jcxz	short loc_1131F
		mov	al, 0Ah
		repne scasb
		jnz	short loc_1131B
		call	sub_113A8
		cmp	ax, 0A8h ; '�'
		jbe	short loc_11321
		sub	sp, 2
		mov	bx, sp
		mov	dx, 200h
		cmp	ax, 228h
		jnb	short loc_112E9
		mov	dx, 80h	; '�'

loc_112E9:				; CODE XREF: sub_11280+64j
		sub	sp, dx
		mov	dx, sp
		mov	di, dx
		push	ss
		pop	es
		mov	cx, [bp+arg_4]

loc_112F4:				; CODE XREF: sub_11280+7Ej
		lodsb
		cmp	al, 0Ah
		jz	short loc_11305

loc_112F9:				; CODE XREF: sub_11280+94j
		cmp	di, bx
		jz	short loc_11316

loc_112FD:				; CODE XREF: sub_11280+99j
		stosb
		loop	loc_112F4
		call	sub_11326
		jmp	short loc_11366
; ���������������������������������������������������������������������������

loc_11305:				; CODE XREF: sub_11280+77j
		mov	al, 0Dh
		cmp	di, bx
		jnz	short loc_1130E
		call	sub_11326

loc_1130E:				; CODE XREF: sub_11280+89j
		stosb
		mov	al, 0Ah
		inc	[bp+var_4]
		jmp	short loc_112F9
; ���������������������������������������������������������������������������

loc_11316:				; CODE XREF: sub_11280+7Bj
		call	sub_11326
		jmp	short loc_112FD
; ���������������������������������������������������������������������������

loc_1131B:				; CODE XREF: sub_11280+4Fj
		pop	si
		pop	di

loc_1131D:				; CODE XREF: sub_11280+2Dj
		jmp	short loc_11374
; ���������������������������������������������������������������������������

loc_1131F:				; CODE XREF: sub_11280+49j
		jmp	short loc_11366
; ���������������������������������������������������������������������������

loc_11321:				; CODE XREF: sub_11280+57j
		xor	ax, ax
		jmp	loc_100C3
sub_11280	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_11326	proc near		; CODE XREF: sub_11280+80p
					; sub_11280+8Bp ...
		push	ax
		push	bx
		push	cx
		mov	cx, di
		sub	cx, dx
		jcxz	short loc_1133F
		mov	bx, [bp+4]
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		jb	short loc_11345
		add	[bp-2],	ax
		or	ax, ax
		jz	short loc_11345

loc_1133F:				; CODE XREF: sub_11326+7j
		pop	cx
		pop	bx
		pop	ax
		mov	di, dx
		retn
; ���������������������������������������������������������������������������

loc_11345:				; CODE XREF: sub_11326+10j
					; sub_11326+17j
		add	sp, 8
		jnb	short loc_1134E
		mov	ah, 9
		jmp	short loc_1136C
; ���������������������������������������������������������������������������

loc_1134E:				; CODE XREF: sub_11326+22j
		test	byte ptr [bx+0D2h], 40h
		jz	short loc_11360
		mov	bx, [bp+6]
		cmp	byte ptr [bx], 1Ah
		jnz	short loc_11360
		clc
		jmp	short loc_1136C
; ���������������������������������������������������������������������������

loc_11360:				; CODE XREF: sub_11326+2Dj
					; sub_11326+35j
		stc
		mov	ax, 1C00h
		jmp	short loc_1136C
; ���������������������������������������������������������������������������

loc_11366:				; CODE XREF: sub_11280+83j
					; sub_11280:loc_1131Fj
		mov	ax, [bp-2]
		sub	ax, [bp-4]

loc_1136C:				; CODE XREF: sub_11326+26j
					; sub_11326+38j ...
		mov	sp, [bp-8]
		pop	si
		pop	di

loc_11371:				; CODE XREF: sub_11280+10Bj
					; sub_11280+10Fj ...
		jmp	loc_10545
sub_11326	endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11280

loc_11374:				; CODE XREF: sub_11280:loc_1131Dj
		mov	cx, [bp+arg_4]
		or	cx, cx
		jnz	short loc_11380
		mov	ax, cx
		jmp	loc_10545
; ���������������������������������������������������������������������������

loc_11380:				; CODE XREF: sub_11280+F9j
		mov	dx, [bp+arg_2]
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		jnb	short loc_1138D
		mov	ah, 9
		jmp	short loc_11371
; ���������������������������������������������������������������������������

loc_1138D:				; CODE XREF: sub_11280+107j
		or	ax, ax
		jnz	short loc_11371
		test	byte ptr [bx+0D2h], 40h
		jz	short loc_113A2
		mov	bx, dx
		cmp	byte ptr [bx], 1Ah
		jnz	short loc_113A2
		clc
		jmp	short loc_11371
; ���������������������������������������������������������������������������

loc_113A2:				; CODE XREF: sub_11280+116j
					; sub_11280+11Dj
		stc
		mov	ax, 1C00h
		jmp	short loc_11371
; END OF FUNCTION CHUNK	FOR sub_11280

; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_113A8	proc near		; CODE XREF: sub_11280+51p
		pop	cx
		mov	ax, word_117EC
		cmp	ax, sp
		jnb	short loc_113B6
		sub	ax, sp
		neg	ax

loc_113B4:				; CODE XREF: sub_113A8+10j
		jmp	cx
; ���������������������������������������������������������������������������

loc_113B6:				; CODE XREF: sub_113A8+6j
		xor	ax, ax
		jmp	short loc_113B4
sub_113A8	endp

; ���������������������������������������������������������������������������
		push	bp
		mov	bp, sp
		mov	bx, [bp+4]
		or	bx, bx
		jz	short loc_113C8
		or	byte ptr [bx-2], 1

loc_113C8:				; CODE XREF: seg000:13C2j
		mov	sp, bp
		pop	bp
		retn

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_113CC	proc near		; CODE XREF: sub_1074A+23p

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	bx, 244h
		cmp	word ptr [bx], 0
		jnz	short loc_11402
		push	ds
		pop	es
		mov	ax, 5
		call	sub_11554
		jnz	short loc_113E8
		xor	ax, ax
		cwd
		jmp	short loc_1140C
; ���������������������������������������������������������������������������

loc_113E8:				; CODE XREF: sub_113CC+15j
		inc	ax
		and	al, 0FEh
		mov	word_11934, ax
		mov	word_11936, ax
		xchg	ax, si
		mov	word ptr [si], 1
		add	si, 4
		mov	word ptr [si-2], 0FFFEh
		mov	word_1193A, si

loc_11402:				; CODE XREF: sub_113CC+Bj
		mov	cx, [bp+arg_0]
		mov	ax, ds
		mov	es, ax
		call	sub_11415

loc_1140C:				; CODE XREF: sub_113CC+1Aj
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_113CC	endp

; ���������������������������������������������������������������������������
; START	OF FUNCTION CHUNK FOR sub_11415

loc_11412:				; CODE XREF: sub_11415+1j sub_11415+9j
		jmp	loc_114E3
; END OF FUNCTION CHUNK	FOR sub_11415

; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_11415	proc near		; CODE XREF: sub_113CC+3Dp

; FUNCTION CHUNK AT 1412 SIZE 00000003 BYTES

		inc	cx
		jz	short loc_11412
		and	cl, 0FEh
		cmp	cx, 0FFEEh
		jnb	short loc_11412
		mov	si, [bx+2]
		cld
		lodsw
		mov	di, si
		test	al, 1
		jz	short loc_1146D

loc_1142B:				; CODE XREF: sub_11415+2Ej
		dec	ax
		cmp	ax, cx
		jnb	short loc_11445
		mov	dx, ax
		add	si, ax
		lodsw
		test	al, 1
		jz	short loc_1146D
		add	ax, dx
		add	ax, 2
		mov	si, di
		mov	[si-2],	ax
		jmp	short loc_1142B
; ���������������������������������������������������������������������������

loc_11445:				; CODE XREF: sub_11415+19j
					; sub_11415+71j
		mov	di, si
		jz	short loc_11455
		add	di, cx
		mov	[si-2],	cx
		sub	ax, cx
		dec	ax
		mov	[di], ax
		jmp	short loc_1145A
; ���������������������������������������������������������������������������

loc_11455:				; CODE XREF: sub_11415+32j
		add	di, cx
		dec	byte ptr [si-2]

loc_1145A:				; CODE XREF: sub_11415+3Ej
		mov	ax, si
		mov	dx, ds
		mov	cx, ss
		cmp	dx, cx
		jz	short loc_11469
		mov	es:word_11942, ds

loc_11469:				; CODE XREF: sub_11415+4Dj
		mov	[bx+2],	di
		retn
; ���������������������������������������������������������������������������

loc_1146D:				; CODE XREF: sub_11415+14j
					; sub_11415+22j
		mov	es:byte_11948, 2

loc_11473:				; CODE XREF: sub_11415+6Aj
					; sub_11415+7Aj
		cmp	ax, 0FFFEh
		jz	short loc_1149D
		mov	di, si
		add	si, ax

loc_1147C:				; CODE XREF: sub_11415+A9j
					; sub_11415+CCj
		lodsw
		test	al, 1
		jz	short loc_11473
		mov	di, si

loc_11483:				; CODE XREF: sub_11415+86j
		dec	ax
		cmp	ax, cx
		jnb	short loc_11445
		mov	dx, ax
		add	si, ax
		lodsw
		test	al, 1
		jz	short loc_11473
		add	ax, dx
		add	ax, 2
		mov	si, di
		mov	[si-2],	ax
		jmp	short loc_11483
; ���������������������������������������������������������������������������

loc_1149D:				; CODE XREF: sub_11415+61j
		mov	ax, [bx+8]
		or	ax, ax
		jz	short loc_114A8
		mov	ds, ax
		jmp	short loc_114BC
; ���������������������������������������������������������������������������

loc_114A8:				; CODE XREF: sub_11415+8Dj
		dec	es:byte_11948
		jz	short loc_114C0
		mov	ax, ds
		mov	di, ss
		cmp	ax, di
		jz	short loc_114BC
		mov	ds, es:word_1193E
		assume ds:nothing

loc_114BC:				; CODE XREF: sub_11415+91j
					; sub_11415+A0j
		mov	si, [bx]
		jmp	short loc_1147C
; ���������������������������������������������������������������������������

loc_114C0:				; CODE XREF: sub_11415+98j
		mov	si, [bx+6]
		xor	ax, ax
		call	sub_11532
		cmp	ax, si
		jz	short loc_114D9
		and	al, 1
		inc	ax
		inc	ax
		cbw
		call	sub_11532
		jz	short loc_114E3
		dec	byte ptr [di-2]

loc_114D9:				; CODE XREF: sub_11415+B5j
		call	sub_114F8
		jz	short loc_114E3
		xchg	ax, si
		dec	si
		dec	si
		jmp	short loc_1147C
; ���������������������������������������������������������������������������

loc_114E3:				; CODE XREF: sub_11415:loc_11412j
					; sub_11415+BFj ...
		mov	ax, ds
		mov	cx, ss
		cmp	ax, cx
		jz	short loc_114EF
		mov	es:word_11942, ax

loc_114EF:				; CODE XREF: sub_11415+D4j
		mov	ax, [bx]
		mov	[bx+2],	ax
		xor	ax, ax
		cwd
		retn
sub_11415	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_114F8	proc near		; CODE XREF: sub_11415:loc_114D9p
		push	cx
		mov	ax, [di-2]
		test	al, 1
		jz	short loc_11503
		sub	cx, ax
		dec	cx

loc_11503:				; CODE XREF: sub_114F8+6j
		inc	cx
		inc	cx
		mov	dx, 7FFFh

loc_11508:				; CODE XREF: sub_114F8+19j
		cmp	dx, es:word_11944
		jbe	short loc_11513
		shr	dx, 1
		jnz	short loc_11508

loc_11513:				; CODE XREF: sub_114F8+15j
					; sub_114F8+34j
		mov	ax, cx
		add	ax, si
		jb	short loc_1152E
		add	ax, dx
		jb	short loc_1152A
		not	dx
		and	ax, dx
		sub	ax, si
		call	sub_11532
		jnz	short loc_11530
		not	dx

loc_1152A:				; CODE XREF: sub_114F8+23j
		shr	dx, 1
		jnz	short loc_11513

loc_1152E:				; CODE XREF: sub_114F8+1Fj
		xor	ax, ax

loc_11530:				; CODE XREF: sub_114F8+2Ej
		pop	cx
		retn
sub_114F8	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_11532	proc near		; CODE XREF: sub_11415+B0p
					; sub_11415+BCp ...
		push	dx
		push	cx
		call	sub_11554
		jz	short loc_11551
		push	di
		mov	di, si
		mov	si, ax
		add	si, dx
		mov	word ptr [si-2], 0FFFEh
		mov	[bx+6],	si
		mov	dx, si
		sub	dx, di
		dec	dx
		mov	[di-2],	dx
		pop	ax

loc_11551:				; CODE XREF: sub_11532+5j
		pop	cx
		pop	dx
		retn
sub_11532	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_11554	proc near		; CODE XREF: sub_113CC+12p
					; sub_11532+2p
		push	bx
		push	ax
		xor	dx, dx
		push	ds
		push	dx
		push	dx
		push	ax
		mov	ax, 1
		push	ax
		push	es
		pop	ds
		assume ds:dseg
		call	sub_11574
		add	sp, 8
		cmp	dx, 0FFFFh
		pop	ds
		pop	dx
		pop	bx
		jz	short locret_11572
		or	dx, dx

locret_11572:				; CODE XREF: sub_11554+1Aj
		retn
sub_11554	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_11574	proc near		; CODE XREF: sub_11554+Ep

arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_8		= word ptr  0Ch

		push	bp
		mov	bp, sp
		push	si
		push	di
		push	es
		cmp	[bp+arg_4], 0
		jnz	short loc_115B8
		mov	di, 58h	; 'X'
		mov	dx, [bp+arg_2]
		mov	ax, [bp+arg_0]
		dec	ax
		jnz	short loc_11593
		call	sub_115E2
		jb	short loc_115B8
		jmp	short loc_115DB
; ���������������������������������������������������������������������������

loc_11593:				; CODE XREF: sub_11574+16j
		mov	si, word_11798
		dec	ax
		jz	short loc_115AB
		cmp	si, di
		jz	short loc_115AB
		mov	ax, [si+2]
		mov	[bp+arg_8], ax
		push	si
		call	sub_115E2
		pop	si
		jnb	short loc_115DB

loc_115AB:				; CODE XREF: sub_11574+24j
					; sub_11574+28j
		add	si, 4
		cmp	si, 0A8h ; '�'
		jnb	short loc_115B8
		or	dx, dx
		jnz	short loc_115BE

loc_115B8:				; CODE XREF: sub_11574+Aj
					; sub_11574+1Bj ...
		mov	ax, 0FFFFh
		cwd
		jmp	short loc_115DB
; ���������������������������������������������������������������������������

loc_115BE:				; CODE XREF: sub_11574+42j
		mov	bx, dx
		add	bx, 0Fh
		rcr	bx, 1
		mov	cl, 3
		shr	bx, cl
		mov	ah, 48h
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jb	short loc_115B8
		xchg	ax, dx
		mov	[si], ax
		mov	[si+2],	dx
		mov	word_11798, si
		xor	ax, ax

loc_115DB:				; CODE XREF: sub_11574+1Dj
					; sub_11574+35j ...
		pop	es
		assume es:nothing
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
sub_11574	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������


sub_115E2	proc near		; CODE XREF: sub_11574+18p
					; sub_11574+31p
		mov	cx, [bp+0Ch]
		mov	si, di

loc_115E7:				; CODE XREF: sub_115E2+11j
		cmp	[si+2],	cx
		jz	short loc_115F8
		add	si, 4
		cmp	si, 0A8h ; '�'
		jnz	short loc_115E7
		stc
		jmp	short locret_11637
; ���������������������������������������������������������������������������

loc_115F8:				; CODE XREF: sub_115E2+8j
		mov	bx, dx
		add	bx, [si]
		jb	short locret_11637
		mov	dx, bx
		mov	es, cx
		cmp	si, di
		jnz	short loc_1160C
		cmp	word_11742, bx
		jnb	short loc_11632

loc_1160C:				; CODE XREF: sub_115E2+22j
		add	bx, 0Fh
		rcr	bx, 1
		shr	bx, 1
		shr	bx, 1
		shr	bx, 1
		cmp	si, di
		jnz	short loc_11624
		add	bx, cx
		mov	ax, word_117B9
		sub	bx, ax
		mov	es, ax

loc_11624:				; CODE XREF: sub_115E2+37j
		mov	ah, 4Ah
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		jb	short locret_11637
		cmp	si, di
		jnz	short loc_11632
		mov	word_11742, dx

loc_11632:				; CODE XREF: sub_115E2+28j
					; sub_115E2+4Aj
		xchg	ax, dx
		xchg	ax, [si]
		mov	dx, cx

locret_11637:				; CODE XREF: sub_115E2+14j
					; sub_115E2+1Aj ...
		retn
sub_115E2	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_11638	proc near		; CODE XREF: sub_10C5C+D0p
					; sub_1103A+38p

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		mov	dx, di
		mov	ax, ds
		mov	es, ax
		assume es:dseg
		mov	di, [bp+arg_0]
		xor	ax, ax
		mov	cx, 0FFFFh
		repne scasb
		not	cx
		dec	cx
		xchg	ax, cx
		mov	di, dx
		pop	bp
		retn
sub_11638	endp

; ���������������������������������������������������������������������������
		align 2

; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_11654	proc near		; CODE XREF: sub_10C5C+C2p

arg_0		= word ptr  4
arg_2		= word ptr  6
arg_4		= word ptr  8
arg_6		= word ptr  0Ah

; FUNCTION CHUNK AT 1682 SIZE 0000005F BYTES

		push	bp
		mov	bp, sp
		push	si
		push	di
		mov	bl, 0
		jmp	loc_11682
sub_11654	endp


; ��������������� S U B	R O U T	I N E ���������������������������������������

; Attributes: bp-based frame

sub_1165E	proc near		; CODE XREF: sub_105F4+86p
					; sub_1083A+23p ...

arg_0		= word ptr  4

		push	bp
		mov	bp, sp
		mov	bx, [bp+arg_0]
		cmp	bx, word_117C0
		jge	short loc_1167B
		cmp	bx, 0
		jl	short loc_1167B
		test	byte ptr [bx+0D2h], 40h
		jz	short loc_1167B
		mov	ax, 1
		jmp	short loc_1167D
; ���������������������������������������������������������������������������

loc_1167B:				; CODE XREF: sub_1165E+Aj sub_1165E+Fj ...
		xor	ax, ax

loc_1167D:				; CODE XREF: sub_1165E+1Bj
		mov	sp, bp
		pop	bp
		retn
sub_1165E	endp

; ���������������������������������������������������������������������������
		align 2
; START	OF FUNCTION CHUNK FOR sub_11654

loc_11682:				; CODE XREF: sub_11654+7j
		mov	cx, [bp+arg_6]
		mov	ax, [bp+arg_0]
		mov	dx, [bp+arg_2]
		mov	di, [bp+arg_4]
		push	di
		push	ds
		pop	es
		cld
		xchg	ax, bx
		or	al, al
		jz	short loc_116AA
		cmp	cx, 0Ah
		jnz	short loc_116AA
		or	dx, dx
		jns	short loc_116AA
		mov	al, 2Dh	; '-'
		stosb
		neg	bx
		adc	dx, 0
		neg	dx

loc_116AA:				; CODE XREF: sub_11654+41j
					; sub_11654+46j ...
		mov	si, di

loc_116AC:				; CODE XREF: sub_11654+74j
		xchg	ax, dx
		xor	dx, dx
		or	ax, ax
		jz	short loc_116B5
		div	cx

loc_116B5:				; CODE XREF: sub_11654+5Dj
		xchg	ax, bx
		div	cx
		xchg	ax, dx
		xchg	dx, bx
		add	al, 30h	; '0'
		cmp	al, 39h	; '9'
		jbe	short loc_116C3
		add	al, 27h	; '''

loc_116C3:				; CODE XREF: sub_11654+6Bj
		stosb
		mov	ax, dx
		or	ax, bx
		jnz	short loc_116AC
		mov	[di], al

loc_116CC:				; CODE XREF: sub_11654+84j
		dec	di
		lodsb
		xchg	al, [di]
		mov	[si-1],	al
		lea	ax, [si+1]
		cmp	ax, di
		jb	short loc_116CC
		pop	ax
		pop	di
		pop	si
		mov	sp, bp
		pop	bp
		retn
; END OF FUNCTION CHUNK	FOR sub_11654
; ���������������������������������������������������������������������������
		align 10h
seg000		ends

; ���������������������������������������������������������������������������

; Segment type:	Pure data
dseg		segment	para public 'DATA'
		assume cs:dseg
		db    0
		db    0
word_116F2	dw 0			; DATA XREF: start+50w
		align 8
		db  4Dh	; M
		db  53h	; S
		db  20h
		db  52h	; R
		db  75h	; u
		db  6Eh	; n
		db  2Dh	; -
		db  54h	; T
		db  69h	; i
		db  6Dh	; m
		db  65h	; e
		db  20h
		db  4Ch	; L
		db  69h	; i
		db  62h	; b
		db  72h	; r
		db  61h	; a
		db  72h	; r
		db  79h	; y
		db  20h
		db  2Dh	; -
		db  20h
		db  43h	; C
		db  6Fh	; o
		db  70h	; p
		db  79h	; y
		db  72h	; r
		db  69h	; i
		db  67h	; g
		db  68h	; h
		db  74h	; t
		db  20h
		db  28h	; (
		db  63h	; c
		db  29h	; )
		db  20h
word_1171C	dw 3931h		; DATA XREF: sub_1042E+11r
		db  38h	; 8
		db  38h	; 8
		db  2Ch	; ,
		db  20h
		db  4Dh	; M
		db  69h	; i
		db  63h	; c
		db  72h	; r
		db  6Fh	; o
		db  73h	; s
		db  6Fh	; o
		db  66h	; f
		db  74h	; t
		db  20h
		db  43h	; C
		db  6Fh	; o
		db  72h	; r
		db  70h	; p
		db  11h
		db    0
		db  48h	; H
		db  65h	; e
		db  6Ch	; l
		db  6Ch	; l
		db  6Fh	; o
		db  2Ch	; ,
		db  20h
		db  77h	; w
		db  6Fh	; o
		db  72h	; r
		db  6Ch	; l
		db  64h	; d
		db  21h	; !
		db  0Ah
		db    0
		db    0
word_11742	dw 0			; DATA XREF: start+4Aw	sub_104F0+8r ...
word_11744	dw 0			; DATA XREF: start+3Ew
off_11746	dw offset sub_101AD	; DATA XREF: start+9Cw	start+AEr
word_11748	dw 0			; DATA XREF: start+39w	sub_104F0+2r ...
		dw seg dseg
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_11798	dw 58h			; DATA XREF: sub_11574:loc_11593r
					; sub_11574+61w
aC_file_info	db ';C_FILE_INFO',0
dword_117A7	dd 0			; DATA XREF: sub_100D2+Cw sub_101F2+Er ...
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_117B3	dw 0			; DATA XREF: sub_10558+26w
		db    0
		db    0
		db    0
		db    0
word_117B9	dw 0			; DATA XREF: start+5Ew	sub_100D2+26r ...
word_117BB	dw 0			; DATA XREF: sub_100D2+4w sub_102A0+7r ...
		align 2
byte_117BE	db 0			; DATA XREF: sub_10558w
		align 2
word_117C0	dw 14h			; DATA XREF: sub_11206+9r sub_11280+9r ...
		db  81h	; �
		db  81h	; �
		db  81h	; �
		db    1
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_117D6	dw 0			; DATA XREF: start+89r	sub_102A0+BEw
word_117D8	dw 0			; DATA XREF: start+85r	sub_102A0+D0w
word_117DA	dw 0			; DATA XREF: start+81r	sub_1042E+44w
word_117DC	dw 0F0h			; DATA XREF: sub_102A0+29w
					; sub_102A0+DEr
seg_117DE	dw seg dseg		; DATA XREF: sub_102A0+16w
		db  43h	; C
		db    0
		db    0
		db    0
byte_117E4	db 0			; DATA XREF: sub_101F2+18r
byte_117E5	db 0			; DATA XREF: sub_101F2+20r
dword_117E6	dd 0			; DATA XREF: sub_101F2+23r
word_117EA	dw 0			; DATA XREF: sub_10242+Ar
					; sub_10242+11r
word_117EC	dw 0A80h		; DATA XREF: sub_10268+7r sub_113A8+1r
word_117EE	dw 0			; DATA XREF: sub_102A0w sub_102A0+18Ar
		db    0
		db  16h
		db    2
		db    2
		db  18h
		db  0Dh
		db    9
		db  0Ch
		db  0Ch
		db  0Ch
		db    7
		db    8
		db  16h
		db  16h
		db 0FFh
		db  12h
		db  0Dh
		db  12h
		db    2
		db 0FFh
word_11804	dw 0			; DATA XREF: sub_105F4+90w
					; sub_107B6+Aw
		db  80h	; �
		db    5
		db    0
		db    0
		db  80h	; �
		db    5
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    1
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  84h	; �
		db    3
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    2
		db    4
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db    0
		db    0
		db    2
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
word_1191E	dw 1AEh			; DATA XREF: seg000:loc_105AAr
aNull		db '(null)',0
aNull_0		db '(null)',0
		db '+- #',0
		align 2
word_11934	dw 0			; DATA XREF: sub_113CC+1Fw
word_11936	dw 0			; DATA XREF: sub_113CC+22w
		db    0
		db    0
word_1193A	dw 0			; DATA XREF: sub_113CC+32w
		db    0
		db    0
word_1193E	dw 0			; DATA XREF: sub_11415+A2r
		db    0
		db    0
word_11942	dw 0			; DATA XREF: sub_11415+4Fw
					; sub_11415+D6w
word_11944	dw 2000h		; DATA XREF: sub_114F8:loc_11508r
		align 4
byte_11948	db 0			; DATA XREF: sub_11415:loc_1146Dw
					; sub_11415:loc_114A8w
		align 2
off_1194A	dw offset sub_10262	; DATA XREF: sub_10E7A+53r
off_1194C	dw offset sub_10262	; DATA XREF: sub_10E7A+6Br
		db  62h	; b
		db    2
off_11950	dw offset sub_10262	; DATA XREF: sub_10E7A+84r
off_11952	dw offset sub_10262	; DATA XREF: sub_10E7A+A2r
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
unk_1195C	db    0			; DATA XREF: sub_100D2+37r
					; sub_100D2+4Dr ...
		db    0
word_1195E	dw 0			; DATA XREF: sub_100D2+20r sub_101F2r
dword_11960	dd 0			; DATA XREF: sub_100D2+2Fr
dword_11964	dd 0			; DATA XREF: sub_100D2:loc_10115r
		db  86h	; �
		db    5
		db  3Ch	; <
		db  3Ch	; <
		db  4Eh	; N
		db  4Dh	; M
		db  53h	; S
		db  47h	; G
		db  3Eh	; >
		db  3Eh	; >
		db    0
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  30h	; 0
		db  30h	; 0
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  73h	; s
		db  74h	; t
		db  61h	; a
		db  63h	; c
		db  6Bh	; k
		db  20h
		db  6Fh	; o
		db  76h	; v
		db  65h	; e
		db  72h	; r
		db  66h	; f
		db  6Ch	; l
		db  6Fh	; o
		db  77h	; w
		db  0Dh
		db  0Ah
		db    0
		db    3
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  30h	; 0
		db  33h	; 3
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  69h	; i
		db  6Eh	; n
		db  74h	; t
		db  65h	; e
		db  67h	; g
		db  65h	; e
		db  72h	; r
		db  20h
		db  64h	; d
		db  69h	; i
		db  76h	; v
		db  69h	; i
		db  64h	; d
		db  65h	; e
		db  20h
		db  62h	; b
		db  79h	; y
		db  20h
		db  30h	; 0
		db  0Dh
		db  0Ah
		db    0
		db    9
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  30h	; 0
		db  39h	; 9
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  65h	; e
		db  6Eh	; n
		db  6Fh	; o
		db  75h	; u
		db  67h	; g
		db  68h	; h
		db  20h
		db  73h	; s
		db  70h	; p
		db  61h	; a
		db  63h	; c
		db  65h	; e
		db  20h
		db  66h	; f
		db  6Fh	; o
		db  72h	; r
		db  20h
		db  65h	; e
		db  6Eh	; n
		db  76h	; v
		db  69h	; i
		db  72h	; r
		db  6Fh	; o
		db  6Eh	; n
		db  6Dh	; m
		db  65h	; e
		db  6Eh	; n
		db  74h	; t
		db  0Dh
		db  0Ah
		db    0
		db 0FCh	; �
		db    0
		db  0Dh
		db  0Ah
		db    0
		db 0FFh
		db    0
		db  72h	; r
		db  75h	; u
		db  6Eh	; n
		db  2Dh	; -
		db  74h	; t
		db  69h	; i
		db  6Dh	; m
		db  65h	; e
		db  20h
		db  65h	; e
		db  72h	; r
		db  72h	; r
		db  6Fh	; o
		db  72h	; r
		db  20h
		db    0
		db    2
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  30h	; 0
		db  32h	; 2
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  66h	; f
		db  6Ch	; l
		db  6Fh	; o
		db  61h	; a
		db  74h	; t
		db  69h	; i
		db  6Eh	; n
		db  67h	; g
		db  20h
		db  70h	; p
		db  6Fh	; o
		db  69h	; i
		db  6Eh	; n
		db  74h	; t
		db  20h
		db  6Eh	; n
		db  6Fh	; o
		db  74h	; t
		db  20h
		db  6Ch	; l
		db  6Fh	; o
		db  61h	; a
		db  64h	; d
		db  65h	; e
		db  64h	; d
		db  0Dh
		db  0Ah
		db    0
		db    1
		db    0
		db  52h	; R
		db  36h	; 6
		db  30h	; 0
		db  30h	; 0
		db  31h	; 1
		db  0Dh
		db  0Ah
		db  2Dh	; -
		db  20h
		db  6Eh	; n
		db  75h	; u
		db  6Ch	; l
		db  6Ch	; l
		db  20h
		db  70h	; p
		db  6Fh	; o
		db  69h	; i
		db  6Eh	; n
		db  74h	; t
		db  65h	; e
		db  72h	; r
		db  20h
		db  61h	; a
		db  73h	; s
		db  73h	; s
		db  69h	; i
		db  67h	; g
		db  6Eh	; n
		db  6Dh	; m
		db  65h	; e
		db  6Eh	; n
		db  74h	; t
		db  0Dh
		db  0Ah
		db    0
		db 0FFh
		db 0FFh
		db 0FFh
		align 2
word_11A44	dw ?			; DATA XREF: sub_1093E+55w
					; sub_1093E:loc_109D2w	...
word_11A46	dw ?			; DATA XREF: sub_1093E+1Ew
					; sub_1093E+2BBr ...
word_11A48	dw ?			; DATA XREF: sub_1093E+52w
					; sub_1093E:loc_10AEAw	...
word_11A4A	dw ?			; DATA XREF: sub_1093E+43w
					; sub_1093E:loc_10A98w	...
word_11A4C	dw ?			; DATA XREF: sub_1093E+49w
					; sub_1093E+111w ...
word_11A4E	dw ?			; DATA XREF: sub_1093E+40w
					; sub_1093E+75w ...
word_11A50	dw ?			; DATA XREF: sub_1093E+58w
					; sub_1093E+9Fw ...
word_11A52	dw ?			; DATA XREF: sub_1093E+18w
					; sub_1093E:loc_10AB8r	...
word_11A54	dw ?			; DATA XREF: sub_1093E+4Fw
					; sub_1093E+79w ...
word_11A56	dw ?			; DATA XREF: sub_1093E+4Cw
					; sub_1093E+D7w ...
word_11A58	dw ?			; DATA XREF: sub_1093E+46w
					; sub_1093E:loc_10ACCw	...
word_11A5A	dw ?			; DATA XREF: sub_1093E+27w
					; sub_1093E+180r ...
word_11A5C	dw ?			; DATA XREF: sub_1093E+21w
					; sub_1093E:loc_10C34r	...
word_11A5E	dw ?			; DATA XREF: sub_1093E:loc_10976w
					; sub_1093E+E9r ...
word_11A60	dw ?			; DATA XREF: sub_1093E+1BBw
					; sub_1093E:loc_10B02w	...
word_11A62	dw ?			; DATA XREF: sub_1093E+12w
					; sub_10C5C+79r ...
word_11A64	dw ?			; DATA XREF: sub_1093E+BFr
					; sub_1093E+CAr ...
word_11A66	dw ?			; DATA XREF: sub_10C5C:loc_10CD2w
					; sub_10E7A+90w ...
word_11A68	dw ?			; DATA XREF: sub_1093E+5Bw
					; sub_1093E+68w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dseg		ends

; ���������������������������������������������������������������������������

; Segment type:	Uninitialized
seg002		segment	byte stack 'STACK'
		assume cs:seg002
		assume es:nothing, ss:nothing, ds:dseg
		db 800h	dup(?)
seg002		ends


		end start
