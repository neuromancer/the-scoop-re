

;
; 
; 	This file is generated by The Interactive Disassembler (IDA)	    
; 	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    
; 			 Licensed to: Freeware version			    
; 
;
; Input	MD5   :	623510349EA987E6165A47F13ED5D440

; File Name   :	Z:\home\g\Juegos\the-scoop-re\examples\graph\CODE.EXE
; Format      :	MS-DOS executable (EXE)
; Base Address:	0h Range: 0h-58B0h Loaded length: 50AFh
; Entry	Point :	0:4C2

.386
.model large


; Segment type:	Pure code
seg000 segment byte public 'CODE' use16
assume cs:seg000
assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
db 10h dup(0)



sub_10 proc near
xor	ax, ax
call	sub_70C
mov	ax, 0Dh
push	ax
call	sub_D7A
add	sp, 2
retn
sub_10 endp




sub_22 proc near
xor	ax, ax
call	sub_70C
sub	ax, ax
push	ax
call	sub_DC1
add	sp, 2
retn
sub_22 endp

align 2



sub_34 proc near
xor	ax, ax
call	sub_70C
sub	ax, ax
push	ax
call	sub_DEC
add	sp, 2
retn
sub_34 endp

align 2


; Attributes: bp-based frame

sub_46 proc near

var_16=	word ptr -16h

push	bp
mov	bp, sp
mov	ax, 16h
call	sub_70C
lea	ax, [bp+var_16]
push	ss
push	ax
call	sub_E18
mov	sp, bp
pop	bp
retn
sub_46 endp

align 2



sub_5E proc near
xor	ax, ax
call	sub_70C
mov	ax, 32h	; '2'
push	ax
mov	ax, 64h	; 'd'
push	ax
call	sub_105C
add	sp, 4
retn
sub_5E endp




sub_74 proc near
xor	ax, ax
call	sub_70C
mov	ax, 96h	; ''
push	ax
mov	ax, 0C8h ; ''
push	ax
call	sub_10D2
add	sp, 4
retn
sub_74 endp




sub_8A proc near
xor	ax, ax
call	sub_70C
mov	ax, 19h
push	ax
mov	ax, 32h	; '2'
push	ax
call	sub_10C0
add	sp, 4
retn
sub_8A endp




sub_A0 proc near
xor	ax, ax
call	sub_70C
mov	ax, 0BEh ; ''
push	ax
mov	ax, 136h
push	ax
mov	ax, 0Ah
push	ax
push	ax
call	sub_1078
add	sp, 8
retn
sub_A0 endp

align 2



sub_BC proc near
xor	ax, ax
call	sub_70C
mov	ax, 0B4h ; ''
push	ax
mov	ax, 12Ch
push	ax
mov	ax, 14h
push	ax
push	ax
call	sub_1093
add	sp, 8
retn
sub_BC endp

align 2



sub_D8 proc near
xor	ax, ax
call	sub_70C
sub	ax, ax
push	ax
call	sub_111A
add	sp, 2
retn
sub_D8 endp

align 2



sub_EA proc near
xor	ax, ax
call	sub_70C
mov	ax, 64h	; 'd'
push	ax
mov	ax, 0A0h ; ''
push	ax
call	sub_1179
add	sp, 4
retn
sub_EA endp




sub_100	proc near
xor	ax, ax
call	sub_70C
call	sub_1195
retn
sub_100	endp

align 2



sub_10C	proc near
xor	ax, ax
call	sub_70C
mov	ax, 96h	; ''
push	ax
mov	ax, 0C8h ; ''
push	ax
call	sub_119D
add	sp, 4
retn
sub_10C	endp




sub_122	proc near
xor	ax, ax
call	sub_70C
mov	ax, 96h	; ''
push	ax
push	ax
mov	ax, 32h	; '2'
push	ax
push	ax
mov	ax, 2
push	ax
call	sub_11F9
add	sp, 0Ah
retn
sub_122	endp




sub_13E	proc near
xor	ax, ax
call	sub_70C
mov	ax, 96h	; ''
push	ax
mov	ax, 0C8h ; ''
push	ax
mov	ax, 64h	; 'd'
push	ax
push	ax
mov	ax, 3
push	ax
call	sub_12DA
add	sp, 0Ah
retn
sub_13E	endp

align 2



sub_15E	proc near
xor	ax, ax
call	sub_70C
mov	ax, 96h	; ''
push	ax
mov	ax, 64h	; 'd'
push	ax
mov	ax, 32h	; '2'
push	ax
mov	ax, 0C8h ; ''
push	ax
mov	ax, 96h	; ''
push	ax
mov	ax, 104h
push	ax
mov	ax, 64h	; 'd'
push	ax
mov	ax, 0A0h ; ''
push	ax
call	sub_134B
add	sp, 10h
retn
sub_15E	endp




sub_18C	proc near
xor	ax, ax
call	sub_70C
mov	ax, 96h	; ''
push	ax
mov	ax, 64h	; 'd'
push	ax
mov	ax, 32h	; '2'
push	ax
mov	ax, 0C8h ; ''
push	ax
mov	ax, 96h	; ''
push	ax
mov	ax, 104h
push	ax
mov	ax, 64h	; 'd'
push	ax
mov	ax, 0A0h ; ''
push	ax
mov	ax, 2
push	ax
call	sub_139D
add	sp, 12h
retn
sub_18C	endp




sub_1BE	proc near
xor	ax, ax
call	sub_70C
mov	ax, 0Ah
push	ax
push	ax
call	sub_126E
add	sp, 4
retn
sub_1BE	endp

align 2



sub_1D2	proc near
xor	ax, ax
call	sub_70C
mov	ax, 14h
push	ax
push	ax
call	sub_12AA
add	sp, 4
retn
sub_1D2	endp

align 2



sub_1E6	proc near
xor	ax, ax
call	sub_70C
mov	ax, 1
push	ax
mov	ax, 64h	; 'd'
push	ax
push	ax
call	sub_165A
add	sp, 6
retn
sub_1E6	endp

align 2



sub_1FE	proc near
xor	ax, ax
call	sub_70C
mov	ax, 4
push	ax
call	sub_F1C
add	sp, 2
retn
sub_1FE	endp




sub_210	proc near
xor	ax, ax
call	sub_70C
call	sub_F31
retn
sub_210	endp

align 2



sub_21C	proc near
xor	ax, ax
call	sub_70C
mov	ax, 0AAAAh
push	ax
call	sub_F37
add	sp, 2
retn
sub_21C	endp




sub_22E	proc near
xor	ax, ax
call	sub_70C
call	sub_F45
retn
sub_22E	endp

align 2


; Attributes: bp-based frame

sub_23A	proc near

var_8= word ptr	-8

push	bp
mov	bp, sp
mov	ax, 8
call	sub_70C
lea	ax, [bp+var_8]
push	ss
push	ax
call	sub_1675
mov	sp, bp
pop	bp
retn
sub_23A	endp

align 2


; Attributes: bp-based frame

sub_252	proc near

var_8= word ptr	-8

push	bp
mov	bp, sp
mov	ax, 8
call	sub_70C
lea	ax, [bp+var_8]
push	ss
push	ax
call	sub_16AF
mov	sp, bp
pop	bp
retn
sub_252	endp

align 2



sub_26A	proc near
xor	ax, ax
call	sub_70C
sub	ax, ax
mov	dx, 2Ah	; '*'
push	dx
push	ax
call	sub_F49
add	sp, 4
retn
sub_26A	endp

align 2



sub_280	proc near
xor	ax, ax
call	sub_70C
call	sub_F57
retn
sub_280	endp

align 2



sub_28C	proc near
xor	ax, ax
call	sub_70C
mov	ax, 2Ah	; '*'
cwd
push	dx
push	ax
sub	ax, ax
push	ax
call	sub_F5F
add	sp, 6
retn
sub_28C	endp

align 2


; Attributes: bp-based frame

sub_2A4	proc near

var_42=	word ptr -42h
var_40=	word ptr -40h
var_3E=	word ptr -3Eh
var_3C=	word ptr -3Ch
var_3A=	word ptr -3Ah
var_38=	word ptr -38h
var_36=	word ptr -36h

push	bp
mov	bp, sp
mov	ax, 42h	; 'B'
call	sub_70C
push	si
mov	[bp+var_42], 0

loc_2B3:
mov	si, [bp+var_42]
shl	si, 1
shl	si, 1
sub	ax, ax
mov	[bp+si+var_3E],	ax
mov	[bp+si+var_40],	ax
inc	[bp+var_42]
cmp	[bp+var_42], 10h
jl	short loc_2B3
mov	[bp+var_3C], 1515h
mov	[bp+var_3A], 3Fh ; '?'
mov	[bp+var_38], 3F15h
mov	[bp+var_36], 15h
lea	ax, [bp+var_40]
push	ss
push	ax
call	sub_1030
add	sp, 4
pop	si
mov	sp, bp
pop	bp
retn
sub_2A4	endp

align 2



sub_2F2	proc near
xor	ax, ax
call	sub_70C
sub	ax, ax
push	ax
call	sub_104B
add	sp, 2
retn
sub_2F2	endp

align 2



sub_304	proc near
xor	ax, ax
call	sub_70C
mov	ax, 4Fh	; 'O'
push	ax
mov	ax, 18h
push	ax
mov	ax, 2
push	ax
push	ax
call	sub_1917
add	sp, 8
retn
sub_304	endp

align 2



sub_320	proc near
xor	ax, ax
call	sub_70C
mov	ax, 1E4h
push	ds
push	ax
call	sub_1874
add	sp, 4
retn
sub_320	endp

align 2



sub_334	proc near
xor	ax, ax
call	sub_70C
mov	ax, 1
push	ax
call	sub_196B
add	sp, 2
retn
sub_334	endp




sub_346	proc near
xor	ax, ax
call	sub_70C
mov	ax, 1
push	ax
call	sub_1999
add	sp, 2
retn
sub_346	endp




sub_358	proc near
xor	ax, ax
call	sub_70C
mov	ax, 0Ah
push	ax
mov	ax, 5
push	ax
call	sub_18CA
add	sp, 4
retn
sub_358	endp




sub_36E	proc near
xor	ax, ax
call	sub_70C
call	sub_18ED
retn
sub_36E	endp

align 2



sub_37A	proc near
xor	ax, ax
call	sub_70C
mov	ax, 0Eh
push	ax
call	sub_1900
add	sp, 2
retn
sub_37A	endp




sub_38C	proc near
xor	ax, ax
call	sub_70C
call	sub_1911
retn
sub_38C	endp

align 2


; Attributes: bp-based frame

sub_398	proc near

var_6= word ptr	-6
var_4= word ptr	-4
var_2= word ptr	-2

push	bp
mov	bp, sp
mov	ax, 6
call	sub_70C
mov	ax, 64h	; 'd'
push	ax
push	ax
mov	ax, 0Ah
push	ax
push	ax
call	sub_1B8A
add	sp, 8
mov	[bp+var_4], ax
mov	[bp+var_2], dx
mov	[bp+var_6], 1234h
or	dx, dx
jl	short loc_3ED
jg	short loc_3C8
or	ax, ax
jz	short loc_3ED

loc_3C8:
cmp	[bp+var_2], 0
jg	short loc_3ED
jl	short loc_3D6
cmp	[bp+var_4], 0FFFFh
jnb	short loc_3ED

loc_3D6:
mov	ax, 1234h
push	ds
push	ax
mov	ax, 64h	; 'd'
push	ax
push	ax
mov	ax, 0Ah
push	ax
push	ax
call	sub_1A7A
add	sp, 0Ch

loc_3ED:
mov	sp, bp
pop	bp
retn
sub_398	endp

align 2


; Attributes: bp-based frame

sub_3F2	proc near

var_2= word ptr	-2

push	bp
mov	bp, sp
mov	ax, 2
call	sub_70C
mov	[bp+var_2], 5678h
mov	ax, 3
push	ax
mov	ax, 5678h
push	ds
push	ax
mov	ax, 32h	; '2'
push	ax
mov	ax, 96h	; ''

loc_410:
push	ax
call	sub_1B03
mov	sp, bp
pop	bp
retn
sub_3F2	endp




sub_41A	proc near
xor	ax, ax
call	sub_70C
mov	ax, 64h	; 'd'
push	ax
push	ax
mov	ax, 0Ah
push	ax
push	ax
call	sub_1B8A
add	sp, 8
retn
sub_41A	endp




sub_432	proc near
xor	ax, ax
call	sub_70C
call	sub_10
call	sub_22
call	sub_34
call	sub_46
call	sub_5E
call	sub_74
call	sub_8A
call	sub_A0
call	sub_BC
call	sub_D8
call	sub_EA
call	sub_100
call	sub_10C
call	sub_122
call	sub_13E
call	sub_15E
call	sub_18C
call	sub_1BE
call	sub_1D2
call	sub_1E6
call	sub_1FE
call	sub_210
call	sub_21C
call	sub_22E
call	sub_23A
call	sub_252
call	sub_26A
call	sub_280
call	sub_28C
call	sub_2A4
call	sub_2F2
call	sub_304
call	sub_320
call	sub_334
call	sub_346
call	sub_358
call	sub_36E
call	sub_37A
call	sub_38C
call	sub_398
call	sub_3F2
call	sub_41A
mov	ax, 0FFFFh
push	ax
call	sub_D7A
add	sp, 2
retn
sub_432	endp

assume ss:seg003, ds:nothing



public start
start proc near
mov	ah, 30h
int	21h		; DOS -	GET DOS	VERSION
			; Return: AL = major version number (00h for DOS 1.x)
cmp	al, 2
jnb	short loc_4CC
int	20h		; DOS -	PROGRAM	TERMINATION
			; returns to DOS--identical to INT 21/AH=00h

loc_4CC:
mov	di, seg	dseg
mov	si, ds:2
sub	si, di
cmp	si, 1000h
jb	short loc_4DE
mov	si, 1000h

loc_4DE:
cli
mov	ss, di
assume ss:dseg
add	sp, 4EEh
sti
jnb	short loc_4F8
push	ss
pop	ds
assume ds:dseg
call	sub_6E6
xor	ax, ax
push	ax
call	sub_963
mov	ax, 4CFFh
int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
			; AL = exit code

loc_4F8:
and	sp, 0FFFEh
mov	ss:word_4C08, sp
mov	ss:word_4C04, sp
mov	ax, si
mov	cl, 4
shl	ax, cl
dec	ax
mov	ss:word_4C02, ax
add	si, di
mov	word_4BC2, si
mov	bx, es
sub	bx, si
neg	bx
mov	ah, 4Ah
int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
			; ES = segment address of block	to change
			; BX = new size	in paragraphs
mov	ss:word_4C79, ds
push	ss
pop	es
assume es:dseg
cld
mov	di, 310h
mov	cx, 4F0h
sub	cx, di
xor	ax, ax
rep stosb
push	ss
pop	ds
call	near ptr loc_575+1
push	ss
pop	ds
call	sub_8D2
call	sub_744
xor	bp, bp
push	word_4C9A
push	word_4C98
push	word_4C96
call	sub_432
push	ax
call	sub_63A
mov	ax, seg	dseg
mov	ds, ax
mov	ax, 3
mov	ss:off_4C06, 63Ah

loc_566:
push	ax
call	sub_6E6
call	sub_963
mov	ax, 0FFh
push	ax
call	off_4C06

loc_575:
add	[si-32D0h], dh
start endp

and	[bp+di+0BBh], sp
mov	ax, 3500h
int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
			; AL = interrupt number
			; Return: ES:BX	= value	of interrupt vector
mov	word ptr dword_4C67, bx
mov	word ptr dword_4C67+2, es
push	cs
pop	ds
assume ds:seg000
mov	ax, 2500h
mov	dx, 557h
int	21h		; DOS -	SET INTERRUPT VECTOR
			; AL = interrupt number
			; DS:DX	= new vector to	be used	for specified interrupt
push	ss
pop	ds
assume ds:dseg
mov	cx, word_4D92
jcxz	short loc_5CA
mov	es, word_4C79
assume es:nothing
mov	si, es:2Ch
lds	ax, dword_4D94
mov	dx, ds
xor	bx, bx
call	dword ptr ss:unk_4D90
jnb	short loc_5B9
push	ss
pop	ds
jmp	loc_706

loc_5B9:
lds	ax, ss:dword_4D98
mov	dx, ds
mov	bx, 3
call	dword ptr ss:unk_4D90
push	ss
pop	ds

loc_5CA:
mov	es, word_4C79
mov	cx, es:2Ch
jcxz	short loc_60B
mov	es, cx
xor	di, di

loc_5D9:
cmp	byte ptr es:[di], 0
jz	short loc_60B
mov	cx, 0Ch
mov	si, 9Ah	; ''
repe cmpsb
jz	short loc_5F4
mov	cx, 7FFFh
xor	ax, ax
repne scasb
jnz	short loc_60B
jmp	short loc_5D9

loc_5F4:
push	es
push	ds
pop	es
assume es:dseg
pop	ds
mov	si, di
mov	di, 0C2h ; ''
lodsb
cbw
xchg	ax, cx

loc_600:
lodsb
inc	al
jz	short loc_606
dec	ax

loc_606:
stosb
loop	loc_600
push	ss
pop	ds

loc_60B:
mov	bx, 4

loc_60E:
and	byte ptr [bx+0C2h], 0BFh
mov	ax, 4400h
int	21h		; DOS -	2+ - IOCTL - GET DEVICE	INFORMATION
			; BX = file or device handle
jb	short loc_624
test	dl, 80h
jz	short loc_624
or	byte ptr [bx+0C2h], 40h

loc_624:
dec	bx
jns	short loc_60E
mov	si, 1DCh
mov	di, 1E0h
call	sub_6D2
mov	si, 1E0h
mov	di, 1E0h
call	sub_6C3
retn


; Attributes: bp-based frame

sub_63A	proc near
push	bp
mov	bp, sp
mov	si, 4F0h
mov	di, 4F0h
call	sub_6C3
mov	si, 1E0h
mov	di, 1E0h
call	sub_6C3
jmp	short loc_654
sub_63A	endp



; Attributes: bp-based frame

sub_651	proc near

arg_0= word ptr	 4

push	bp
mov	bp, sp

loc_654:
mov	si, 1E0h
mov	di, 1E0h
call	sub_6C3
mov	si, 1E0h
mov	di, 1E4h
call	sub_6D2
call	sub_722
or	ax, ax
jz	short loc_678
cmp	[bp+arg_0], 0
jnz	short loc_678
mov	[bp+arg_0], 0FFh

loc_678:
mov	cx, 0Fh
mov	bx, 5

loc_67E:
test	byte ptr [bx+0C2h], 1
jz	short loc_689
mov	ah, 3Eh
int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
			; BX = file handle

loc_689:
inc	bx
loop	loc_67E
call	sub_696
mov	ax, [bp+arg_0]
mov	ah, 4Ch
int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
sub_651	endp		; AL = exit code




sub_696	proc near
mov	cx, word_4D92
jcxz	short loc_6A3
mov	bx, 2
call	dword ptr unk_4D90

loc_6A3:
push	ds
lds	dx, dword_4C67
mov	ax, 2500h
int	21h		; DOS -	SET INTERRUPT VECTOR
			; AL = interrupt number
			; DS:DX	= new vector to	be used	for specified interrupt
pop	ds
cmp	byte_4CA4, 0
jz	short locret_6C2
push	ds
mov	al, byte_4CA5
lds	dx, dword_4CA6
mov	ah, 25h
int	21h		; DOS -	SET INTERRUPT VECTOR
			; AL = interrupt number
			; DS:DX	= new vector to	be used	for specified interrupt
pop	ds

locret_6C2:
retn
sub_696	endp




sub_6C3	proc near
cmp	si, di
jnb	short locret_6D1
dec	di
dec	di
mov	cx, [di]
jcxz	short sub_6C3
call	cx
jmp	short sub_6C3

locret_6D1:
retn
sub_6C3	endp




sub_6D2	proc near
cmp	si, di
jnb	short locret_6E4
sub	di, 4
mov	ax, [di]
or	ax, [di+2]
jz	short sub_6D2
call	dword ptr [di]
jmp	short sub_6D2

locret_6E4:
retn
sub_6D2	endp

align 2


; Attributes: bp-based frame

sub_6E6	proc near
push	bp
mov	bp, sp
mov	ax, 0FCh ; 
push	ax
call	sub_963
cmp	word_4CAA, 0
jz	short loc_6FB
call	word_4CAA

loc_6FB:
mov	ax, 0FFh
push	ax
call	sub_963
mov	sp, bp
pop	bp
retn
sub_6E6	endp


loc_706:
mov	ax, 2
jmp	loc_566



sub_70C	proc near
pop	cx
mov	bx, sp
sub	bx, ax
jb	short loc_71D
cmp	bx, word_4CAC
jb	short loc_71D
mov	sp, bx
jmp	cx

loc_71D:
xor	ax, ax
jmp	loc_566
sub_70C	endp




sub_722	proc near
push	si
xor	si, si
mov	cx, 42h	; 'B'
xor	ah, ah
cld

loc_72B:
lodsb
xor	ah, al
loop	loc_72B
xor	ah, 55h
jz	short loc_742
call	sub_6E6
mov	ax, 1
push	ax
call	sub_963
mov	ax, 1

loc_742:
pop	si
retn
sub_722	endp




sub_744	proc near
pop	word_4CAE
mov	dx, 2
cmp	byte_4C7B, dl
jz	short loc_77A
mov	es, word_4C79
assume es:nothing
mov	es, word ptr es:2Ch
mov	seg_4C9E, es
xor	ax, ax
cwd
mov	cx, 8000h
xor	di, di

loc_766:
repne scasb
scasb
jnz	short loc_766
inc	di
inc	di
mov	word_4C9C, di
mov	cx, 0FFFFh
repne scasb
not	cx
mov	dx, cx

loc_77A:
mov	di, 1
mov	si, 81h	; ''
mov	ds, word_4C79

loc_784:
lodsb
cmp	al, 20h	; ' '
jz	short loc_784
cmp	al, 9
jz	short loc_784
cmp	al, 0Dh
jz	short loc_800
or	al, al
jz	short loc_800
inc	di

loc_796:
dec	si

loc_797:
lodsb
cmp	al, 20h	; ' '
jz	short loc_784
cmp	al, 9
jz	short loc_784
cmp	al, 0Dh
jz	short loc_800
or	al, al
jz	short loc_800
cmp	al, 22h	; '"'
jz	short loc_7D0
cmp	al, 5Ch	; '\'
jz	short loc_7B3
inc	dx
jmp	short loc_797

loc_7B3:
xor	cx, cx

loc_7B5:
inc	cx
lodsb
cmp	al, 5Ch	; '\'
jz	short loc_7B5
cmp	al, 22h	; '"'
jz	short loc_7C3
add	dx, cx
jmp	short loc_796

loc_7C3:
mov	ax, cx
shr	cx, 1
adc	dx, cx
test	al, 1
jnz	short loc_797
jmp	short loc_7D0

loc_7CF:
dec	si

loc_7D0:
lodsb
cmp	al, 0Dh
jz	short loc_800
or	al, al
jz	short loc_800
cmp	al, 22h	; '"'
jz	short loc_797
cmp	al, 5Ch	; '\'
jz	short loc_7E4
inc	dx
jmp	short loc_7D0

loc_7E4:
xor	cx, cx

loc_7E6:
inc	cx
lodsb
cmp	al, 5Ch	; '\'
jz	short loc_7E6
cmp	al, 22h	; '"'
jz	short loc_7F4
add	dx, cx
jmp	short loc_7CF

loc_7F4:
mov	ax, cx
shr	cx, 1
adc	dx, cx
test	al, 1
jnz	short loc_7D0
jmp	short loc_797

loc_800:
push	ss
pop	ds
mov	word_4C96, di
add	dx, di
inc	di
shl	di, 1
add	dx, di
and	dl, 0FEh
sub	sp, dx
mov	ax, sp
mov	word_4C98, ax
mov	bx, ax
add	di, bx
push	ss
pop	es
assume es:dseg
mov	ss:[bx], di
inc	bx
inc	bx
lds	si, dword ptr word_4C9C

loc_826:
lodsb
stosb
or	al, al
jnz	short loc_826
mov	si, 81h	; ''
mov	ds, ss:word_4C79
jmp	short loc_839

loc_836:
xor	ax, ax
stosb

loc_839:
lodsb
cmp	al, 20h	; ' '
jz	short loc_839
cmp	al, 9
jz	short loc_839
cmp	al, 0Dh
jnz	short loc_849
jmp	loc_8C8

loc_849:
or	al, al
jnz	short loc_850
jmp	short loc_8C8
align 2

loc_850:
mov	ss:[bx], di
inc	bx
inc	bx

loc_855:
dec	si

loc_856:
lodsb
cmp	al, 20h	; ' '
jz	short loc_836
cmp	al, 9
jz	short loc_836
cmp	al, 0Dh
jz	short loc_8C5
or	al, al
jz	short loc_8C5
cmp	al, 22h	; '"'
jz	short loc_892
cmp	al, 5Ch	; '\'
jz	short loc_872
stosb
jmp	short loc_856

loc_872:
xor	cx, cx

loc_874:
inc	cx
lodsb
cmp	al, 5Ch	; '\'
jz	short loc_874
cmp	al, 22h	; '"'
jz	short loc_884
mov	al, 5Ch	; '\'
rep stosb
jmp	short loc_855

loc_884:
mov	al, 5Ch	; '\'
shr	cx, 1
rep stosb
jnb	short loc_892
mov	al, 22h	; '"'
stosb
jmp	short loc_856

loc_891:
dec	si

loc_892:
lodsb
cmp	al, 0Dh
jz	short loc_8C5
or	al, al
jz	short loc_8C5
cmp	al, 22h	; '"'
jz	short loc_856
cmp	al, 5Ch	; '\'
jz	short loc_8A6
stosb
jmp	short loc_892

loc_8A6:
xor	cx, cx

loc_8A8:
inc	cx
lodsb
cmp	al, 5Ch	; '\'
jz	short loc_8A8
cmp	al, 22h	; '"'
jz	short loc_8B8
mov	al, 5Ch	; '\'
rep stosb
jmp	short loc_891

loc_8B8:
mov	al, 5Ch	; '\'
shr	cx, 1
rep stosb
jnb	short loc_856
mov	al, 22h	; '"'
stosb
jmp	short loc_892

loc_8C5:
xor	ax, ax
stosb

loc_8C8:
push	ss
pop	ds
mov	word ptr [bx], 0
jmp	word_4CAE
sub_744	endp



; Attributes: bp-based frame

sub_8D2	proc near
push	bp
mov	bp, sp
push	bp
mov	ds, word_4C79
xor	cx, cx
mov	ax, cx
mov	bp, cx
mov	di, cx
dec	cx
mov	si, word_4BEC
or	si, si
jz	short loc_8F3
mov	es, si
assume es:nothing

loc_8ED:
repne scasb
inc	bp
scasb
jnz	short loc_8ED

loc_8F3:
inc	bp
xchg	ax, di
inc	ax
and	al, 0FEh
mov	di, bp
shl	bp, 1
add	ax, bp
push	ss
pop	ds
push	di
mov	di, 9
call	sub_98C
pop	di
mov	cx, di
mov	di, bp
add	di, ax
mov	word_4C9A, bp
push	ds
pop	es
assume es:dseg
mov	ds, si
xor	si, si
dec	cx
jcxz	short loc_92E

loc_91B:
cmp	word ptr [si], 433Bh
jz	short loc_926
mov	[bp+0],	di
inc	bp
inc	bp

loc_926:
lodsb
stosb
or	al, al
jnz	short loc_926
loop	loc_91B

loc_92E:
mov	[bp+0],	cx
push	ss
pop	ds
pop	bp
mov	sp, bp
pop	bp
retn
sub_8D2	endp



; Attributes: bp-based frame

sub_938	proc near

arg_0= word ptr	 4

push	bp
mov	bp, sp
push	si
push	di
push	ds
pop	es
mov	dx, [bp+arg_0]
mov	si, 20Ah

loc_945:
lodsw
cmp	ax, dx
jz	short loc_95A
inc	ax
xchg	ax, si
jz	short loc_95A
xchg	ax, di
xor	ax, ax
mov	cx, 0FFFFh
repne scasb
mov	si, di
jmp	short loc_945

loc_95A:
xchg	ax, si
pop	di
pop	si
mov	sp, bp
pop	bp
retn	2
sub_938	endp



; Attributes: bp-based frame

sub_963	proc near

arg_0= word ptr	 4

push	bp
mov	bp, sp
push	di
push	[bp+arg_0]
call	sub_938
or	ax, ax
jz	short loc_985
xchg	ax, dx
mov	di, dx
xor	ax, ax
mov	cx, 0FFFFh
repne scasb
not	cx
dec	cx
mov	bx, 2
mov	ah, 40h
int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
			; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer

loc_985:
pop	di
mov	sp, bp
pop	bp
retn	2
sub_963	endp




sub_98C	proc near
mov	dx, ax
add	ax, word_4C08
jb	short loc_9C9
cmp	word_4C02, ax
jnb	short loc_9BF
add	ax, 0Fh
push	ax
rcr	ax, 1
mov	cl, 3
shr	ax, cl
mov	cx, ds
mov	bx, word_4C79
sub	cx, bx
add	ax, cx
mov	es, bx
assume es:nothing
mov	bx, ax
mov	ah, 4Ah
int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
			; ES = segment address of block	to change
			; BX = new size	in paragraphs
pop	ax
jb	short loc_9C9
and	al, 0F0h
dec	ax
mov	word_4C02, ax

loc_9BF:
xchg	ax, bp
mov	bp, word_4C08
add	word_4C08, dx
retn

loc_9C9:
mov	ax, di
jmp	loc_566
sub_98C	endp


loc_9CE:
push	bp
mov	bp, sp
mov	bx, [bp+4]
or	bx, bx
jz	short loc_9DC
or	byte ptr [bx-2], 1

loc_9DC:
mov	sp, bp
pop	bp
retn


; Attributes: bp-based frame

sub_9E0	proc near

arg_0= word ptr	 4

push	bp
mov	bp, sp
push	si
push	di
mov	bx, 0F0h ; ''
cmp	word ptr [bx], 0
jnz	short loc_A16
push	ds
pop	es
assume es:dseg
mov	ax, 5
call	sub_B68
jnz	short loc_9FC
xor	ax, ax
cwd
jmp	short loc_A20

loc_9FC:
inc	ax
and	al, 0FEh
mov	word_4CB0, ax
mov	word_4CB2, ax
xchg	ax, si
mov	word ptr [si], 1
add	si, 4
mov	word ptr [si-2], 0FFFEh
mov	word_4CB6, si

loc_A16:
mov	cx, [bp+arg_0]
mov	ax, ds
mov	es, ax
call	sub_A29

loc_A20:
pop	di
pop	si
mov	sp, bp
pop	bp
retn
sub_9E0	endp

; START	OF FUNCTION CHUNK FOR sub_A29

loc_A26:
jmp	loc_AF7
; END OF FUNCTION CHUNK	FOR sub_A29



sub_A29	proc near

; FUNCTION CHUNK AT 0A26 SIZE 00000003 BYTES

inc	cx
jz	short loc_A26
and	cl, 0FEh
cmp	cx, 0FFEEh
jnb	short loc_A26
mov	si, [bx+2]
cld
lodsw
mov	di, si
test	al, 1
jz	short loc_A81

loc_A3F:
dec	ax
cmp	ax, cx
jnb	short loc_A59
mov	dx, ax
add	si, ax
lodsw
test	al, 1
jz	short loc_A81
add	ax, dx
add	ax, 2
mov	si, di
mov	[si-2],	ax
jmp	short loc_A3F

loc_A59:
mov	di, si
jz	short loc_A69
add	di, cx
mov	[si-2],	cx
sub	ax, cx
dec	ax
mov	[di], ax
jmp	short loc_A6E

loc_A69:
add	di, cx
dec	byte ptr [si-2]

loc_A6E:
mov	ax, si
mov	dx, ds
mov	cx, ss
cmp	dx, cx
jz	short loc_A7D
mov	es:word_4CBE, ds

loc_A7D:
mov	[bx+2],	di
retn

loc_A81:
mov	es:byte_4CC4, 2

loc_A87:
cmp	ax, 0FFFEh
jz	short loc_AB1
mov	di, si
add	si, ax

loc_A90:
lodsw
test	al, 1
jz	short loc_A87
mov	di, si

loc_A97:
dec	ax
cmp	ax, cx
jnb	short loc_A59
mov	dx, ax
add	si, ax
lodsw
test	al, 1
jz	short loc_A87
add	ax, dx
add	ax, 2
mov	si, di
mov	[si-2],	ax
jmp	short loc_A97

loc_AB1:
mov	ax, [bx+8]
or	ax, ax
jz	short loc_ABC
mov	ds, ax
jmp	short loc_AD0

loc_ABC:
dec	es:byte_4CC4
jz	short loc_AD4
mov	ax, ds
mov	di, ss
cmp	ax, di
jz	short loc_AD0
mov	ds, es:word_4CBA
assume ds:seg000

loc_AD0:
mov	si, [bx]
jmp	short loc_A90

loc_AD4:
mov	si, [bx+6]
xor	ax, ax
call	sub_B46
cmp	ax, si
jz	short loc_AED
and	al, 1
inc	ax
inc	ax
cbw
call	sub_B46
jz	short loc_AF7
dec	byte ptr [di-2]

loc_AED:
call	sub_B0C
jz	short loc_AF7
xchg	ax, si
dec	si
dec	si
jmp	short loc_A90

loc_AF7:
mov	ax, ds
mov	cx, ss
cmp	ax, cx
jz	short loc_B03
mov	es:word_4CBE, ax

loc_B03:
mov	ax, [bx]
mov	[bx+2],	ax
xor	ax, ax
cwd
retn
sub_A29	endp




sub_B0C	proc near
push	cx
mov	ax, [di-2]
test	al, 1
jz	short loc_B17
sub	cx, ax
dec	cx

loc_B17:
inc	cx
inc	cx
mov	dx, 7FFFh

loc_B1C:
cmp	dx, es:word_4CC0
jbe	short loc_B27
shr	dx, 1
jnz	short loc_B1C

loc_B27:
mov	ax, cx
add	ax, si
jb	short loc_B42
add	ax, dx
jb	short loc_B3E
not	dx
and	ax, dx
sub	ax, si
call	sub_B46
jnz	short loc_B44
not	dx

loc_B3E:
shr	dx, 1
jnz	short loc_B27

loc_B42:
xor	ax, ax

loc_B44:
pop	cx
retn
sub_B0C	endp




sub_B46	proc near
push	dx
push	cx
call	sub_B68
jz	short loc_B65
push	di
mov	di, si
mov	si, ax
add	si, dx
mov	word ptr [si-2], 0FFFEh
mov	[bx+6],	si
mov	dx, si
sub	dx, di
dec	dx
mov	[di-2],	dx
pop	ax

loc_B65:
pop	cx
pop	dx
retn
sub_B46	endp




sub_B68	proc near
push	bx
push	ax
xor	dx, dx
push	ds
push	dx
push	dx
push	ax
mov	ax, 1
push	ax
push	es
pop	ds
assume ds:dseg
call	sub_B88
add	sp, 8
cmp	dx, 0FFFFh
pop	ds
pop	dx
pop	bx
jz	short locret_B86
or	dx, dx

locret_B86:
retn
sub_B68	endp

align 2


; Attributes: bp-based frame

sub_B88	proc near

arg_0= word ptr	 4
arg_2= word ptr	 6
arg_4= word ptr	 8
arg_8= word ptr	 0Ch

push	bp
mov	bp, sp
push	si
push	di
push	es
cmp	[bp+arg_4], 0
jnz	short loc_BCC
mov	di, 48h	; 'H'
mov	dx, [bp+arg_2]
mov	ax, [bp+arg_0]
dec	ax
jnz	short loc_BA7
call	sub_BF6
jb	short loc_BCC
jmp	short loc_BEF

loc_BA7:
mov	si, word_4C58
dec	ax
jz	short loc_BBF
cmp	si, di
jz	short loc_BBF
mov	ax, [si+2]
mov	[bp+arg_8], ax
push	si
call	sub_BF6
pop	si
jnb	short loc_BEF

loc_BBF:
add	si, 4
cmp	si, 98h	; ''
jnb	short loc_BCC
or	dx, dx
jnz	short loc_BD2

loc_BCC:
mov	ax, 0FFFFh
cwd
jmp	short loc_BEF

loc_BD2:
mov	bx, dx
add	bx, 0Fh
rcr	bx, 1
mov	cl, 3
shr	bx, cl
mov	ah, 48h
int	21h		; DOS -	2+ - ALLOCATE MEMORY
			; BX = number of 16-byte paragraphs desired
jb	short loc_BCC
xchg	ax, dx
mov	[si], ax
mov	[si+2],	dx
mov	word_4C58, si
xor	ax, ax

loc_BEF:
pop	es
assume es:nothing
pop	di
pop	si
mov	sp, bp
pop	bp
retn
sub_B88	endp




sub_BF6	proc near
mov	cx, [bp+0Ch]
mov	si, di

loc_BFB:
cmp	[si+2],	cx
jz	short loc_C0C
add	si, 4
cmp	si, 98h	; ''
jnz	short loc_BFB
stc
jmp	short locret_C4B

loc_C0C:
mov	bx, dx
add	bx, [si]
jb	short locret_C4B
mov	dx, bx
mov	es, cx
cmp	si, di
jnz	short loc_C20
cmp	word_4C02, bx
jnb	short loc_C46

loc_C20:
add	bx, 0Fh
rcr	bx, 1
shr	bx, 1
shr	bx, 1
shr	bx, 1
cmp	si, di
jnz	short loc_C38
add	bx, cx
mov	ax, word_4C79
sub	bx, ax
mov	es, ax

loc_C38:
mov	ah, 4Ah
int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
			; ES = segment address of block	to change
			; BX = new size	in paragraphs
jb	short locret_C4B
cmp	si, di
jnz	short loc_C46
mov	word_4C02, dx

loc_C46:
xchg	ax, dx
xchg	ax, [si]
mov	dx, cx

locret_C4B:
retn
sub_BF6	endp



; Attributes: bp-based frame

sub_C4C	proc near
push	bp
mov	bp, sp
mov	ax, word_4C02
sub	ax, 3
mov	dx, word_4C08
mov	bx, word_4CB0
cmp	word ptr [bx+2], 0FFFEh
jnz	short loc_C66
sub	ax, 3

loc_C66:
cmp	ax, dx
ja	short loc_C6C
mov	dx, ax

loc_C6C:
sub	ax, dx
mov	sp, bp
pop	bp
retn
sub_C4C	endp


loc_C72:
push	bp
mov	bp, sp
push	si
call	sub_D3D
call	sub_C4C
mov	cx, ax
mov	bx, ax
mov	si, word_4CB0
jmp	short loc_C8D

loc_C86:
cmp	ax, 0FFFEh
jz	short loc_CB0
add	si, ax

loc_C8D:
lodsw
test	al, 1
jz	short loc_C86
mov	dx, 0FFFEh

loc_C95:
dec	ax
inc	dx
inc	dx
add	dx, ax
add	si, ax
lodsw
test	al, 1
jnz	short loc_C95
cmp	ax, 0FFFEh
jnz	short loc_CA8
add	dx, bx

loc_CA8:
cmp	cx, dx
ja	short loc_C86
mov	cx, dx
jmp	short loc_C86

loc_CB0:
mov	ax, cx
pop	si
mov	sp, bp
pop	bp
retn
push	bp
mov	bp, sp
push	si
call	sub_D3D
call	sub_C4C
mov	cx, ax
mov	si, word_4CB0
jmp	short loc_CD0

loc_CC9:
cmp	ax, 0FFFEh
jz	short loc_CE8
add	si, ax

loc_CD0:
lodsw
test	al, 1
jz	short loc_CC9
mov	dx, 0FFFEh

loc_CD8:
dec	ax
inc	dx
inc	dx
add	dx, ax
add	si, ax
lodsw
test	al, 1
jnz	short loc_CD8
add	cx, dx
jmp	short loc_CC9

loc_CE8:
mov	ax, cx
pop	si
mov	sp, bp
pop	bp
retn
push	bp
mov	bp, sp
push	si
call	sub_D3D
mov	si, word_4CB0
mov	bx, [bp+4]
add	bx, 3
and	bl, 0FEh
xor	cx, cx
jmp	short loc_D0E

loc_D07:
cmp	ax, 0FFFEh
jz	short loc_D2D
add	si, ax

loc_D0E:
lodsw
test	al, 1
jz	short loc_D07
mov	dx, 0FFFEh

loc_D16:
dec	ax
inc	dx
inc	dx
add	dx, ax
add	si, ax
lodsw
test	al, 1
jnz	short loc_D16
push	ax
xchg	ax, dx
xor	dx, dx
div	bx
add	cx, ax
pop	ax
jmp	short loc_D07

loc_D2D:
push	bx
call	sub_C4C
pop	bx
xor	dx, dx
div	bx
add	ax, cx
pop	si
mov	sp, bp
pop	bp
retn


; Attributes: bp-based frame

sub_D3D	proc near
push	bp
mov	bp, sp
mov	bx, 0F0h ; ''
cmp	word ptr [bx], 0
jnz	short loc_D54
mov	ax, 1
push	ax
call	sub_9E0
xchg	ax, bx
or	byte ptr [bx-2], 1

loc_D54:
mov	sp, bp
pop	bp
retn
sub_D3D	endp

dd sub_9E0
dd loc_9CE
dd loc_C72



sub_D64	proc far
push	ax
cmp	byte_4CD4, 0
jnz	short loc_D71
call	word ptr cs:[di]
jmp	short loc_D74

loc_D71:
call	dword ptr cs:[di]

loc_D74:
add	sp, 2
retf
sub_D64	endp

seg000 ends


; Segment type:	Pure code
seg001 segment byte public 'CODE' use16
assume cs:seg001
;org 8
assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing



sub_D78	proc near
stc
retn
sub_D78	endp



; Attributes: bp-based frame

sub_D7A	proc far

arg_0= word ptr	 6

push	bp
mov	bp, sp
call	sub_1C0C
xor	ax, ax
mov	bx, [bp+arg_0]
cmp	bx, 0FFFFh
jnz	short loc_D95
xor	bx, bx
mov	bl, byte_4D0E
mov	byte_4F26, 0

loc_D95:
cmp	bx, 13h
ja	short loc_DA5
shl	bx, 1
call	off_4CD6[bx]
mov	ax, 0
jnb	short loc_DA8

loc_DA5:
jmp	short loc_DBC
align 2

loc_DA8:
call	off_4D2F
call	off_4D33
xor	ax, ax
call	off_4D31
call	sub_E73
call	sub_1CE3

loc_DBC:
call	sub_1C2A
pop	bp
retf
sub_D7A	endp



; Attributes: bp-based frame

sub_DC1	proc far

arg_0= word ptr	 6

push	bp
mov	bp, sp
call	sub_1C0C
mov	ax, [bp+arg_0]
mov	bl, 0FFh
or	ah, ah
jnz	short loc_DE4
cmp	al, byte_4D24
ja	short loc_DE4
mov	bl, byte ptr word_4D7B
mov	ah, byte ptr word_4D7B+1
push	bx
call	off_4D31
pop	bx

loc_DE4:
mov	ax, bx
cbw
call	sub_1C2A
pop	bp
retf
sub_DC1	endp



; Attributes: bp-based frame

sub_DEC	proc far

arg_0= word ptr	 6

push	bp
mov	bp, sp
call	sub_1C0C
mov	ax, [bp+arg_0]
mov	bl, 0FFh
or	ah, ah
jnz	short loc_E10
cmp	al, byte_4D24
ja	short loc_E10
mov	bl, byte ptr word_4D7B+1
xchg	ah, al
mov	al, byte ptr word_4D7B
push	bx
call	off_4D31
pop	bx

loc_E10:
mov	ax, bx
cbw
call	sub_1C2A
pop	bp
retf
sub_DEC	endp



; Attributes: bp-based frame

sub_E18	proc far

arg_0= dword ptr  6

push	bp
mov	bp, sp
push	di
push	es
les	di, [bp+arg_0]
cld
xor	ax, ax
mov	bx, ax
mov	dx, ax
mov	cx, 20h	; ' '
cmp	byte_4D14, al
jz	short loc_E44
mov	al, byte_4D3B
mul	byte_4D3C
xchg	ax, dx
mov	ax, word_4D19
mov	bx, word_4D1B
mov	cl, byte_4D1F
inc	cx

loc_E44:
stosw
xchg	ax, bx
stosw
xor	ax, ax
mov	al, byte_4D17
stosw
mov	al, byte_4D18
stosw
xchg	ax, cx
stosw
xchg	ax, dx
stosw
mov	al, byte_4D24
inc	ax
stosw
mov	al, byte ptr word_4D15
stosw
mov	al, byte_503B
stosw
mov	al, byte_503C
stosw
mov	ax, word_503D
stosw
mov	ax, word ptr [bp+arg_0]
mov	dx, es
pop	es
pop	di
pop	bp
retf
sub_E18	endp




sub_E73	proc near
cmp	byte_4D14, 0
jz	short loc_EB5
xor	ax, ax
mov	word_5016, ax
mov	word_5018, ax
mov	word_500E, ax
mov	word_5012, ax
mov	ax, word_4D19
dec	ax
mov	word_5010, ax
mov	ax, word_4D1B
dec	ax
mov	word_5014, ax
call	sub_252C
mov	ax, word_4D19
sar	ax, 1
mov	word_4ED2, ax
mov	ax, word_4D1B
sar	ax, 1
mov	word_4ED4, ax
mov	word_4EDC, 0FFFFh
mov	ax, 3
call	sub_1DF2

loc_EB5:
xor	ax, ax
mov	word_4F1D, ax
mov	word_4F1B, ax
mov	al, byte_4D17
dec	al
mov	word_4F21, ax
mov	al, byte_4D18
dec	al
mov	word_4F1F, ax
xor	ax, ax
mov	al, byte_4D25
call	sub_1D94
xor	ax, ax
mov	byte_4EE6, al
mov	word_4ED6, ax
mov	word_4ED8, ax
inc	ax
mov	byte_4F24, al
mov	byte_4F25, 0
retn
sub_E73	endp

byte_EEA db 0E8h, 63h, 16h, 9Ah, 0F2h, 17h
dw seg seg001
byte_EF2 db 55h, 56h, 57h, 0B4h, 3, 0CDh, 10h, 5Fh
db 5Eh,	5Dh, 33h, 0C0h,	86h, 0F0h, 89h,	16h
db 59h,	3, 0A3h, 57h, 3, 8Ah, 1Eh, 55h,	1
db 32h,	0FFh, 0D1h, 0E3h, 0FFh,	97h, 16h
db 1, 0E8h, 5Dh, 0FFh, 0CBh, 0E8h, 1Dh,	17h
db 0CBh, 0


; Attributes: bp-based frame

sub_F1C	proc far

arg_0= word ptr	 6

push	bp
mov	bp, sp
mov	ax, 0FFFFh
cmp	byte_4D14, 0
jz	short loc_F2F
mov	ax, [bp+arg_0]
call	sub_1D0E

loc_F2F:
pop	bp
retf
sub_F1C	endp




sub_F31	proc far
mov	al, byte_4D25
xor	ah, ah
retf
sub_F31	endp



; Attributes: bp-based frame

sub_F37	proc far

arg_0= word ptr	 6

push	bp
mov	bp, sp
mov	ax, [bp+arg_0]
mov	word_4EDC, ax
mov	word_4FCC, ax
pop	bp
retf
sub_F37	endp




sub_F45	proc far
mov	ax, word_4EDC
retf
sub_F45	endp



; Attributes: bp-based frame

sub_F49	proc far

arg_0= word ptr	 6
arg_2= word ptr	 8

push	bp
mov	bp, sp
mov	ax, [bp+arg_0]
mov	dx, [bp+arg_2]
call	sub_1D23
pop	bp
retf
sub_F49	endp




sub_F57	proc far
mov	ax, word_4ED6
mov	dx, word_4ED8
retf
sub_F57	endp



; Attributes: bp-based frame

sub_F5F	proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah

push	bp
mov	bp, sp
push	si
push	di
call	nullsub_1
mov	bx, [bp+arg_0]
or	bh, bh
jnz	short loc_FC4
xor	ax, ax
cwd
call	off_4D37
jb	short loc_FC4
mov	al, byte ptr word_4D15
cmp	al, 7
jz	short loc_FA1
cmp	al, 0Fh
jz	short loc_FAC
test	byte_503B, 18h
jz	short loc_FCA
mov	al, 15h
push	bp
push	si
push	di
mov	ah, 10h
int	10h		; - VIDEO - READ INDIVIDUAL DAC	REGISTER (EGA, VGA/MCGA)
			; BL = palette register	number
			; Return: DH = red value, CH = green value, CL = blue value
pop	di
pop	si
pop	bp
mov	al, dh
mov	ah, ch
mov	dl, cl
xor	dh, dh
jmp	short loc_1008

loc_FA1:
cmp	byte_5038, 0
jz	short loc_FC4
xor	ax, ax
jmp	short loc_FBA

loc_FAC:
push	bx
call	sub_1023
mov	ax, bx
add	ax, ax
add	ax, bx
pop	bx
add	bl, 8

loc_FBA:
push	ax
call	sub_1023
pop	ax
add	ax, bx
cwd
jmp	short loc_1008

loc_FC4:
mov	ax, 0FFFFh
cwd
jmp	short loc_101F

loc_FCA:
cmp	byte_5038, 0
jz	short loc_FC4
xor	bh, bh
mov	bl, [bx+4DCh]
xor	ax, ax
xor	dx, dx
cmp	byte_4D20, 0Fh
jnz	short loc_FEA
test	bl, 10h
jz	short loc_FEA
or	bl, 38h

loc_FEA:
shr	bl, 1
rcl	dl, 1
shr	bl, 1
rcl	ah, 1
shr	bl, 1
rcl	al, 1
shr	bl, 1
rcl	dl, 1
shr	bl, 1
rcl	ah, 1
shr	bl, 1
rcl	al, 1
mov	cl, 4
shl	ax, cl
shl	dx, cl

loc_1008:
mov	si, ax
mov	di, dx
mov	ax, [bp+arg_2]
mov	dx, [bp+arg_4]
mov	bx, [bp+arg_0]
call	off_4D35
jb	short loc_FC4
mov	ax, si
mov	dx, di

loc_101F:
pop	di
pop	si
pop	bp
retf
sub_F5F	endp




sub_1023 proc near
xor	bh, bh
mov	bl, [bx+4DCh]
mov	cl, 4
shr	bl, cl
adc	bl, bh
retn
sub_1023 endp



; Attributes: bp-based frame

sub_1030 proc far

arg_0= dword ptr  6

push	bp
mov	bp, sp
push	si
push	es
call	nullsub_1
les	si, [bp+arg_0]
call	off_4D39
mov	ax, 0FFFFh
adc	ax, 0
pop	es
pop	si
pop	bp
retf
sub_1030 endp



; Attributes: bp-based frame

sub_104B proc far

arg_0= word ptr	 6

push	bp
mov	bp, sp
call	nullsub_1
mov	ax, [bp+arg_0]
call	sub_1DF2
pop	bp
retf
sub_104B endp

align 2


; Attributes: bp-based frame

sub_105C proc far

arg_0= word ptr	 6
arg_2= word ptr	 8

push	bp
mov	bp, sp
xor	ax, ax
cwd
cmp	byte_4D14, al
jz	short loc_1076
mov	ax, [bp+arg_0]
xchg	ax, word_5016
mov	dx, [bp+arg_2]
xchg	dx, word_5018

loc_1076:
pop	bp
retf
sub_105C endp



; Attributes: bp-based frame

sub_1078 proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch

push	bp
mov	bp, sp
cmp	byte_4D14, 0
jz	short loc_1091
mov	ax, [bp+arg_0]
mov	bx, [bp+arg_2]
mov	cx, [bp+arg_4]
mov	dx, [bp+arg_6]
call	sub_10E5

loc_1091:
pop	bp
retf
sub_1078 endp



; Attributes: bp-based frame

sub_1093 proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch

push	bp
mov	bp, sp
cmp	byte_4D14, 0
jz	short loc_10BE
mov	ax, [bp+arg_0]
mov	cx, [bp+arg_4]
cmp	ax, cx
jl	short loc_10A8
xchg	ax, cx

loc_10A8:
mov	bx, [bp+arg_2]
mov	dx, [bp+arg_6]
cmp	bx, dx
jl	short loc_10B4
xchg	bx, dx

loc_10B4:
mov	word_5016, ax
mov	word_5018, bx
call	sub_10E5

loc_10BE:
pop	bp
retf
sub_1093 endp



; Attributes: bp-based frame

sub_10C0 proc far

arg_0= word ptr	 6
arg_2= word ptr	 8

push	bp
mov	bp, sp
mov	ax, word_5016
add	ax, [bp+arg_0]
mov	dx, word_5018
add	dx, [bp+arg_2]
pop	bp
retf
sub_10C0 endp



; Attributes: bp-based frame

sub_10D2 proc far

arg_0= word ptr	 6
arg_2= word ptr	 8

push	bp
mov	bp, sp
mov	ax, [bp+arg_0]
sub	ax, word_5016
mov	dx, [bp+arg_2]
sub	dx, word_5018
pop	bp
retf
sub_10D2 endp




sub_10E5 proc near
cmp	ax, cx
jl	short loc_10EA
xchg	ax, cx

loc_10EA:
cmp	bx, dx
jl	short loc_10F0
xchg	bx, dx

loc_10F0:
push	bx
mov	bx, word_4D19
call	sub_1E70
mov	word_500E, ax
mov	ax, cx
call	sub_1E70
mov	word_5010, ax
pop	ax
mov	bx, word_4D1B
call	sub_1E70
mov	word_5012, ax
mov	ax, dx
call	sub_1E70
mov	word_5014, ax
call	sub_252C
retn
sub_10E5 endp



; Attributes: bp-based frame

sub_111A proc far

arg_0= word ptr	 6

push	bp
mov	bp, sp
call	sub_1C0C
mov	ax, [bp+arg_0]
cmp	ax, 2
ja	short loc_1174
cmp	al, 1
jz	short loc_1168
xor	bh, bh
cmp	byte_4D14, bh
jnz	short loc_1138
mov	bh, byte_4EDB

loc_1138:
or	al, al
jnz	short loc_114C
xor	cx, cx
mov	dh, byte_4D18
dec	dh
mov	dl, byte_4D17
dec	dl
jmp	short loc_115C

loc_114C:
mov	ch, byte ptr word_4F1B
mov	cl, byte ptr word_4F1D
mov	dh, byte ptr word_4F1F
mov	dl, byte ptr word_4F21

loc_115C:
mov	ah, 6
mov	al, 0
call	sub_1E9C
call	sub_1CE3
jmp	short loc_1174

loc_1168:
cmp	byte_4D14, 0
jz	short loc_1174
xor	ax, ax
call	sub_264A

loc_1174:
call	sub_1C2A
pop	bp
retf
sub_111A endp



; Attributes: bp-based frame

sub_1179 proc far

arg_0= word ptr	 6
arg_2= word ptr	 8

push	bp
mov	bp, sp
xor	ax, ax
cwd
cmp	byte_4D14, al
jz	short loc_1193
mov	ax, [bp+arg_0]
xchg	ax, word_4ED2
mov	dx, [bp+arg_2]
xchg	dx, word_4ED4

loc_1193:
pop	bp
retf
sub_1179 endp




sub_1195 proc far
mov	ax, word_4ED2
mov	dx, word_4ED4
retf
sub_1195 endp



; Attributes: bp-based frame

sub_119D proc far

arg_0= word ptr	 6
arg_2= word ptr	 8

push	bp
mov	bp, sp
push	si
push	di
xor	ax, ax
call	sub_1C0C
jz	short loc_11F1
mov	al, byte_4D25
call	off_4D56
mov	byte_4FB0, 0
mov	ax, word_4EDC
mov	word_4FCC, ax
mov	cx, word_5016
add	cx, word_4ED2
mov	dx, word_5018
add	dx, word_4ED4
mov	ax, word_5016
add	ax, [bp+arg_0]
mov	word_4FC0, ax
mov	ax, word_5018
add	ax, [bp+arg_2]
mov	word_4FC2, ax
call	sub_232D
mov	al, byte_4FB0
mov	bx, [bp+arg_0]
mov	word_4ED2, bx
mov	bx, [bp+arg_2]
mov	word_4ED4, bx

loc_11F1:
cbw
call	sub_1C2A
pop	di
pop	si
pop	bp
retf
sub_119D endp



; Attributes: bp-based frame

sub_11F9 proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch
arg_8= word ptr	 0Eh

push	bp
mov	bp, sp
push	si
push	di
xor	ax, ax
call	sub_1C0C
jz	short loc_1266
mov	byte_4FB0, 0
mov	al, byte_4D25
call	off_4D56
mov	cx, [bp+arg_2]
add	cx, word_5016
mov	dx, [bp+arg_4]
add	dx, word_5018
mov	ax, word_5016
add	ax, [bp+arg_6]
mov	word_4FC0, ax
mov	word_4FB8, ax
mov	ax, word_5018
add	ax, [bp+arg_8]
mov	word_4FC2, ax
mov	word_4FBA, ax
mov	ax, word_4EDC
mov	word_4FCC, ax
mov	ax, [bp+arg_0]
cmp	ax, 3
jz	short loc_124F
cmp	ax, 2
jnz	short loc_1263
call	sub_2302
jmp	short loc_1263

loc_124F:
cmp	byte_4EE6, 0
jz	short loc_125B
mov	byte_5047, 0FFh

loc_125B:
call	sub_2668
mov	byte_5047, 0

loc_1263:
mov	al, byte_4FB0

loc_1266:
cbw
call	sub_1C2A
pop	di
pop	si
pop	bp
retf
sub_11F9 endp



; Attributes: bp-based frame

sub_126E proc far

arg_0= word ptr	 6
arg_2= word ptr	 8

push	bp
mov	bp, sp
call	sub_1C0C
jz	short loc_12A2
mov	cx, [bp+arg_0]
add	cx, word_5016
mov	dx, [bp+arg_2]
add	dx, word_5018
call	sub_2488
jnb	short loc_12A2
call	off_4D4A
call	off_4D58
push	ax
mov	al, byte_4D25
call	off_4D56
call	off_4D5A
pop	ax
xor	ah, ah
jmp	short loc_12A5

loc_12A2:
mov	ax, 0FFFFh

loc_12A5:
call	sub_1C2A
pop	bp
retf
sub_126E endp



; Attributes: bp-based frame

sub_12AA proc far

arg_0= word ptr	 6
arg_2= word ptr	 8

push	bp
mov	bp, sp
mov	ax, 0FFFFh
call	sub_1C0C
jz	short loc_12D5
mov	cx, word_5016
add	cx, [bp+arg_0]
mov	dx, word_5018
add	dx, [bp+arg_2]
call	sub_2488
mov	ax, 0FFFFh
jnb	short loc_12D5
call	off_4D4A
call	off_4D58
xor	ah, ah

loc_12D5:
call	sub_1C2A
pop	bp
retf
sub_12AA endp



; Attributes: bp-based frame

sub_12DA proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch
arg_8= word ptr	 0Eh

push	bp
mov	bp, sp
mov	byte_4FB0, 0
call	sub_1C0C
jz	short loc_1342
mov	ax, [bp+arg_0]
cmp	ax, 2
jz	short loc_12F4
cmp	ax, 3
jnz	short loc_1342

loc_12F4:
xor	ax, ax
mov	byte_4FDF, al
mov	byte_4FDE, al
mov	byte_4FCF, al
mov	ax, [bp+arg_2]
mov	bx, [bp+arg_4]
mov	cx, [bp+arg_6]
mov	dx, [bp+arg_8]
call	sub_1464
jz	short loc_1342
mov	al, byte_4D25
call	off_4D56
call	sub_1EAA
call	sub_1F05
cmp	[bp+arg_0], 3
jnz	short loc_1342
cmp	byte_4FB0, 0
jz	short loc_1342
mov	ax, word_4FB8
sub	ax, word_5016
mov	bx, word_4FBA
sub	bx, word_5018
mov	cl, byte_4D25
xor	ch, ch
call	sub_16E2

loc_1342:
mov	al, byte_4FB0
cbw
call	sub_1C2A
pop	bp
retf
sub_12DA endp



; Attributes: bp-based frame

sub_134B proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch
arg_8= word ptr	 0Eh
arg_A= word ptr	 10h
arg_C= word ptr	 12h
arg_E= word ptr	 14h

push	bp
mov	bp, sp
mov	byte_4FB0, 0
call	sub_1C0C
jz	short loc_1394
mov	byte_4FDF, 6
mov	byte_4FDE, 0
mov	byte_4FCF, 0
mov	ax, [bp+arg_0]
mov	bx, [bp+arg_2]
mov	cx, [bp+arg_4]
mov	dx, [bp+arg_6]
call	sub_1464
jz	short loc_1394
mov	ax, [bp+arg_8]
mov	bx, [bp+arg_A]
mov	cx, [bp+arg_C]
mov	dx, [bp+arg_E]
call	sub_14F9
mov	al, byte_4D25
call	off_4D56
call	sub_1EAA
call	sub_1F05

loc_1394:
mov	al, byte_4FB0
cbw
call	sub_1C2A
pop	bp
retf
sub_134B endp



; Attributes: bp-based frame

sub_139D proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch
arg_8= word ptr	 0Eh
arg_A= word ptr	 10h
arg_C= word ptr	 12h
arg_E= word ptr	 14h
arg_10=	word ptr  16h

push	bp
mov	bp, sp
mov	byte_4FB0, 0
call	sub_1C0C
jz	short loc_1409
mov	ax, [bp+arg_0]
cmp	ax, 2
jz	short loc_13B7
cmp	ax, 3
jnz	short loc_1409

loc_13B7:
mov	byte_4FDF, 6
mov	byte_4FDE, 0
mov	byte_4FCF, 81h ; ''
mov	ax, [bp+arg_2]
mov	bx, [bp+arg_4]
mov	cx, [bp+arg_6]
mov	dx, [bp+arg_8]
call	sub_1464
jz	short loc_1409
mov	ax, [bp+arg_A]
mov	bx, [bp+arg_C]
mov	cx, [bp+arg_E]
mov	dx, [bp+arg_10]
call	sub_14F9
mov	word_4FCC, 0FFFFh
mov	al, byte_4D25
call	off_4D56
call	sub_1EAA
call	sub_1F05
cmp	[bp+arg_0], 3
jnz	short loc_1409
cmp	byte_4FB0, 0
jz	short loc_1409
call	sub_1412

loc_1409:
mov	al, byte_4FB0
cbw
call	sub_1C2A
pop	bp
retf
sub_139D endp




sub_1412 proc near
mov	ax, word_4FAE
sub	ax, word_4FBA
mov	cx, ax
shl	ax, 1
add	ax, cx
cwd
xor	ax, dx
sub	ax, dx
mov	cx, 2
sar	ax, cl
xor	ax, dx
sub	ax, dx
push	ax
mov	ax, word_4FAC
sub	ax, word_4FB8
mov	cx, ax
shl	ax, 1
add	ax, cx
cwd
xor	ax, dx
sub	ax, dx
mov	cx, 2
sar	ax, cl
xor	ax, dx
sub	ax, dx
pop	bx
add	ax, word_4FB8
sub	ax, word_5016
add	bx, word_4FBA
sub	bx, word_5018
xor	ch, ch
mov	cl, byte_4D25
call	sub_16E2
retn
sub_1412 endp




sub_1464 proc near
push	si
push	di
mov	si, cx
sub	si, ax
jnz	short loc_146F

loc_146C:
jmp	loc_14F6

loc_146F:
jg	short loc_1473
neg	si

loc_1473:
mov	di, dx
sub	di, bx
jz	short loc_146C
jg	short loc_147D
neg	di

loc_147D:
add	bx, dx
add	ax, cx
cwd
sub	ax, dx
sar	ax, 1
add	ax, word_5016
mov	word_4FB8, ax
mov	ax, bx
cwd
sub	ax, dx
sar	ax, 1
add	ax, word_5018
mov	word_4FBA, ax
cmp	si, di
jle	short loc_14B2
mov	ax, di
cwd
mov	dh, dl
mov	dl, ah
mov	ah, al
sub	al, al
mov	bx, si
div	bx
sar	bx, 1
jmp	short loc_14C8

loc_14B2:
mov	ax, si
cwd
mov	dh, dl
mov	dl, ah
mov	ah, al
sub	al, al
mov	bx, di
div	bx
sar	bx, 1
or	byte_4FDF, 1

loc_14C8:
cmp	ax, 100h
jz	short loc_14D2
or	byte_4FDF, 8

loc_14D2:
mov	word_4FD0, ax
mov	word_4FC0, bx
mov	ax, 0B505h
mul	bx
add	ax, 7FFFh
adc	dx, 0
mov	word_4FD4, dx
mov	word_4FDC, 0
mov	word_4FD2, 0FFFFh
or	al, 0FFh

loc_14F6:
pop	di
pop	si
retn
sub_1464 endp




sub_14F9 proc near
push	cx
push	dx
call	sub_1545
mov	cx, ax
pop	bx
pop	ax
push	cx
call	sub_1545
pop	cx
mov	dx, ax
add	ax, cx
sar	ax, 1
mov	bx, ax
cmp	cx, dx
jle	short loc_1523
xchg	cx, dx
mov	byte_4FDE, 0FFh
mov	ax, word_4FD4
shl	ax, 1
shl	ax, 1
add	bx, ax

loc_1523:
push	cx
mov	ax, word_4FD4
mov	cl, 3
shl	ax, cl
pop	cx
or	bx, bx
jge	short loc_1532
add	bx, ax

loc_1532:
cmp	bx, ax
jl	short loc_1538
sub	bx, ax

loc_1538:
mov	word_4FAA, bx
mov	word_4FDC, cx
mov	word_4FD2, dx
retn
sub_14F9 endp




sub_1545 proc near
add	ax, word_5016
sub	ax, word_4FB8
add	bx, word_5018
sub	bx, word_4FBA
mov	cx, ax
or	cx, bx
jnz	short loc_155F
sub	ax, ax
jmp	short locret_15BE

loc_155F:
call	sub_15BF
push	ax
push	bx
or	ax, ax
jge	short loc_156A
neg	ax

loc_156A:
or	bx, bx
jge	short loc_1570
neg	bx

loc_1570:
cmp	ax, bx
pop	bx
pop	ax
jle	short loc_158C
or	ax, ax
jl	short loc_1580
mov	cx, bx
neg	cx
jmp	short loc_15A8

loc_1580:
mov	cx, word_4FD4
shl	cx, 1
shl	cx, 1
add	cx, bx
jmp	short loc_15A8

loc_158C:
or	bx, bx
jge	short loc_159A
mov	cx, word_4FD4
shl	cx, 1
sub	cx, ax
jmp	short loc_15A8

loc_159A:
mov	cx, word_4FD4
mov	bx, cx
shl	cx, 1
add	cx, bx
shl	cx, 1
add	cx, ax

loc_15A8:
mov	ax, cx
mov	bx, word_4FD4
mov	cl, 3
shl	bx, cl
cmp	ax, bx
jl	short loc_15B8
sub	ax, bx

loc_15B8:
or	ax, ax
jge	short locret_15BE
add	ax, bx

locret_15BE:
retn
sub_1545 endp




sub_15BF proc near
push	si
cmp	word_4FD0, 100h
jz	short loc_15F1
test	byte_4FDF, 1
jz	short loc_15DE
cwd
mov	dh, dl
mov	dl, ah
mov	ah, al
sub	al, al
idiv	word_4FD0
jmp	short loc_15F1

loc_15DE:
push	ax
mov	ax, bx
cwd
mov	dh, dl
mov	dl, ah
mov	ah, al
sub	al, al
idiv	word_4FD0
mov	bx, ax
pop	ax

loc_15F1:
push	ax
imul	ax
mov	cx, ax
mov	si, dx
mov	ax, bx
imul	ax
add	ax, cx
adc	dx, si
push	bx
call	sub_161E
pop	bx
mov	cx, ax
pop	ax
jcxz	short loc_161C
imul	word_4FC0
idiv	cx
push	ax
mov	ax, bx
imul	word_4FC0
idiv	cx
mov	bx, ax
pop	ax

loc_161C:
pop	si
retn
sub_15BF endp




sub_161E proc near
push	di
mov	bx, ax
mov	cx, dx
jcxz	short loc_164A
mov	dx, cx
mov	di, 0FFFFh

loc_162A:
shl	dx, 1
jb	short loc_1636
shl	dx, 1
jb	short loc_1636
shr	di, 1
jmp	short loc_162A

loc_1636:
mov	dx, cx
mov	ax, bx
cmp	dx, di
jnb	short loc_1655
div	di
cmp	ax, di
jnb	short loc_1655
add	di, ax
rcr	di, 1
jmp	short loc_1636

loc_164A:
mov	dx, bx
mov	di, 0FFh
or	bx, bx
jnz	short loc_162A
mov	di, bx

loc_1655:
mov	ax, di
pop	di
retn
sub_161E endp

align 2


; Attributes: bp-based frame

sub_165A proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah

push	bp
mov	bp, sp
xor	ax, ax
call	sub_1C0C
jz	short loc_1670
mov	ax, [bp+arg_0]
mov	bx, [bp+arg_2]
mov	cx, [bp+arg_4]
call	sub_16E2

loc_1670:
call	sub_1C2A
pop	bp
retf
sub_165A endp



; Attributes: bp-based frame

sub_1675 proc far

arg_0= dword ptr  6

push	bp
mov	bp, sp
push	si
push	di
push	es
cmp	byte_4D14, 0
jz	short loc_16AA
les	si, [bp+arg_0]
mov	ax, es
or	ax, si
jz	short loc_16A7
mov	ax, ds
mov	bx, es
mov	ds, bx
mov	es, ax
assume es:dseg
mov	di, 31Eh
mov	cx, 8
rep movsb
mov	ds, ax
mov	byte_4EE6, 1
call	sub_1827
mov	al, 1

loc_16A7:
mov	byte_4EE6, al

loc_16AA:
pop	es
assume es:nothing
pop	di
pop	si
pop	bp
retf
sub_1675 endp



; Attributes: bp-based frame

sub_16AF proc far

arg_0= dword ptr  6

push	bp
mov	bp, sp
push	si
push	di
push	es
cmp	byte_4D14, 0
jz	short loc_16DA
les	di, [bp+arg_0]
mov	ax, es
or	ax, di
jz	short loc_16DA
mov	si, 31Eh
mov	cx, 8
rep movsb
mov	ax, word ptr [bp+arg_0]
mov	dx, word ptr [bp+arg_0+2]
cmp	byte_4EE6, 0
jnz	short loc_16DD

loc_16DA:
xor	ax, ax
cwd

loc_16DD:
pop	es
pop	di
pop	si
pop	bp
retf
sub_16AF endp




sub_16E2 proc near
push	si
push	di
mov	dx, bx
mov	bx, ax
push	cx
call	sub_1E7E
pop	cx
mov	ax, 0
jnb	short loc_170F
push	cx
mov	al, byte_4D25
call	off_4D56
pop	ax
cmp	byte_4EE6, 0
jz	short loc_1707
call	sub_1740
jmp	short loc_170A

loc_1707:
call	sub_1713

loc_170A:
mov	byte_5047, 0

loc_170F:
cbw
pop	di
pop	si
retn
sub_16E2 endp




sub_1713 proc near
push	ax
mov	byte_4FFA, 0
mov	cx, word_4FC0
mov	dx, word_4FC2
call	off_4D4A
call	off_4D58
pop	bx
cmp	al, bl
mov	ax, 0
jz	short locret_173F
push	bx
call	sub_1784
pop	ax
call	sub_29FB
call	sub_2058
call	sub_17BD

locret_173F:
retn
sub_1713 endp




sub_1740 proc near
push	ax
mov	cx, word_4FC0
mov	dx, word_4FC2
call	off_4D4A
call	off_4D58
pop	bx
cmp	al, bl
mov	ax, 0
jz	short locret_1783
push	bx
mov	byte_4FFA, 0FFh
call	sub_1784
call	sub_17D3
call	sub_17EE
call	sub_21BB
pop	ax
call	sub_29FB
mov	dx, word_4FC2
call	sub_21CD
mov	bl, byte_5003
call	sub_224F
call	sub_2058
call	sub_17BD

locret_1783:
retn
sub_1740 endp




sub_1784 proc near
push	di
mov	di, 0D60h
call	sub_D64
sub	ax, 9
jb	short loc_17A0
push	ax
mov	di, 0D58h
call	sub_D64
pop	bx
or	ax, ax
jnz	short loc_17A2

loc_17A0:
xor	bx, bx

loc_17A2:
mov	word_5008, ax
mov	word_5006, ax
mov	word_500A, 0
mov	word_500C, bx
mov	word_4FBE, ax
add	ax, bx
dec	ax
mov	word_4FBC, ax
pop	di
retn
sub_1784 endp




sub_17BD proc near
push	ax
push	di
mov	ax, word_4FBE
cmp	ax, word_4FBC
jnb	short loc_17D0
mov	di, 0D5Ch
call	sub_D64

loc_17D0:
pop	di
pop	ax
retn
sub_17BD endp




sub_17D3 proc near
mov	word_4FFE, 327h
call	sub_2A1E
mov	byte_5004, al
mov	byte_5002, 8
mov	cl, 3
shl	al, cl
dec	al
mov	byte_4FFD, al
retn
sub_17D3 endp




sub_17EE proc near
mov	bx, 327h
mov	cx, 8

loc_17F4:
push	cx
call	sub_17FC
pop	cx
loop	loc_17F4
retn
sub_17EE endp




sub_17FC proc near
cmp	byte_4D3C, 1
jbe	short loc_1820
xor	cl, cl

loc_1805:
mov	al, 1
shl	al, cl
test	byte ptr word_5040+1, al
mov	al, 0
jz	short loc_1813
dec	al

loc_1813:
mov	[bx], al
inc	bx
inc	cl
cmp	cl, byte_4D3C
jl	short loc_1805
jmp	short locret_1826

loc_1820:
mov	al, byte ptr word_5040+1
mov	[bx], al
inc	bx

locret_1826:
retn
sub_17FC endp




sub_1827 proc near
push	ds
pop	es
assume es:dseg
mov	di, 347h
mov	cx, 10h
xor	ax, ax
rep stosb
cmp	byte_4D14, 1
jnz	short loc_1865
xor	bx, bx

loc_183C:
xor	cx, cx

loc_183E:
mov	ax, 1
shl	al, cl
and	al, [bx+31Eh]
shl	ax, cl
mov	dx, ax
shl	ax, 1
or	ax, dx
shl	bx, 1
or	[bx+347h], ax
shr	bx, 1
inc	cx
cmp	cx, 8
jl	short loc_183E
inc	bx
cmp	bx, 8
jl	short loc_183C
jmp	short locret_1872

loc_1865:
push	ds
pop	es
mov	si, 31Eh
mov	di, 347h
mov	cx, 8
rep movsb

locret_1872:
retn
sub_1827 endp

align 2


; Attributes: bp-based frame

sub_1874 proc far

arg_0= dword ptr  6

push	bp
mov	bp, sp
call	sub_1C0C

loc_187A:
les	bx, [bp+arg_0]
assume es:nothing
inc	word ptr [bp+arg_0]
mov	al, es:[bx]
or	al, al
jz	short loc_18C2
push	ax
call	sub_19F3
pop	ax
cmp	al, 0Ah
jnz	short loc_18A1
mov	word_4F19, 0
mov	byte_4F23, 0
inc	word_4F17
jmp	short loc_187A

loc_18A1:
cmp	al, 0Dh
jnz	short loc_18B2
mov	word_4F19, 0
mov	byte_4F23, 0
jmp	short loc_187A

loc_18B2:
cmp	byte_4F23, 0
jnz	short loc_187A
call	sub_19B4
inc	word_4F19
jmp	short loc_187A

loc_18C2:
call	sub_19F3
call	sub_1C2A
pop	bp
retf
sub_1874 endp



; Attributes: bp-based frame

sub_18CA proc far

arg_0= word ptr	 6
arg_2= word ptr	 8

push	bp
mov	bp, sp
call	sub_1C0C
mov	ax, word_4F17
inc	ax
mov	dx, word_4F19
inc	dx
push	ax
push	dx
mov	ax, [bp+arg_0]
dec	ax
mov	bx, [bp+arg_2]
dec	bx
call	sub_19CA
pop	dx
pop	ax
call	sub_1C2A
pop	bp
retf
sub_18CA endp




sub_18ED proc far
call	sub_1C0C
call	sub_19F3
mov	ax, word_4F17
inc	ax
mov	dx, word_4F19
inc	dx
call	sub_1C2A
retf
sub_18ED endp



; Attributes: bp-based frame

sub_1900 proc far

arg_0= word ptr	 6

push	bp
mov	bp, sp
call	sub_1C0C
mov	ax, [bp+arg_0]
call	sub_1D94
call	sub_1C2A
pop	bp
retf
sub_1900 endp




sub_1911 proc far
mov	al, byte_4EDA
xor	ah, ah
retf
sub_1911 endp



; Attributes: bp-based frame

sub_1917 proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch

push	bp
mov	bp, sp
call	sub_1C0C
mov	ax, [bp+arg_0]
dec	ax
mov	cx, [bp+arg_4]
dec	cx
cmp	ax, cx
jbe	short loc_192A
xchg	ax, cx

loc_192A:
xor	bx, bx
mov	bl, byte_4D18
call	sub_1E70
mov	word_4F1B, ax
mov	ax, cx
call	sub_1E70
mov	word_4F1F, ax
mov	ax, [bp+arg_2]
dec	ax
mov	cx, [bp+arg_6]
dec	cx
cmp	ax, cx
jbe	short loc_194B
xchg	ax, cx

loc_194B:
xor	bx, bx
mov	bl, byte_4D17
call	sub_1E70
mov	word_4F1D, ax
mov	ax, cx
call	sub_1E70
mov	word_4F21, ax
sub	ax, ax
mov	bx, ax
call	sub_19CA
call	sub_1C2A
pop	bp
retf
sub_1917 endp



; Attributes: bp-based frame

sub_196B proc far

arg_0= word ptr	 6

push	bp
mov	bp, sp
call	sub_1C0C
mov	ax, [bp+arg_0]
or	al, ah
xchg	al, byte_4F24
mov	ah, 0
push	ax
jz	short loc_1992
cmp	byte_4F23, 0
jz	short loc_1992
mov	byte_4F23, 0
inc	word_4F19
call	sub_19F3

loc_1992:
pop	ax
cbw
call	sub_1C2A
pop	bp
retf
sub_196B endp



; Attributes: bp-based frame

sub_1999 proc far

arg_0= word ptr	 6

push	bp
mov	bp, sp
call	sub_1C0C
mov	al, byte_4F26
mov	ah, 0
jz	short loc_19AF
mov	bx, [bp+arg_0]
or	bl, bh
mov	byte_4F26, bl

loc_19AF:
call	sub_1C2A
pop	bp
retf
sub_1999 endp




sub_19B4 proc near
mov	bh, byte ptr word_4D7B
mov	bl, byte_4EDB
mov	cx, 1
push	bp
push	si
push	di
mov	ah, 9
int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACTERS	AT CURSOR POSITION
			; AL = character, BH = display page
			; BL = attributes of character (alpha modes) or	color (graphics	modes)
			; CX = number of times to write	character
pop	di
pop	si
pop	bp
retn
sub_19B4 endp




sub_19CA proc near
push	bx
mov	bx, word_4F1F
sub	bx, word_4F1B
inc	bx
call	sub_1E70
mov	word_4F17, ax
pop	ax
mov	bx, word_4F21
sub	bx, word_4F1D
inc	bx
call	sub_1E70
mov	word_4F19, ax
mov	byte_4F23, 0
call	sub_19F3
retn
sub_19CA endp




sub_19F3 proc near
mov	bx, word_4F21
sub	bx, word_4F1D
cmp	word_4F19, 0
jge	short loc_1A0A
mov	word_4F19, 0
jmp	short loc_1A2C

loc_1A0A:
cmp	word_4F19, bx
jle	short loc_1A2C
cmp	byte_4F24, 0
jz	short loc_1A23
mov	word_4F19, 0
inc	word_4F17
jmp	short loc_1A2C

loc_1A23:
mov	word_4F19, bx
mov	byte_4F23, 1

loc_1A2C:
mov	bx, word_4F1F
sub	bx, word_4F1B
cmp	word_4F17, 0
jge	short loc_1A43
mov	word_4F17, 0
jmp	short loc_1A71

loc_1A43:
cmp	word_4F17, bx
jle	short loc_1A71
mov	word_4F17, bx
mov	bh, 0
cmp	byte_4D14, 0
jnz	short loc_1A5A
mov	bh, byte_4EDB

loc_1A5A:
mov	ah, 6
mov	al, 1
mov	ch, byte ptr word_4F1B
mov	cl, byte ptr word_4F1D
mov	dh, byte ptr word_4F1F
mov	dl, byte ptr word_4F21
call	sub_1E9C

loc_1A71:
call	sub_1CEF
mov	al, byte_4F23
cbw
retn
sub_19F3 endp

align 2


; Attributes: bp-based frame

sub_1A7A proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch
arg_8= dword ptr  0Eh

push	bp
mov	bp, sp
push	es
call	sub_1C0C
jnz	short loc_1A86

loc_1A83:
jmp	short loc_1AFD
align 2

loc_1A86:
mov	bx, [bp+arg_0]
mov	dx, [bp+arg_2]
call	sub_1E7E
jnb	short loc_1A83
mov	ax, word_4FC0
push	ax
mov	bx, word_4FC2
push	bx
mov	bx, [bp+arg_4]
mov	dx, [bp+arg_6]
call	sub_1E7E
pop	bx
pop	ax
jnb	short loc_1A83
cmp	word_4FC0, ax
jle	short loc_1AB1
xchg	ax, word_4FC0

loc_1AB1:
cmp	word_4FC2, bx
jle	short loc_1ABB
xchg	bx, word_4FC2

loc_1ABB:
sub	bx, word_4FC2
inc	bx
push	bx
sub	ax, word_4FC0
inc	ax
push	ax
mov	cx, word_4FC0
mov	dx, word_4FC2
call	off_4D4A
pop	ax
mov	bl, byte_4D3B
xor	bh, bh
mul	bx
pop	dx
les	bx, [bp+arg_8]
mov	es:[bx], ax
mov	es:[bx+2], dx
add	bx, 4
mov	cx, ax
clc
push	dx
call	sub_2928
pop	cx

loc_1AF2:
push	cx
call	sub_2983
call	off_4D54
pop	cx
loop	loc_1AF2

loc_1AFD:
call	sub_1C2A
pop	es
pop	bp
retf
sub_1A7A endp



; Attributes: bp-based frame

sub_1B03 proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= dword ptr  0Ah
arg_8= word ptr	 0Eh

push	bp
mov	bp, sp
push	si
push	di
push	es
call	sub_1C0C
jnz	short loc_1B11

loc_1B0E:
jmp	short loc_1B82
db 90h

loc_1B11:
cmp	[bp+arg_8], 4
ja	short loc_1B0E
mov	bx, [bp+arg_0]
mov	dx, [bp+arg_2]
call	sub_1E7E
jnb	short loc_1B0E
mov	cx, word_4FC0
mov	dx, word_4FC2
call	off_4D4A
les	bx, [bp+arg_4]
mov	si, es:[bx]
mov	di, es:[bx+2]
add	bx, 4
or	si, si
jle	short loc_1B82
cmp	si, 4000h
ja	short loc_1B82
or	di, di
jle	short loc_1B82
mov	cl, byte_4D3B
sub	ch, ch
mov	ax, si
sub	dx, dx
div	cx
mov	cx, ax
dec	cx
add	cx, word_4FC0
jle	short loc_1B82
mov	dx, di
dec	dx
add	dx, word_4FC2
jle	short loc_1B82
call	sub_2488
jnb	short loc_1B82
stc
mov	ax, [bp+arg_8]
mov	cx, si
push	di
call	sub_2928
pop	cx

loc_1B77:
push	cx
call	sub_29BC
call	off_4D54
pop	cx
loop	loc_1B77

loc_1B82:
call	sub_1C2A
pop	es
pop	di
pop	si
pop	bp
retf
sub_1B03 endp



; Attributes: bp-based frame

sub_1B8A proc far

arg_0= word ptr	 6
arg_2= word ptr	 8
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch

push	bp
mov	bp, sp
xor	ax, ax
cwd
cmp	byte_4D14, al
jz	short loc_1BC9
mov	ax, [bp+arg_0]
sub	ax, [bp+arg_4]
jge	short loc_1BA0
neg	ax

loc_1BA0:
inc	ax
mov	bx, [bp+arg_2]
sub	bx, [bp+arg_6]
jge	short loc_1BAB
neg	bx

loc_1BAB:
inc	bx
mov	cl, byte_4D3B
xor	ch, ch
mul	cx
add	ax, 7
mov	cl, 3
shr	ax, cl
mov	cl, byte_4D3C
mul	cx
mul	bx
add	ax, 4
adc	dx, 0

loc_1BC9:
pop	bp
retf
sub_1B8A endp

align 2
db 4 dup(0FFh),	0, 2Ah,	2 dup(0), 2Ah, 3 dup(0)
db 2Ah,	15h, 2 dup(0), 4 dup(0FFh), 0, 2 dup(2Ah)
db 0, 2Ah, 0, 2Ah, 0, 3	dup(2Ah), 0, 4 dup(0FFh)
db 15h,	3Fh, 15h, 0, 3Fh, 2 dup(15h), 0
db 2 dup(3Fh), 15h, 0, 4 dup(0FFh), 15h
db 2 dup(3Fh), 0, 3Fh, 15h, 3Fh, 0, 3 dup(3Fh)
db 0



sub_1C0C proc near
call	nullsub_1
cmp	byte_4D14, 0
jz	short locret_1C29
cmp	byte_4F25, 0
jz	short loc_1C27
call	sub_1C4B
mov	byte_4F25, 0

loc_1C27:
or	sp, sp

locret_1C29:
retn
sub_1C0C endp




sub_1C2A proc near
cmp	byte_4D14, 0
jz	short locret_1C4A
cmp	byte_4F26, 0
jz	short locret_1C4A
cmp	byte_4F25, 0
jnz	short locret_1C4A
push	ax
push	dx
call	sub_1C4B
pop	dx
pop	ax
inc	byte_4F25

locret_1C4A:
retn
sub_1C2A endp




sub_1C4B proc near
push	es
call	sub_1CEF
cmp	byte_4D14, 2
ja	short loc_1C73
xor	bx, bx
mov	es, bx
assume es:seg000
mov	bx, 7Ch	; '|'
push	word ptr es:[bx+2]
push	word ptr es:[bx]
push	es
push	bx
mov	word ptr es:[bx], 13Eh
mov	word ptr es:[bx+2], ds
mov	al, 80h	; ''
jmp	short loc_1C7C

loc_1C73:
cmp	word_4D15, 13h
jz	short loc_1CA6
mov	al, 0DBh ; ''

loc_1C7C:
mov	bl, byte_4EDB
or	bl, 80h
mov	bh, byte ptr word_4D7B
mov	cx, 1
push	bp
push	si
push	di
mov	ah, 9
int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACTERS	AT CURSOR POSITION
			; AL = character, BH = display page
			; BL = attributes of character (alpha modes) or	color (graphics	modes)
			; CX = number of times to write	character
pop	di
pop	si
pop	bp
cmp	byte_4D14, 2
ja	short loc_1CA4
pop	bx
pop	es
assume es:nothing
pop	word ptr es:[bx]
pop	word ptr es:[bx+2]

loc_1CA4:
pop	es
retn

loc_1CA6:
mov	ax, word_4F1B
add	ax, word_4F17
mov	dx, word_4F1D
add	dx, word_4F19
mov	cl, 3
shl	ax, cl
shl	dx, cl
mov	cx, dx
mov	dx, ax
call	off_4D4A
mov	al, byte_4EDB
mov	ah, al
les	bx, dword_5042
mov	cx, 8

loc_1CCF:
push	cx
mov	cx, 4

loc_1CD3:
xor	es:[bx], ax
inc	bx
inc	bx
loop	loc_1CD3
pop	cx
add	bx, 138h
loop	loc_1CCF
jmp	short loc_1CA4
sub_1C4B endp




sub_1CE3 proc near
xor	ax, ax
mov	word_4F19, ax
mov	word_4F17, ax
call	sub_1CEF
retn
sub_1CE3 endp




sub_1CEF proc near
mov	bh, byte ptr word_4D7B
mov	dh, byte ptr word_4F1B
add	dh, byte ptr word_4F17
mov	dl, byte ptr word_4F1D
add	dl, byte ptr word_4F19
push	bp
push	si
push	di
mov	ah, 2
int	10h		; - VIDEO - SET	CURSOR POSITION
			; DH,DL	= row, column (0,0 = upper left)
			; BH = page number
pop	di
pop	si
pop	bp
retn
sub_1CEF endp




sub_1D0E proc near
mov	bl, byte_4D1F
or	ah, ah
jnz	short loc_1D1A
cmp	al, bl
jbe	short loc_1D1E

loc_1D1A:
mov	al, bl
xor	ah, ah

loc_1D1E:
xchg	al, byte_4D25
retn
sub_1D0E endp




sub_1D23 proc near
push	si
push	di
mov	si, word_4ED6
mov	di, word_4ED8
cmp	word_4D15, 6
jz	short loc_1D7F
cmp	byte_4D14, 0
jnz	short loc_1D4C
and	ax, 7
mov	word_4ED6, ax
mov	word_4ED8, 0
call	sub_1DB8
jmp	short loc_1D8D

loc_1D4C:
push	ax
push	dx
cmp	byte_4D14, 1
jnz	short loc_1D75
test	byte_503B, 1Ch
jnz	short loc_1D75
xor	bx, bx
call	off_4D37
mov	bl, al
jb	short loc_1D7B
xor	bh, bh
push	bp
push	si
push	di
mov	ah, 0Bh
int	10h		; - VIDEO - SET	COLOR PALETTE
			; BH = 00h, BL = border	color
			; BH = 01h, BL = palette (0-3)
pop	di
pop	si
pop	bp
clc
jmp	short loc_1D7B

loc_1D75:
xor	bl, bl
call	off_4D35

loc_1D7B:
pop	dx
pop	ax
jnb	short loc_1D86

loc_1D7F:
mov	ax, 0FFFFh
mov	dx, si
jmp	short loc_1D91

loc_1D86:
mov	word_4ED6, ax
mov	word_4ED8, dx

loc_1D8D:
mov	ax, si
mov	dx, di

loc_1D91:
pop	di
pop	si
retn
sub_1D23 endp




sub_1D94 proc near
mov	bh, byte_4D1F
or	ah, ah
jnz	short loc_1DAA
mov	bl, bh
cmp	byte_4D14, ah
jnz	short loc_1DA6
mov	bl, 1Fh

loc_1DA6:
cmp	al, bl
jbe	short loc_1DAE

loc_1DAA:
mov	al, bh
xor	ah, ah

loc_1DAE:
xchg	al, byte_4EDA
push	ax
call	sub_1DB8
pop	ax
retn
sub_1D94 endp




sub_1DB8 proc near
mov	al, byte_4EDA
cmp	byte_4D14, 0
jnz	short loc_1DE0
and	al, 0Fh
mov	bl, byte_4EDA
and	bl, 10h
mov	cl, 3
shl	bl, cl
or	al, bl
mov	bl, byte ptr word_4ED6
mov	cl, 4
shl	bl, cl
and	bl, 70h
or	al, bl
jmp	short loc_1DEE

loc_1DE0:
cmp	byte_4D3C, 2
jnz	short loc_1DEE
call	off_4D56
mov	al, byte ptr word_5040+1

loc_1DEE:
mov	byte_4EDB, al
retn
sub_1DB8 endp




sub_1DF2 proc near
push	si
push	es
cmp	byte_4D14, 1
jnz	short loc_1E00
cmp	ax, 3
jbe	short loc_1E05

loc_1E00:
mov	ax, 0FFFFh
jmp	short loc_1E6D

loc_1E05:
test	byte_503B, 1Ch
jz	short loc_1E24
push	ax
mov	bx, ax
mov	cl, 4
shl	bx, cl
lea	si, [bx+0E5Ch]
push	cs
pop	es
assume es:seg001
call	off_4D39
pop	ax
xchg	al, byte_4ED0
jmp	short loc_1E6D

loc_1E24:
sub	bx, bx
mov	es, bx
assume es:seg000
mov	ah, byte ptr es:loc_464+2
push	ax
mov	bh, 1
mov	bl, al
and	bl, 1
push	bp
push	si
push	di
mov	ah, 0Bh
int	10h		; - VIDEO - SET	COLOR PALETTE
			; BH = 00h, BL = border	color
			; BH = 01h, BL = palette (0-3)
pop	di
pop	si
pop	bp
pop	ax
push	ax
and	al, 2
mov	cl, 3
shl	al, cl
mov	bl, al
and	ah, 0Fh
or	bl, ah
mov	bh, 0
push	bp
push	si
push	di
mov	ah, 0Bh
int	10h		; - VIDEO - SET	COLOR PALETTE
			; BH = 00h, BL = border	color
			; BH = 01h, BL = palette (0-3)
pop	di
pop	si
pop	bp
pop	ax
mov	cl, 4
sar	ah, cl
mov	al, ah
and	al, 1
shl	al, 1
and	ah, 2
shr	ah, 1
or	al, ah
cbw

loc_1E6D:
pop	es
assume es:nothing
pop	si
retn
sub_1DF2 endp




sub_1E70 proc near
or	ax, ax
jge	short loc_1E76
sub	ax, ax

loc_1E76:
cmp	ax, bx
jl	short locret_1E7D
mov	ax, bx
dec	ax

locret_1E7D:
retn
sub_1E70 endp




sub_1E7E proc near
add	bx, word_5016
mov	word_4FB8, bx
mov	word_4FC0, bx
add	dx, word_5018
mov	word_4FBA, dx
mov	word_4FC2, dx
mov	cx, bx
call	sub_2488
retn
sub_1E7E endp




sub_1E9C proc near
push	ax
call	sub_4B6A
pop	ax
call	sub_4B5C
call	sub_4B65
retn
sub_1E9C endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS KEYPAD "+" TO EXPAND]
align 2



sub_1EAA proc near
push	ax
push	cx
push	dx
mov	dx, word_4FC0
call	sub_1EED
mov	ax, word_4FB8
add	ax, cx
sub	ax, word_5010
neg	ax
js	short loc_1EE2
mov	ax, word_4FB8
sub	ax, cx
sub	ax, word_500E
js	short loc_1EE2
mov	ax, word_4FBA
add	ax, dx
sub	ax, word_5014
neg	ax
js	short loc_1EE2
mov	ax, word_4FBA
sub	ax, dx
sub	ax, word_5012

loc_1EE2:
rcl	ax, 1
sbb	al, al
mov	byte_4FCE, al
pop	dx
pop	cx
pop	ax
retn
sub_1EAA endp




sub_1EED proc near
mov	cx, dx
mov	ax, word_4FD0
mul	dx
add	ax, 80h	; ''
adc	dh, dl
mov	dl, ah
test	byte_4FDF, 1
jz	short locret_1F04
xchg	cx, dx

locret_1F04:
retn
sub_1EED endp




sub_1F05 proc near
push	si
push	di
push	es
call	off_4D5E
xor	di, di
mov	si, word_4FC0
mov	ax, 1
sub	ax, si
mov	word_4FDA, ax

loc_1F1A:
push	di
push	si
call	sub_1F51
pop	si
pop	di
cmp	di, si
jnb	short loc_1F41
mov	ax, word_4FDA
or	ax, ax
js	short loc_1F34
sub	ax, si
sub	ax, si
add	ax, 2
dec	si

loc_1F34:
add	ax, di
add	ax, di
add	ax, 3
inc	di
mov	word_4FDA, ax
jmp	short loc_1F1A

loc_1F41:
call	off_4D60
pop	es
pop	di
pop	si
retn
sub_1F05 endp

; START	OF FUNCTION CHUNK FOR sub_1FA3

loc_1F49:
call	sub_2488
jnb	short loc_1FC9
jmp	short loc_1FC1
; END OF FUNCTION CHUNK	FOR sub_1FA3
db 90h



sub_1F51 proc near
mov	word_4FD6, di
mov	word_4FD8, 0
mov	ax, word_4FD0
mov	cx, ax
mul	di
add	ax, 80h	; ''
adc	dh, dl
mov	dl, ah
mov	bx, dx
mov	ax, cx
mul	si
add	ax, 80h	; ''
adc	dh, dl
mov	dl, ah
test	byte_4FDF, 1
jnz	short loc_1F81
xchg	bx, di
xchg	dx, si

loc_1F81:
mov	word_4FEE, bx
mov	word_4FF0, si
mov	si, dx
neg	di
call	sub_1FA3
mov	ax, word_4FD4
mov	word_4FD8, ax
sub	ax, word_4FD6
mov	word_4FD6, ax
neg	word_4FEE
neg	di
sub_1F51 endp




sub_1FA3 proc near

; FUNCTION CHUNK AT 11D9 SIZE 00000007 BYTES

mov	ax, 4

loc_1FA6:
push	ax
mov	cx, si
mov	dx, di
add	cx, word_4FB8
add	dx, word_4FBA
test	byte_4FDF, 6
jnz	short loc_1FDC

loc_1FBA:
cmp	byte_4FCE, 0
jnz	short loc_1F49

loc_1FC1:
call	off_4D4A
call	off_4D5C

loc_1FC9:
pop	ax
dec	ax
jz	short locret_1FDB
xchg	si, word_4FEE
neg	si
xchg	di, word_4FF0
neg	di
jmp	short loc_1FA6

locret_1FDB:
retn

loc_1FDC:
mov	bx, word_4FD8
mov	ax, word_4FD4
shl	ax, 1
add	ax, bx
mov	word_4FD8, ax
add	bx, word_4FD6
mov	ax, word_4FAA
cmp	ax, bx
jnz	short loc_1FFD
mov	word_4FAC, cx
mov	word_4FAE, dx

loc_1FFD:
cmp	bx, word_4FDC
jz	short loc_2028
jb	short loc_200D
cmp	bx, word_4FD2
jz	short loc_2016
jb	short loc_2045

loc_200D:
cmp	byte_4FDE, 0
jnz	short loc_1FBA
jmp	short loc_1FC9

loc_2016:
mov	al, byte_4FCF
test	al, 80h
jz	short loc_1FBA
test	al, 40h
jnz	short loc_1FC9
or	byte_4FCF, 40h
jmp	short loc_2038

loc_2028:
mov	al, byte_4FCF
test	al, 1
jz	short loc_1FBA
test	al, 2
jnz	short loc_1FC9
or	byte_4FCF, 2

loc_2038:
push	si
push	di
call	sub_2479
call	off_4D5E
pop	di
pop	si

loc_2043:
jmp	short loc_1FC9

loc_2045:
cmp	byte_4FDE, 0
jnz	short loc_2043
jmp	loc_1FBA
sub_1FA3 endp

align 2
; START	OF FUNCTION CHUNK FOR sub_2295

loc_2050:
mov	sp, word_4FA8
xor	ax, ax
jmp	short loc_207F
; END OF FUNCTION CHUNK	FOR sub_2295



sub_2058 proc near
mov	word_4FA8, sp
call	off_4D70
mov	si, 1
call	sub_216E
jz	short loc_207C
push	bx
call	sub_218F
pop	si
add	si, bx
mov	dl, 40h	; '@'
call	sub_2164
mov	dl, 0C0h ; ''
or	dl, byte_4FFC
jmp	short loc_208B

loc_207C:
mov	ax, 0FFFFh

loc_207F:
mov	byte_4FFA, 0
retn

loc_2085:
call	sub_22D6
call	sub_2A27

loc_208B:
mov	al, dl
and	al, 3Fh
mov	byte_4FFC, al
mov	ah, byte_5004
mul	ah
mov	byte_5003, al
mov	al, dl
and	al, 0C0h
mov	byte_4FF8, al
add	al, al
jz	short loc_207C
jnb	short loc_20B3
call	off_4D4E
jb	short loc_2085
call	sub_2201
jmp	short loc_20BC

loc_20B3:
call	off_4D52
jb	short loc_2085
call	sub_222B

loc_20BC:
call	off_4D70
call	sub_216E
jz	short loc_2085
call	sub_218F
mov	si, bx
test	byte_4FFB, 0FFh
jnz	short loc_20D5
or	cl, cl
jz	short loc_20ED

loc_20D5:
cmp	bx, 1
jle	short loc_20ED
mov	al, byte_4FF8
xor	al, 80h
and	al, 0C0h
or	al, byte_4FFC
mov	dl, al
call	sub_2A2F
call	sub_2295

loc_20ED:
add	si, word_4FF6
call	sub_2152
mov	cx, word_4FEC
mov	bx, word_4FEA
mov	ax, word_4FE8
call	sub_2A27

loc_2102:
mov	si, word_4FF4
sub	si, word_4FF6
jz	short loc_214F
jb	short loc_2134
call	sub_216E
jz	short loc_214F
test	byte_4FFB, 0FFh
jnz	short loc_211E
or	cl, cl
jz	short loc_2102

loc_211E:
mov	si, bx
mov	cx, word_4FEC
mov	bx, word_4FEA
mov	ax, word_4FE8
mov	dl, byte_4FF8
call	sub_2167
jmp	short loc_2102

loc_2134:
cmp	si, 0FFFFh
jge	short loc_214F
neg	si
dec	si
mov	cx, si

loc_213F:
call	off_4D4C
loop	loc_213F
mov	al, byte_4FF8
xor	al, 80h
mov	dl, al
call	sub_2164

loc_214F:
jmp	loc_2085
sub_2058 endp




sub_2152 proc near
mov	al, byte_4FF2
or	al, byte_4FF3
or	al, byte_4FFB
jnz	short loc_2160
retn

loc_2160:
mov	dl, byte_4FF8
sub_2152 endp




sub_2164 proc near
call	sub_2A2F
sub_2164 endp




sub_2167 proc near
or	dl, byte_4FFC
jmp	sub_2295
sub_2167 endp




sub_216E proc near
mov	dx, si
call	off_4D76
mov	word_4FF4, dx
mov	word_4FF6, bx
mov	word_4FE8, ax
mov	word_4FEA, si
mov	word_4FEC, di
or	bx, bx
mov	al, cl
mov	byte_4FF3, al
retn
sub_216E endp




sub_218F proc near
call	sub_2A2F
push	cx
push	bx
push	ax
mov	cx, word_4FEC
mov	bx, word_4FEA
mov	ax, word_4FE8
call	sub_2A27
pop	ax
pop	bx
pop	cx
mov	word_4FEC, cx
mov	word_4FEA, bx
mov	word_4FE8, ax
call	off_4D74
mov	al, cl
mov	byte_4FF2, al
retn
sub_218F endp




sub_21BB proc near
mov	cx, 10h
mov	di, 367h
xor	al, al
cld
rep stosb
mov	word_5000, 367h
retn
sub_21BB endp




sub_21CD proc near
cmp	byte_4FFA, 0
jz	short locret_21F4
push	ax
push	dx
mov	bx, dx
mov	dl, byte_5002
xor	dh, dh

loc_21DE:
sub	bx, dx
jnb	short loc_21DE
add	bx, dx
mov	byte_4FFC, bl
mov	al, byte_5004
xor	ah, ah
mul	bl
mov	byte_5003, al
pop	dx
pop	ax

locret_21F4:
retn
sub_21CD endp

cmp	byte_4FFA, 0
mov	bl, byte_5003
jnz	short sub_224F
retn



sub_2201 proc near
cmp	byte_4FFA, 0
jnz	short loc_2209
retn

loc_2209:
dec	byte_4FFC
mov	bl, byte_5003
or	bl, bl
jnz	short loc_2225
mov	bl, byte_5002
dec	bl
mov	byte_4FFC, bl
mov	bl, byte_4FFD
inc	bl

loc_2225:
sub	bl, byte_5004
jmp	short loc_224B
sub_2201 endp




sub_222B proc near
cmp	byte_4FFA, 0
jnz	short loc_2233
retn

loc_2233:
inc	byte_4FFC
mov	bl, byte_5003
add	bl, byte_5004
cmp	bl, byte_4FFD
jbe	short loc_224B
xor	bl, bl
mov	byte_4FFC, bl

loc_224B:
mov	byte_5003, bl
sub_222B endp




sub_224F proc near
push	si
mov	bh, 0
add	bx, word_4FFE
mov	si, bx
mov	di, word_5000
mov	byte_4FFB, 0
xor	bh, bh

loc_2263:
inc	bh
cmp	bh, byte_5004
ja	short loc_227F
mov	bl, [si]
push	bx
call	off_4D72
pop	bx
cmp	bl, [di]
jnz	short loc_227B
inc	byte_4FFB

loc_227B:
inc	si
inc	di
jmp	short loc_2263

loc_227F:
mov	bl, byte_4FFB
mov	byte_4FFB, 0
cmp	bl, byte_5004
jnz	short loc_2293
mov	byte_4FFB, 1

loc_2293:
pop	si
retn
sub_224F endp




sub_2295 proc near

; FUNCTION CHUNK AT 12E0 SIZE 00000008 BYTES

push	es
push	ds
pop	es
assume es:dseg
push	dx
push	si
push	cx
push	bx
push	ax
add	word_500A, 9
mov	ax, word_500C
cmp	word_500A, ax
jb	short loc_22AE
jmp	loc_2050

loc_22AE:
mov	ax, word_5008
call	sub_22C7
mov	di, ax
pop	ax
cld
stosw
pop	ax
stosw
pop	ax
stosw
pop	ax
stosw
pop	ax
stosb
mov	word_5008, di
pop	es
assume es:nothing
retn
sub_2295 endp




sub_22C7 proc near
push	ax
add	ax, 9
cmp	ax, word_4FBC
pop	ax
jb	short locret_22D5
mov	ax, word_4FBE

locret_22D5:
retn
sub_22C7 endp




sub_22D6 proc near
mov	dl, 0
cmp	word_500A, 0
jz	short locret_2300
sub	word_500A, 9
mov	ax, word_5006
call	sub_22C7
mov	si, ax
cld
lodsw
push	ax
lodsw
mov	bx, ax
lodsw
mov	cx, ax
lodsw
push	ax
lodsb
mov	dl, al
mov	word_5006, si
pop	si
pop	ax

locret_2300:
retn
sub_22D6 endp

align 2



sub_2302 proc near
mov	bx, word_4FC2
push	bx
push	dx
xchg	dx, bx
call	sub_232D
pop	bx
mov	word_4FC2, bx
xchg	dx, bx
call	sub_232D
pop	bx
mov	word_4FC2, bx
mov	bx, word_4FC0
push	cx
mov	cx, bx
call	sub_232D
pop	bx
mov	word_4FC0, bx
mov	cx, bx
sub_2302 endp




sub_232D proc near
push	si
push	di
push	cx
push	dx
call	sub_2364
mov	ax, word_4FB8
mov	word_4FC0, ax
mov	ax, word_4FBA
mov	word_4FC2, ax
pop	dx
pop	cx
pop	di
pop	si
retn
sub_232D endp

; START	OF FUNCTION CHUNK FOR sub_2364

loc_2345:
call	sub_2761
pushf
push	cx
jnb	short loc_2350
xchg	cx, word_4FC0

loc_2350:
inc	bx
push	bx
call	off_4D4A
pop	bx
call	off_4D6E
pop	cx
popf
jnb	short locret_2363
xchg	cx, word_4FC0

locret_2363:
retn
; END OF FUNCTION CHUNK	FOR sub_2364



sub_2364 proc near

; FUNCTION CHUNK AT 15D5 SIZE 0000001F BYTES

call	sub_2392
jz	short loc_236A
retn

loc_236A:
xchg	cx, word_4FC0
xchg	dx, word_4FC2
cmp	word_4FCC, 0FFFFh
jnz	short loc_237F
cmp	dx, word_4FC2
jz	short loc_2345

loc_237F:
mov	ax, word_4FC0
mov	bx, word_4FC2
mov	di, word_4FCC
call	sub_27A9
mov	word_4FCC, di
retn
sub_2364 endp




sub_2392 proc near
call	sub_23D8

loc_2395:
or	ax, ax
jz	short locret_23EE
test	al, ah
jnz	short locret_23EE
or	al, al
jnz	short loc_23AB
xchg	cx, word_4FC0
xchg	dx, word_4FC2
xchg	al, ah

loc_23AB:
mov	bx, word_500E
sar	al, 1
jb	short loc_23D0
mov	bx, word_5010
sar	al, 1
jb	short loc_23D0
mov	bx, word_5012
sar	al, 1
jb	short loc_23CB
sar	al, 1
jnb	short loc_23D3
mov	bx, word_5014

loc_23CB:
call	sub_2460
jmp	short loc_23D3

loc_23D0:
call	sub_23EF

loc_23D3:
call	sub_270C
jmp	short loc_2395
sub_2392 endp




sub_23D8 proc near
push	cx
push	dx
call	sub_270C
xchg	ah, al
mov	cx, word_4FC0
mov	dx, word_4FC2
call	sub_270C
xchg	ah, al
pop	dx
pop	cx

locret_23EE:
retn
sub_23D8 endp




sub_23EF proc near
push	ax
push	bx
sub	bx, cx
mov	si, bx
mov	bx, word_4FC0
sub	bx, cx
mov	cx, si
mov	si, dx
mov	ax, word_4FC2
sub	ax, dx
cwd
call	sub_2425
push	dx
imul	cx
add	si, ax
pop	ax
imul	cx
shl	ax, 1
rcl	dx, 1
call	sub_2425
or	ax, ax
js	short loc_241C
inc	ax

loc_241C:
sar	ax, 1
add	ax, si
mov	dx, ax
pop	cx
pop	ax
retn
sub_23EF endp




sub_2425 proc near
push	ax
or	ax, dx
pop	ax
jz	short locret_245F
push	ax
push	bx
push	cx
push	dx
xor	cx, cx
or	bx, bx
jns	short loc_2437
neg	bx

loc_2437:
or	dx, dx
jns	short loc_2445
not	ax
not	dx
add	ax, 1
adc	dx, 0

loc_2445:
inc	cl
shr	bx, 1
jnz	short loc_2445
or	dx, dx
jz	short loc_2453
mov	ch, 10h
mov	ax, dx

loc_2453:
inc	ch
shr	ax, 1
jnz	short loc_2453
pop	dx
pop	cx
pop	bx
pop	ax
idiv	bx

locret_245F:
retn
sub_2425 endp




sub_2460 proc near
call	sub_2466
call	sub_23EF
sub_2460 endp




sub_2466 proc near
xchg	cx, dx
push	word_4FC0
push	word_4FC2
pop	word_4FC0
pop	word_4FC2
retn
sub_2466 endp




sub_2479 proc near
mov	ax, word_4FB8
mov	word_4FC0, ax
mov	ax, word_4FBA
mov	word_4FC2, ax
jmp	sub_232D
sub_2479 endp




sub_2488 proc near
cmp	cx, word_500E
jl	short loc_24A2
cmp	cx, word_5010
jg	short loc_24A2
cmp	dx, word_5012
jl	short loc_24A2
cmp	dx, word_5014
jg	short loc_24A2
stc
retn

loc_24A2:
clc
retn
sub_2488 endp




sub_24A4 proc near
push	ax
push	bx
push	cx
push	dx
xor	cx, cx
mov	ax, word_502A
cmp	byte_501D, 0
jnz	short loc_24BB
mov	cx, word_500E
mov	ax, word_5010

loc_24BB:
sub	ax, cx
inc	ax
shr	ax, 1
add	cx, ax
mov	word_4FB8, cx
xor	dx, dx
mov	ax, word_502C
cmp	byte_501D, 0
jnz	short loc_24D9
mov	dx, word_5012
mov	ax, word_5014

loc_24D9:
sub	ax, dx
inc	ax
shr	ax, 1
add	dx, ax
mov	word_4FBA, dx
pop	dx
pop	cx
pop	bx
pop	ax
retn
sub_24A4 endp




sub_24E9 proc near
push	bx
push	ax
push	cx
push	dx
push	si
push	di
mov	word_4FCC, 0FFFFh
call	sub_24FF
pop	di
pop	si
pop	dx
pop	cx
pop	ax
pop	bx
retn
sub_24E9 endp




sub_24FF proc near
mov	word ptr unk_501C, 0
call	sub_2643
jnz	short loc_250B
retn

loc_250B:
call	sub_2638
mov	word_502A, cx
mov	word_502C, dx
xor	ax, ax
mov	word_500E, ax
mov	word_5012, ax
mov	word_5016, ax
mov	word_5018, ax
mov	word_5010, cx
mov	word_5014, dx
sub_24FF endp




sub_252C proc near
mov	ax, word_500E
mov	bx, word_5010
mov	cx, word_5012
mov	dx, word_5014
push	bp
call	sub_2842
call	sub_24A4
mov	cx, word_4FB8
mov	dx, word_4FBA
call	off_4D4A
pop	bp
retn
sub_252C endp

pushf
push	ax
push	bx
xor	ax, ax
call	sub_24E9
stc
mov	byte_4FB2, 0
pop	bx
pop	ax
popf
retn
push	es
xor	bx, bx
mov	es, bx
assume es:seg000
mov	al, byte ptr es:loc_410
mov	ah, al
mov	word_5039, ax
pop	es
assume es:nothing
mov	ah, 0Fh
call	sub_4B5C
mov	dl, bh
mov	dh, bh
mov	byte_4D0E, al
mov	byte ptr word_4D15, al
mov	word_4D7B, dx
call	sub_2588
retf



sub_2588 proc near
push	ax
push	bx
push	cx
push	es
push	di
cld
mov	ax, 2
mov	byte_503B, al
mov	word_503D, 10h
mov	byte_503C, al
mov	byte_5038, ah
push	ds
pop	es
assume es:dseg
mov	di, 367h
xor	bx, bx
mov	ah, 1Bh
call	sub_4B5C
cmp	al, 1Bh
jnz	short loc_25D4
mov	byte_503C, 18h
mov	bl, byte_4F58
les	di, [di]
assume es:nothing
mov	byte_503B, 8
test	byte ptr es:[di+2], 4
jz	short loc_260C
mov	byte_503B, 10h
mov	byte_5038, 1
jmp	short loc_260C

loc_25D4:
mov	bl, 10h
mov	ah, 12h
call	sub_4B5C
test	bl, 0FCh
jnz	short loc_261A
mov	al, byte ptr word_5039+1
and	ax, 30h
cmp	al, 30h	; '0'
jnz	short loc_25EC
inc	ah

loc_25EC:
cmp	ah, bh
jnz	short loc_261A
mov	byte_503B, 4
mov	byte_5038, 1
and	cl, 0Fh
sub	cl, 9
jb	short loc_260C
mov	ch, 4
jz	short loc_2608
mov	ch, 1

loc_2608:
mov	byte_503C, ch

loc_260C:
inc	bl
xor	bh, bh
mov	cl, 6
shl	bx, cl
mov	word_503D, bx
jmp	short loc_2631

loc_261A:
mov	al, byte ptr word_5039+1
and	al, 30h
cmp	al, 30h	; '0'
jnz	short loc_2631
dec	byte_503C
dec	byte_503B
mov	word_503D, 4

loc_2631:
pop	di
pop	es
pop	cx
pop	bx
pop	ax
retn
sub_2588 endp

retn



sub_2638 proc near
mov	cx, word_4D19
dec	cx
mov	dx, word_4D1B
dec	dx
retn
sub_2638 endp




sub_2643 proc near
cmp	byte_4D14, 0
retn
sub_2643 endp

align 2



sub_264A proc near
call	off_4D56
mov	ax, word_5010
mov	word_4FC0, ax
mov	ax, word_5014
mov	word_4FC2, ax
mov	cx, word_500E
mov	dx, word_5012
call	sub_2668
jmp	sub_252C
sub_264A endp




sub_2668 proc near
call	sub_26BE
jb	short loc_26B7
call	sub_272E
xchg	cx, word_4FC0
xchg	dx, word_4FC2
call	sub_272E
call	sub_276C
jnb	short loc_2684
xchg	dx, word_4FC2

loc_2684:
inc	bx
push	bp
push	bx
call	sub_2761
jnb	short loc_2690
xchg	cx, word_4FC0

loc_2690:
mov	al, dl
and	al, 7
mov	byte_4FFC, al
inc	bx
push	bx
call	off_4D4A
pop	bx
pop	cx

loc_269F:
push	cx
push	bx
call	off_4D6E
call	off_4D54
pop	bx
pop	cx
inc	byte_4FFC
and	byte_4FFC, 7
loop	loc_269F
pop	bp

loc_26B7:
mov	word_4FCC, 0FFFFh
retn
sub_2668 endp




sub_26BE proc near
push	dx
mov	ax, word_4FC0
mov	dx, cx
cmp	ax, dx
jge	short loc_26C9
xchg	ax, dx

loc_26C9:
mov	word_502E, ax
mov	word_5030, dx
pop	dx
push	dx
mov	ax, word_4FC2
cmp	ax, dx
jge	short loc_26DA
xchg	ax, dx

loc_26DA:
mov	word_5032, ax
mov	word_5034, dx
call	sub_26E6
pop	dx

locret_26E5:
retn
sub_26BE endp




sub_26E6 proc near
mov	ax, word_502E
cmp	ax, word_500E
jl	short locret_26E5
mov	ax, word_5010
cmp	ax, word_5030
jl	short locret_26E5
mov	ax, word_5032
cmp	ax, word_5012
jl	short locret_26E5
mov	ax, word_5014
cmp	ax, word_5034
jl	short locret_26E5
clc
retn
sub_26E6 endp




sub_270C proc near
xor	al, al
cmp	word_500E, cx
jle	short loc_2715
inc	ax

loc_2715:
cmp	word_5010, cx
jge	short loc_271D
or	al, 2

loc_271D:
cmp	word_5012, dx
jle	short loc_2725
or	al, 4

loc_2725:
cmp	word_5014, dx
jge	short locret_272D
or	al, 8

locret_272D:
retn
sub_270C endp




sub_272E proc near
call	sub_270C
or	al, al
jz	short loc_275C
mov	bx, word_500E
test	al, 1
jnz	short loc_2745
mov	bx, word_5010
test	al, 2
jz	short loc_2747

loc_2745:
mov	cx, bx

loc_2747:
lahf
mov	bx, word_5012
test	al, 4
jnz	short loc_2758
mov	bx, word_5014
test	al, 8
jz	short loc_275B

loc_2758:
lahf
mov	dx, bx

loc_275B:
sahf

loc_275C:
stc
jz	short locret_2760
cmc

locret_2760:
retn
sub_272E endp




sub_2761 proc near
mov	bx, word_4FC0
sub	bx, cx

loc_2767:
jnb	short locret_276B
neg	bx

locret_276B:
retn
sub_2761 endp




sub_276C proc near
mov	bx, word_4FC2
sub	bx, dx
jmp	short loc_2767
sub_276C endp




sub_2774 proc near
push	si
push	di
push	es
push	ds
push	ds
pop	es
assume es:dseg
cmp	cx, 27h	; '''
jnz	short loc_278C
push	cx
mov	di, 18Ah
mov	cx, 17h
mov	ax, 8
rep stosw
pop	cx

loc_278C:
mov	di, 154h
push	cs
pop	ds
assume ds:seg001
mov	si, bx
cld
rep movsb
push	es
pop	ds
assume ds:dseg
mov	al, byte_4D25
call	off_4D56
mov	byte_5060, 0
pop	ds
pop	es
assume es:nothing
pop	di
pop	si
retn
sub_2774 endp




sub_27A9 proc near
push	si
push	es
push	bp
mov	byte_4FB0, 1
cmp	ax, cx
jle	short loc_27B8
xchg	ax, cx
xchg	bx, dx

loc_27B8:
sub	cx, ax
sub	dx, bx
mov	si, dx
jge	short loc_27C2
neg	si

loc_27C2:
push	cx
push	dx
mov	cx, ax
mov	dx, bx
call	off_4D4A
call	off_4D5E
pop	dx
pop	cx
or	dx, dx
mov	dx, word_4D3D
jns	short loc_27DC
neg	dx

loc_27DC:
mov	word_5050, dx
mov	bp, word ptr dword_5042
cmp	si, cx
jge	short loc_280B
mov	ax, si
shl	ax, 1
shl	ax, 1
mov	word_504C, ax
sub	ax, cx
xchg	ax, si
sub	ax, cx
shl	ax, 1
shl	ax, 1
mov	word_504E, ax
inc	cx
mov	ax, word_5040
mov	bh, al
xor	al, al
call	off_4D62
jmp	short loc_283A

loc_280B:
or	cx, cx
jz	short loc_2830
mov	ax, cx
shl	cx, 1
shl	cx, 1
mov	word_504C, cx
xchg	cx, si
sub	si, cx
sub	ax, cx
shl	ax, 1
shl	ax, 1
mov	word_504E, ax
inc	cx
mov	ax, word_5040
call	off_4D64
jmp	short loc_283A

loc_2830:
mov	cx, si
inc	cx
mov	ax, word_5040
call	off_4D66

loc_283A:
call	off_4D60
pop	bp
pop	es
pop	si
retn
sub_27A9 endp




sub_2842 proc near
push	di
push	word ptr dword_5042
push	bx
push	ax
xor	ah, ah
mov	al, byte ptr word_5040
mov	di, ax
push	dx
mov	dx, cx
xor	cx, cx
call	off_4D4A
mov	cx, word ptr dword_5042
add	cx, word_4D3D
mov	word_5052, cx
pop	dx
xor	cx, cx
call	off_4D4A
mov	cx, word ptr dword_5042
mov	word_5054, cx
pop	ax
mov	cx, ax
xor	dx, dx
call	off_4D4A
mov	cx, word ptr dword_5042
mov	word_5056, cx
mov	cl, byte ptr word_5040
mov	byte_505A, cl
pop	bx
mov	cx, bx
xor	dx, dx
call	off_4D4A
mov	cx, word ptr dword_5042
mov	word_5058, cx
mov	cl, byte ptr word_5040
mov	byte_505B, cl
mov	ax, di
mov	byte ptr word_5040, al
pop	word ptr dword_5042
pop	di
retn
sub_2842 endp

mov	bx, word_4D46
mov	dx, word_4D48
retn
push	ax
mov	ax, ds
add	ah, 10h
mov	ds, ax
assume ds:nothing
pop	ax
retn
push	ax
mov	ax, es
add	ah, 10h
mov	es, ax
assume es:nothing
pop	ax
retn
push	ax
mov	ax, ds
sub	ah, 10h
mov	ds, ax
assume ds:dseg
pop	ax
retn
out	dx, al
xchg	al, ah
inc	dx
out	dx, al
dec	dx
retn
push	ax
push	dx
mov	dx, 3C4h
mov	al, 2
out	dx, al		; EGA: sequencer address reg
			; map mask: data bits 0-3 enable writes	to bit planes 0-3
inc	dx
mov	al, 0Fh
out	dx, al		; EGA port: sequencer data register
mov	dx, 3CEh
mov	al, 1
out	dx, al		; EGA: graph 1 and 2 addr reg:
			; enable set/reset
inc	dx
xor	al, al
out	dx, al		; EGA port: graphics controller	data register
dec	dx
mov	al, 2
out	dx, al		; EGA: graph 1 and 2 addr reg:
			; color	compare.
			; Data bits 0-3	select color for read mode 01
inc	dx
xor	al, al
out	dx, al		; EGA port: graphics controller	data register
dec	dx
mov	ax, 3
out	dx, al		; EGA: graph 1 and 2 addr reg:
			; data rotate and function select for write mode 00. Bits:
			; 0-2: set rotate count	for write mode 00
			; 3-4: fn for write modes 00 and 02
			;      00=no change; 01=AND; 10=OR; 11=XOR
inc	dx
xor	al, al
out	dx, al		; EGA port: graphics controller	data register
dec	dx
mov	al, 8
out	dx, al		; EGA: graph 1 and 2 addr reg:
			; bit mask
			; Bits 0-7 select bits to be masked in all planes
inc	dx
mov	al, 0FFh
out	dx, al		; EGA port: graphics controller	data register
dec	dx
mov	al, 7
out	dx, al		; EGA: graph 1 and 2 addr reg:
			; color	masking	disable
			; bits 0-3 disable planes from compare logic in	read mode 01
inc	dx
mov	al, 0Fh
out	dx, al		; EGA port: graphics controller	data register
dec	dx
mov	al, 5
out	dx, al		; EGA: graph 1 and 2 addr reg:
			; mode register.Data bits:
			; 0-1: Write mode 0-2
			; 2: test condition
			; 3: read mode:	1=color	compare, 0=direct
			; 4: 1=use odd/even RAM	addressing
			; 5: 1=use CGA mid-res map (2-bits/pixel)
inc	dx
mov	al, byte_4D26
and	al, 10h
out	dx, al		; EGA port: graphics controller	data register
pop	dx
pop	ax
retn
mov	al, byte_4D3B
retn



sub_2928 proc near
pushf
mov	word ptr dword_5068, bx
mov	word ptr dword_5068+2, es
mov	word_5062, cx
mov	bl, byte ptr word_5040
xor	dx, dx
xor	bh, bh
mov	ch, cl
mov	cl, byte_4D3B

loc_2943:
shl	bl, cl
jb	short loc_294F
or	bh, bl
add	ch, cl
add	dl, cl
jmp	short loc_2943

loc_294F:
mov	bl, 0FFh
popf
jb	short loc_2969
mov	cx, word_5062
and	cx, 7
jz	short loc_2961
shr	bl, cl
not	bl

loc_2961:
mov	dh, bl
mov	word_5064, dx
jmp	short locret_2982

loc_2969:
not	bh
mov	cl, ch
and	cx, 7
jz	short loc_2976
shr	bl, cl
not	bl

loc_2976:
mov	word_5064, dx
mov	word_5066, bx
call	off_4D68

locret_2982:
retn
sub_2928 endp




sub_2983 proc near
push	si
push	di
push	bp
cld
mov	bl, byte_4D3C
les	di, dword_5068
assume es:nothing
push	ds
lds	si, dword_5042
xor	bh, bh

loc_2996:
mov	cx, ss:4A4h
mov	bp, ss:4A2h
push	bx
push	si
call	word ptr ss:1AAh
pop	si
pop	bx
inc	bh
dec	bl
jnz	short loc_2996
pop	ds
mov	word ptr dword_5068+2, es
mov	word ptr dword_5068, di
pop	bp
pop	di
pop	si
retn
sub_2983 endp




sub_29BC proc near
push	si
push	di
push	bp
cld
mov	bl, byte_4D3C
les	di, dword_5042
push	ds
lds	si, dword_5068
xor	bh, bh

loc_29CF:
mov	cx, ss:4A4h
mov	bp, ss:4A2h
mov	dx, ss:4A6h
push	bx
push	di
call	word ptr ss:1ACh
pop	di
pop	bx
inc	bh
dec	bl
jnz	short loc_29CF
mov	word ptr ss:4AAh, ds
pop	ds
mov	word ptr dword_5068, si
pop	bp
pop	di
pop	si
retn
sub_29BC endp




sub_29FB proc near
cmp	byte_5047, 1
mov	byte_5047, 0
jnz	short loc_2A0B
dec	byte_5047

loc_2A0B:
mov	ch, byte ptr word_5040+1
call	off_4D56
mov	al, byte ptr word_5040+1
mov	byte_5046, al
mov	byte ptr word_5040+1, ch
retn
sub_29FB endp




sub_2A1E proc near
mov	al, byte_4D3C
mov	byte_5047, 1
retn
sub_2A1E endp




sub_2A27 proc near
mov	word ptr dword_5042, bx
mov	byte ptr word_5040, al
retn
sub_2A27 endp




sub_2A2F proc near
mov	al, byte ptr word_5040
mov	bx, word ptr dword_5042
retn
sub_2A2F endp

db 4 dup(0), 28h, 19h, 40h, 1, 0C8h, 2 dup(0)
db 0B8h, 0Fh, 3Fh, 2, 80h, 0, 2	dup(7),	0
db 3Ah,	3Ch
dw seg seg001
dd byte_3681
retn	91Dh
db 1Eh,	60h, 3Ch, 97h, 3Ch, 0CCh, 3Ch, 17h
db 3Dh,	0, 2, 0, 50h, 19h, 80h,	2, 0C8h
db 2 dup(0), 0B8h, 0Fh,	3Fh, 4,	0, 1, 3
db 7, 0, 3Ah, 3Ch
dw seg seg001
dd byte_3681
retn	91Dh
db 1Eh,	60h, 3Ch, 97h, 3Ch, 0CCh, 3Ch, 17h
db 3Dh,	0, 7, 0, 50h, 19h, 0D0h, 2, 5Eh
db 1, 0, 0B0h, 0Fh, 2, 4, 0, 1,	0, 7, 0
db 3Dh,	1Dh
dw seg seg001
db 4 dup(0), 0C2h, 1Dh,	9, 1Eh,	67h, 3Ch
db 9Eh,	3Ch, 19h, 1Eh, 17h, 3Dh, 0, 7 dup(8)
db 0, 7	dup(18h)
; START	OF FUNCTION CHUNK FOR sub_2B01

loc_2ABD:
mov	cx, 27h	; '''
push	ax
call	sub_2774
pop	ax
mov	word_4D15, ax
test	byte_503B, 23h
jnz	short loc_2AEE
mov	ah, 7
cmp	al, 1
jbe	short loc_2ADE
cmp	word_503D, 40h ; '@'
ja	short loc_2ADE
shr	ah, 1

loc_2ADE:
mov	byte_4D24, ah
test	byte_503C, 2
jz	short loc_2AEE
mov	byte_4D20, 0Fh

loc_2AEE:
cmp	al, 7
jz	short loc_2AFF
test	byte_503C, 1Ch
jz	short loc_2AFF
mov	word_4D27, 3C4Ah

loc_2AFF:
clc
retn
; END OF FUNCTION CHUNK	FOR sub_2B01



sub_2B01 proc near

; FUNCTION CHUNK AT 1D4D SIZE 00000044 BYTES

xor	ax, ax

loc_2B03:
mov	bx, 1CC8h

loc_2B06:
test	byte_503C, 1
jnz	short loc_2B0F
jmp	short loc_2ABD

loc_2B0F:
stc
retn
sub_2B01 endp




sub_2B11 proc near
mov	ax, 101h
jmp	short loc_2B03
sub_2B11 endp




sub_2B16 proc near
mov	ax, 2

loc_2B19:
mov	bx, 1CEFh
jmp	short loc_2B06
sub_2B16 endp




sub_2B1E proc near
mov	ax, 103h
jmp	short loc_2B19
sub_2B1E endp




sub_2B23 proc near
test	byte_503C, 9
jz	short loc_2B0F
mov	ax, 7
mov	bx, 1D16h
jmp	short loc_2ABD
sub_2B23 endp

db 0F6h, 6, 7Bh, 4, 18h, 74h, 17h, 0B8h
db 2, 12h, 80h,	3Eh, 58h, 1, 2Bh, 75h, 3
db 0B8h, 1, 12h, 0B3h, 30h, 55h, 56h, 57h
db 0CDh, 10h, 5Fh, 5Eh,	5Dh, 0A0h, 55h,	1
db 55h,	56h, 57h, 0B4h,	0, 0CDh, 10h, 5Fh
db 5Eh,	5Dh, 80h, 3Eh, 58h, 1, 2Bh, 74h
db 5, 80h, 3Eh,	58h, 1,	32h, 75h, 0Dh, 0B8h
db 12h,	11h, 32h, 0DBh,	55h, 56h, 57h, 0CDh
db 10h,	5Fh, 5Eh, 5Dh, 0C3h, 0A3h, 0BBh
db 1, 8Ah, 0C4h, 55h, 56h, 57h,	0B4h, 5
db 0CDh, 10h, 5Fh, 5Eh,	5Dh, 0C3h, 3Ah,	1Eh
db 5Fh,	1, 77h,	18h, 0Ah, 0F2h,	0Ah, 0F4h
db 75h,	10h, 3Ah, 6, 60h, 1, 77h, 0Ch, 3Ch
db 1, 72h, 6, 0B0h, 8, 74h, 2, 0B0h, 18h
db 0F8h, 0C3h, 0F9h, 0C3h, 0, 1, 4, 0, 28h
db 19h,	40h, 1,	0C8h, 2	dup(0),	0B8h, 3
db 0Fh,	10h, 0,	4, 0, 3, 0, 2, 1Fh
dw seg seg001
dd byte_2C78
db 97h,	1Fh, 0B5h, 1Fh,	60h, 3Ch, 0BCh,	1Fh
db 0CCh, 3Ch, 17h, 3Dh,	2, 1, 50h, 0, 0C0h
db 3, 4, 0, 2, 3, 0, 0D6h, 0, 34h, 1, 25h
db 20h,	60h, 3Dh, 71h, 3Dh, 88h, 3Dh, 9Ah
db 3Dh,	0B1h, 3Dh, 91h,	20h, 31h, 2Fh, 4Ch
db 2Fh,	5Dh, 2Fh, 73h, 2Fh, 77h, 2Fh, 0D3h
db 32h,	3Ch, 33h, 7Eh, 33h, 8Ch, 2Fh, 0C1h
db 2Fh,	0E7h, 2Fh, 49h,	30h, 0C3h, 3Dh,	15h
db 31h,	46h, 31h, 0D6h,	31h, 2,	6, 0, 50h
db 19h,	80h, 2,	0C8h, 2	dup(0),	0B8h, 1
db 0Fh,	10h, 0,	4, 0, 1, 0, 6, 1Fh
dw seg seg001
dd byte_2C84
db 97h,	1Fh, 0B5h, 1Fh,	60h, 3Ch, 97h, 3Ch
db 0CCh, 3Ch, 17h, 3Dh,	2 dup(1), 50h, 0
db 80h,	1, 8, 0, 3, 7, 0, 6Bh, 0, 68h, 2
db 5Bh,	20h, 64h, 3Dh, 71h, 3Dh, 88h, 3Dh
db 9Ah,	3Dh, 0B1h, 3Dh,	26h, 2Fh, 31h, 2Fh
db 4Ch,	2Fh, 5Dh, 2Fh, 73h, 2Fh, 77h, 2Fh
db 0D3h, 32h, 3Ch, 33h,	7Eh, 33h, 8Ch, 2Fh
db 0C1h, 2Fh, 0E7h, 2Fh, 49h, 30h, 0C3h
db 3Dh,	15h, 31h, 46h, 31h, 0D6h, 31h, 0
db 3Bh,	3Dh, 3Fh, 0, 3Fh
byte_2C78 db 3 dup(0), 15h, 3 dup(3Fh),	15h, 4 dup(3Fh)
byte_2C84 db 3 dup(0), 3 dup(3Fh)



sub_2C8A proc near
mov	ax, 101h
jmp	short loc_2C92
sub_2C8A endp




sub_2C8F proc near
mov	ax, 1

loc_2C92:
test	byte_503B, 1Eh
jz	short loc_2CC7
test	byte_503C, 16h
jz	short loc_2CC7
mov	al, ah
add	al, 4
mov	bx, 1E3Ah
mov	cx, 64h	; 'd'
push	ax
call	sub_2774
pop	ax
mov	word_4D15, ax
test	byte_503B, 8
jz	short loc_2CC5
mov	word_4D2B, 2911h
mov	off_4D37, 200Ah

loc_2CC5:
jmp	short loc_2CF3

loc_2CC7:
stc
retn
sub_2C8F endp




sub_2CC9 proc near
test	byte_503B, 1Eh
jz	short loc_2CC7
test	byte_503C, 16h
jz	short loc_2CC7
mov	bx, 1E9Eh
mov	cx, 64h	; 'd'
call	sub_2774
test	byte_503B, 8
jz	short loc_2CF3
mov	word_4D2B, 2911h
mov	off_4D37, 2CF3h

loc_2CF3:
mov	word_5070, 2000h
mov	word_5072, 1FB0h
mov	word_5074, 3FB0h
clc
retn
sub_2CC9 endp

mov	al, byte ptr word_4D15
mov	ah, 0
call	sub_4B5C
cmp	byte_4D14, 1
jnz	short locret_2D24
test	byte_503B, 14h
jz	short locret_2D24
xor	bx, bx
mov	ah, 0Bh
call	sub_4B5C

locret_2D24:
retn
mov	ax, word_4D1D
mov	word ptr dword_5042+2, ax
retn
db 3Dh,	2 dup(0FFh), 75h, 4, 3Bh, 0D0h,	74h
db 44h,	50h, 52h, 53h, 0E8h, 0CCh, 1Ch,	5Bh
db 5Ah,	58h, 72h, 39h, 0Ah, 0DBh, 75h, 35h
db 0E8h, 0F5h, 1Ch, 0F6h, 6, 7Bh, 4, 18h
db 74h,	16h, 0B3h, 10h,	86h, 0F0h, 86h,	0ECh
db 86h,	0CAh, 0B0h, 10h, 55h, 56h, 57h,	0B4h
db 10h,	0CDh, 10h, 5Fh,	5Eh, 5Dh, 0EBh,	15h
db 80h,	3Eh, 78h, 4, 0,	74h, 0Eh, 8Ah, 0F8h
db 0B0h, 1, 55h, 56h, 57h, 0B4h, 10h, 0CDh
db 10h,	5Fh, 5Eh, 5Dh, 0C3h, 80h, 0FBh,	3
db 77h,	14h, 0D0h, 0E3h, 74h, 3, 80h, 0C3h
db 9, 0F7h, 0C2h, 0C0h,	0FFh, 75h, 7, 0A9h
db 2 dup(0C0h),	75h, 2,	0F8h, 0C3h, 0F9h
db 0C3h, 33h, 0C0h, 0D1h, 0EAh,	0D1h, 0D8h
db 0D1h, 0E8h, 0D1h, 0E8h, 8Bh,	0DAh, 0D1h
db 0E2h, 0D1h, 0E2h, 3,	0D3h, 0D1h, 0E2h
db 0D1h, 0E2h, 0D1h, 0E2h, 0D1h, 0E2h, 3
db 0D0h, 8Bh, 0C1h, 0D1h, 0E8h,	0D1h, 0E8h
db 3, 0D0h, 89h, 16h, 82h, 4, 80h, 0E1h
db 3, 0D0h, 0E1h, 0B5h,	0C0h, 0D2h, 0EDh
db 88h,	2Eh, 80h, 4, 0C3h, 33h,	0C0h, 0D1h
db 0EAh, 0D1h, 0D8h, 0D1h, 0E8h, 0D1h, 0E8h
db 8Bh,	0DAh, 0D1h, 0E2h, 0D1h,	0E2h, 3
db 0D3h, 0D1h, 0E2h, 0D1h, 0E2h, 0D1h, 0E2h
db 0D1h, 0E2h, 3, 0D0h,	8Bh, 0C1h, 0D1h
db 0E8h, 0D1h, 0E8h, 0D1h, 0E8h, 3, 0D0h
db 89h,	16h, 82h, 4, 80h, 0E1h,	7, 0B5h
db 80h,	0D2h, 0EDh, 88h, 2Eh, 80h, 4, 0C3h
db 50h,	3Ah, 6,	5Fh, 1,	76h, 3,	0A0h, 5Fh
db 1, 0B1h, 2, 8Ah, 0E0h, 0D2h,	0E4h, 0Ah
db 0C4h, 0D2h, 0E4h, 0Ah, 0C4h,	0D2h, 0E4h
db 0Ah,	0C4h, 0A2h, 81h, 4, 58h, 0C3h, 7
db 0Dh,	0, 28h,	19h, 40h, 1, 0C8h, 2 dup(0)
db 0A0h, 2 dup(0Fh), 20h, 0, 2,	0, 0Fh,	2
db 3Ah,	3Ch
dw seg seg001
dd byte_3681
db 0A0h, 23h, 0C7h, 23h, 60h, 3Ch, 97h,	3Ch
db 0CCh, 3Ch, 17h, 3Dh,	1, 4, 28h, 0, 80h
db 1, 8, 0, 3, 7, 0, 0D6h, 0, 34h, 1, 9Eh
db 33h,	0D2h, 33h, 0DEh, 33h, 0E9h, 33h
db 0F2h, 33h, 0FDh, 33h, 6, 34h, 16h, 34h
db 66h,	34h, 92h, 34h, 0A6h, 34h, 6Fh, 1Bh
db 0BAh, 34h, 0FCh, 34h, 26h, 35h, 4Fh,	35h
db 75h,	35h, 0AAh, 35h,	40h, 36h, 0E8h,	36h
db 6Bh,	37h, 0D3h, 3Ah,	8Ah, 3Bh, 8, 0Eh
db 0, 50h, 19h,	80h, 2,	0C8h, 2	dup(0),	0A0h
db 2 dup(0Fh), 40h, 0, 4, 0, 0Fh, 2, 3Ah
db 3Ch
dw seg seg001
dd byte_3681
db 0A0h, 23h, 0C7h, 23h, 60h, 3Ch, 97h,	3Ch
db 0CCh, 3Ch, 17h, 3Dh,	1, 4, 50h, 0, 80h
db 1, 8, 0, 3, 7, 0, 6Bh, 0, 68h, 2, 0A8h
db 33h,	0D2h, 33h, 0DEh, 33h, 0E9h, 33h
db 0F2h, 33h, 0FDh, 33h, 6, 34h, 16h, 34h
db 66h,	34h, 92h, 34h, 0A6h, 34h, 6Fh, 1Bh
db 0BAh, 34h, 0FCh, 34h, 26h, 35h, 4Fh,	35h
db 75h,	35h, 0AAh, 35h,	40h, 36h, 0F8h,	36h
db 6Bh,	37h, 0D3h, 3Ah,	8Ah, 3Bh, 0Ah, 0Fh
db 0, 50h, 19h,	80h, 2,	5Eh, 1,	0, 0A0h
db 3, 8, 40h, 0, 8, 0, 3, 2, 8,	23h
dw seg seg001
db 4 dup(0), 0A0h, 23h,	0C7h, 23h, 67h,	3Ch
db 0E5h, 23h, 32h, 24h,	17h, 3Dh, 1, 2,	50h
db 0, 80h, 1, 8, 0, 3, 7, 0, 0BBh, 0, 60h
db 1, 0A8h, 33h, 0D2h, 33h, 0DEh, 33h, 0E9h
db 33h,	0F2h, 33h, 0FDh, 33h, 71h, 24h,	4Ah
db 34h,	66h, 34h, 92h, 34h, 0A6h, 34h, 6Fh
db 1Bh,	0BAh, 34h, 0FCh, 34h, 26h, 35h,	4Ch
db 35h,	73h, 35h, 0A5h,	35h, 40h, 36h, 0F8h
db 36h,	6Bh, 37h, 0Eh, 25h, 0FAh, 25h, 0Ah
db 0Fh,	0, 50h,	19h, 80h, 2, 5Eh, 1, 0,	0A0h
db 3, 8, 40h, 0, 8, 0, 3, 12h, 8, 23h
dw seg seg001
db 4 dup(0), 0A0h, 23h,	0C7h, 23h, 67h,	3Ch
db 0E5h, 23h, 32h, 24h,	17h, 3Dh, 1, 2,	50h
db 0, 80h, 1, 8, 0, 3, 7, 0, 0BBh, 0, 60h
db 1, 0A8h, 33h, 0D2h, 33h, 0DEh, 33h, 0E9h
db 33h,	0F2h, 33h, 0FDh, 33h, 71h, 24h,	55h
db 34h,	66h, 34h, 92h, 34h, 0A6h, 34h, 6Fh
db 1Bh,	0BAh, 34h, 0FCh, 34h, 26h, 35h,	49h
db 35h,	0E8h, 26h, 53h,	27h, 40h, 36h, 0F8h
db 36h,	6Bh, 37h, 0Eh, 25h, 0FAh, 25h, 9
db 10h,	0, 50h,	19h, 80h, 2, 5Eh, 1, 0,	0A0h
db 0Fh,	3Fh, 80h, 0, 8,	0, 0Fh,	2, 4Ah,	3Ch
dw seg seg001
dd byte_3681
db 0A0h, 23h, 0C7h, 23h, 60h, 3Ch, 97h,	3Ch
db 0CCh, 3Ch, 17h, 3Dh,	1, 4, 50h, 0, 80h
db 1, 8, 0, 3, 7, 0, 0BBh, 0, 60h, 1, 0A8h
db 33h,	0D2h, 33h, 0DEh, 33h, 0E9h, 33h
db 0F2h, 33h, 0FDh, 33h, 6, 34h, 16h, 34h
db 66h,	34h, 92h, 34h, 0A6h, 34h, 6Fh, 1Bh
db 0BAh, 34h, 0FCh, 34h, 26h, 35h, 4Fh,	35h
db 75h,	35h, 0AAh, 35h,	40h, 36h, 0F8h,	36h
db 6Bh,	37h, 0D3h, 3Ah,	8Ah, 3Bh, 9, 10h
db 0, 50h, 19h,	80h, 2,	5Eh, 1,	0, 0A0h
db 3, 3Fh, 40h,	0, 8, 0, 3, 12h, 18h, 23h
dw seg seg001
dd byte_308E
db 0A0h, 23h, 0C7h, 23h, 60h, 3Ch, 97h,	3Ch
db 5Ch,	24h, 17h, 3Dh, 1, 2, 50h, 0, 80h
db 1, 8, 0, 3, 7, 0, 0BBh, 0, 60h, 1, 0A8h
db 33h,	0D2h, 33h, 0DEh, 33h, 0E9h, 33h
db 0F2h, 33h, 0FDh, 33h, 71h, 24h, 55h,	34h
db 66h,	34h, 92h, 34h, 0A6h, 34h, 6Fh, 1Bh
db 0BAh, 34h, 0FCh, 34h, 26h, 35h, 49h,	35h
db 0E8h, 26h, 53h, 27h,	40h, 36h, 0F8h,	36h
db 6Bh,	37h, 0Eh, 25h, 0FAh, 25h, 0, 8,	2 dup(0)
db 2 dup(18h), 3 dup(0), 8, 3 dup(0), 18h
db 3 dup(0), 3Bh, 2 dup(0), 3Dh, 3Fh
byte_308E db 3 dup(0), 15h, 3 dup(3Fh),	15h, 4 dup(3Fh)



sub_309A proc near
mov	bx, 20B0h
jmp	short loc_30A2
sub_309A endp




sub_309F proc near
mov	bx, 2114h

loc_30A2:
test	byte_503C, 16h
jz	short loc_310E
jmp	short loc_30BF
sub_309F endp




sub_30AB proc near
test	byte_503C, 14h
jz	short loc_310E
mov	bx, 2240h
cmp	word_503D, 40h ; '@'
ja	short loc_30BF
mov	bx, 22A4h

loc_30BF:
test	byte_503B, 14h
jz	short loc_310E
mov	cx, 64h	; 'd'
call	sub_2774
mov	ax, word_503D
div	byte_4D21
dec	al
mov	byte_4D24, al
clc
retn
sub_30AB endp




sub_30DA proc near
test	byte_503C, 9
jz	short loc_310E
mov	bx, 2178h
cmp	word_503D, 40h ; '@'
ja	short loc_30EE
mov	bx, 21DCh

loc_30EE:
test	byte_503B, 14h
jz	short loc_310E
mov	cx, 64h	; 'd'
call	sub_2774
mov	ax, word_503D
shr	ax, 1
div	byte_4D21
sub	al, 1
adc	al, 0
mov	byte_4D24, al
clc
jmp	short locret_310F

loc_310E:
stc

locret_310F:
retn
sub_30DA endp

db 0A0h, 55h, 1, 55h, 56h, 57h,	0B4h, 0
db 0CDh, 10h, 5Fh, 5Eh,	5Dh, 80h, 3Eh, 58h
db 1, 2Bh, 75h,	0Fh, 0B2h, 2Bh,	0B8h, 23h
db 11h,	32h, 0DBh, 55h,	56h, 57h, 0CDh,	10h
db 5Fh,	5Eh, 5Dh, 0E8h,	0A9h, 0F7h, 0C3h
db 0A3h, 0BBh, 1, 50h, 8Ah, 0C4h, 55h, 56h
db 57h,	0B4h, 5, 0CDh, 10h, 5Fh, 5Eh, 5Dh
db 58h,	98h, 0F7h, 26h,	62h, 1,	3, 6, 5Dh
db 1, 0A3h, 84h, 4, 0C3h, 3Dh, 2 dup(0FFh)
db 75h,	4, 3Bh,	0D0h, 74h, 31h,	0E8h, 41h
db 0, 72h, 2Ch,	32h, 0FFh, 88h,	87h, 0DCh
db 4, 88h, 0A7h, 0E4h, 4, 8Ah, 0F8h, 8Ah
db 0C3h, 4, 8, 50h, 32h, 0C0h, 55h, 56h
db 57h,	0B4h, 10h, 0CDh, 10h, 5Fh, 5Eh,	5Dh
db 58h,	93h, 32h, 0C0h,	55h, 56h, 57h, 0B4h
db 10h,	0CDh, 10h, 5Fh,	5Eh, 5Dh, 0F8h,	0C3h
db 3 dup(0), 8,	0, 18h,	8, 0, 3	dup(8),	2 dup(18h)
db 0, 18h, 8, 2	dup(18h), 3Ah, 1Eh, 5Fh
db 1, 77h, 33h,	0Ah, 0F2h, 0Ah,	0F4h, 75h
db 2Dh,	3Ah, 6,	60h, 1,	77h, 27h, 80h, 0FBh
db 2, 72h, 3, 80h, 0C3h, 2, 57h, 0BFh, 20h
db 24h,	32h, 0E4h, 0D0h, 0E0h, 3, 0F8h,	2Eh
db 8Bh,	5, 5Fh,	0F8h, 0C3h, 0E8h, 6Dh, 18h
db 72h,	0Ah, 80h, 0FBh,	2, 72h,	3, 80h,	0C3h
db 2, 0F8h, 0C3h, 0F9h,	0C3h, 0, 3, 0Ch
db 0Fh,	50h, 53h, 3Ah, 6, 5Fh, 1, 76h, 3
db 0A0h, 5Fh, 1, 0BBh, 6Dh, 24h, 2Eh, 0D7h
db 0A2h, 81h, 4, 0F8h, 5Bh, 58h, 0C3h, 52h
db 0BAh, 0CEh, 3, 0B0h,	7, 0EEh, 42h, 0B0h
db 0AAh, 0F7h, 0C6h, 1,	0, 75h,	2, 0D0h
db 0C8h, 0EEh, 26h, 8Ah, 0Ch, 22h, 0CBh
db 32h,	0CBh, 75h, 27h,	0Ah, 0FFh, 74h,	21h
db 0Bh,	0FFh, 74h, 10h,	4Eh, 0D0h, 0C8h
db 0EEh, 26h, 8Ah, 0Ch,	0F6h, 0D1h, 0Ah
db 0C9h, 75h, 12h, 4Fh,	75h, 0F0h, 4Eh,	0D0h
db 0C8h, 0EEh, 26h, 8Ah, 0Ch, 22h, 0CFh
db 32h,	0CFh, 75h, 2, 32h, 0C9h, 5Ah, 0C3h
db 52h,	0BAh, 0CEh, 3, 0B0h, 7,	0EEh, 42h
db 0B0h, 0AAh, 0F7h, 0C6h, 1, 0, 75h, 2
db 0D0h, 0C8h, 0EEh, 26h, 8Ah, 0Ch, 22h
db 0CBh, 32h, 0CBh, 75h, 23h, 0Bh, 0FFh
db 74h,	10h, 46h, 0D0h,	0C8h, 0EEh, 26h
db 8Ah,	0Ch, 0F6h, 0D1h, 0Ah, 0C9h, 75h
db 12h,	4Fh, 75h, 0F0h,	46h, 0D0h, 0C8h
db 0EEh, 26h, 8Ah, 0Ch,	22h, 0CFh, 32h,	0CFh
db 75h,	2, 32h,	0C9h, 5Ah, 0C3h, 6, 0E8h
db 7Bh,	12h, 0D0h, 0C5h, 73h, 3, 4Eh, 78h
db 6, 3Bh, 36h,	9Ch, 4,	73h, 3,	0E9h, 0D3h
db 0, 75h, 9, 3Ah, 2Eh,	9Ah, 4,	76h, 3,	0E9h
db 0C8h, 0, 8Bh, 0FEh, 8Ah, 0DDh, 0BDh,	2 dup(0FFh)
db 32h,	0E4h, 0B1h, 0AAh, 0F7h,	0C6h, 1
db 0, 75h, 2, 0D0h, 0C9h, 0BAh,	0CEh, 3
db 0B0h, 7, 0EEh, 42h, 8Ah, 0C1h, 0EEh,	26h
db 8Ah,	5, 84h,	0C5h, 74h, 7, 32h, 0C9h
db 8Ah,	0D9h, 0E9h, 9Dh, 0, 3Bh, 3Eh, 9Ch
db 4, 75h, 4, 8Ah, 26h,	9Ah, 4,	84h, 0C5h
db 75h,	14h, 84h, 0E5h,	75h, 10h, 0D0h,	0C5h
db 73h,	0F4h, 4Fh, 45h,	0D0h, 0C9h, 8Ah
db 0C1h, 0EEh, 26h, 8Ah, 5, 0EBh, 0DEh,	3Bh
db 36h,	9Ch, 4,	74h, 2,	32h, 0E4h, 8Ah,	0EBh
db 0B1h, 0AAh, 0F7h, 0C6h, 1, 0, 75h, 2
db 0D0h, 0C9h, 8Ah, 0C1h, 0EEh,	26h, 8Ah
db 4, 33h, 0D2h, 0E8h, 5Dh, 13h, 8Ah, 0DFh
db 32h,	0FFh, 56h, 45h,	74h, 25h, 4Dh, 52h
db 0BAh, 0CFh, 3, 0B1h,	0AAh
db 0F7h, 0C7h, 1, 0, 75h, 2, 0D0h, 0C9h
db 8Ah,	0C1h, 0EEh, 5Ah, 26h, 8Ah, 5, 0B5h
db 1, 3Bh, 3Eh,	9Ch, 4,	75h, 4,	8Ah, 26h
db 9Ah,	4, 0E8h, 30h, 13h, 89h,	3Eh, 82h
db 4, 88h, 2Eh,	80h, 4,	57h, 8Bh, 0FDh,	80h
db 3Eh,	87h, 4,	0, 74h,	5, 0E8h, 0F8h, 13h
db 0EBh, 6, 0E8h, 0E4h,	12h, 0E8h, 0A5h
db 0FEh, 5Eh, 5Fh, 0Ah,	0C9h, 74h, 9, 32h
db 0EDh, 0F6h, 0D5h, 0FDh, 0E8h, 0BEh, 11h
db 0FCh, 0E8h, 0C4h, 12h, 0E8h,	77h, 0F5h
db 7, 0C3h, 6, 0E8h, 8Fh, 11h, 8Bh, 0DAh
db 0B1h, 0AAh, 0F7h, 0C6h, 1, 0, 75h, 2
db 0D0h, 0C9h, 0BAh, 0CEh, 3, 0B0h, 7, 0EEh
db 42h,	8Ah, 0C1h, 0EEh, 26h, 8Ah, 4, 32h
db 0E4h, 3Bh, 36h, 9Eh,	4, 75h,	4, 8Ah,	26h
db 9Bh,	4, 84h,	0C5h, 74h, 18h,	84h, 0E5h
db 75h,	14h, 4Bh, 74h, 11h, 0D0h, 0CDh,	73h
db 0F1h, 46h, 0D0h, 0C9h, 8Ah, 0C1h, 0EEh
db 26h,	8Ah, 4,	0B5h, 80h, 0EBh, 0DAh, 8Bh
db 0D3h, 84h, 0C5h, 74h, 9, 33h, 0D2h, 8Bh
db 0DAh, 32h, 0C9h, 0EBh, 7Ch, 90h, 52h
db 33h,	0D2h, 89h, 36h,	88h, 4,	56h, 88h
db 2Eh,	8Ah, 4,	0E8h, 7Fh, 12h,	8Ah, 0DFh
db 32h,	0FFh, 33h, 0EDh, 8Bh, 3Eh, 9Eh,	4
db 2Bh,	0FEh, 0F6h, 0C3h, 1, 74h, 2Ah, 0Bh
db 0FFh, 74h, 26h, 4Dh,	0B5h, 80h, 52h,	0BAh
db 0CFh, 3, 45h, 46h, 0D0h, 0C9h, 8Ah, 0C1h
db 0EEh, 26h, 8Ah, 4, 0Ah, 0C0h, 75h, 3
db 4Fh,	75h, 0EFh, 3Bh,	36h, 9Eh, 4, 75h
db 4, 8Ah, 26h,	9Bh, 4,	5Ah, 0E8h, 44h,	12h
db 89h,	36h, 82h, 4, 88h, 2Eh, 80h, 4, 5Fh
db 57h,	56h, 8Bh, 0F7h,	8Bh, 0FDh, 80h,	3Eh
db 87h,	4, 0, 74h, 5, 0E8h, 93h, 12h, 0EBh
db 6, 0E8h, 0Eh, 12h, 0E8h, 14h, 0FEh, 5Eh
db 5Fh,	0Ah, 0C9h, 74h,	6, 32h,	0EDh, 0FCh
db 0E8h, 0EAh, 10h, 0E8h, 0F1h,	11h, 5Ah
db 0E8h, 0A3h, 0F4h, 8Bh, 36h, 88h, 4, 0A0h
db 8Ah,	4, 7, 0C3h, 0B0h, 4, 0EEh, 42h,	32h
db 0C0h, 0D1h, 0CFh, 36h, 12h, 6, 0AFh,	4
db 0D1h, 0C7h, 0EEh, 4Ah, 0ACh,	0C3h, 0BAh
db 0CEh, 3, 0D0h, 0E7h,	36h, 88h, 3Eh, 0AFh
db 4, 0E8h, 0E0h, 0FFh,	8Ah, 0E0h, 0E8h
db 0DBh, 0FFh, 8Ah, 0F8h, 0D3h,	0C0h, 83h
db 0EDh, 8, 76h, 0Dh, 26h, 88h,	25h, 47h
db 8Ah,	0E7h, 75h, 0ECh, 0E8h, 46h, 0F4h
db 0EBh, 0E7h, 22h, 0E5h, 26h, 88h, 25h
db 47h,	75h, 3,	0E8h, 39h, 0F4h, 0C3h, 50h
db 52h,	50h, 0BAh, 0CEh, 3, 0B0h, 4, 0EEh
db 42h,	32h, 0C0h, 0D1h, 0CFh, 36h, 12h
db 6, 0AFh, 4, 0D1h, 0C7h, 0EEh, 0BAh, 0C4h
db 3, 0B0h, 2, 0EEh, 42h, 36h, 0A0h, 8Bh
db 4, 36h, 22h,	6, 0AEh, 4, 24h, 0Fh, 0EEh
db 36h,	0D0h, 6, 0AEh, 4, 58h, 36h, 0FFh
db 16h,	0B8h, 1, 5Ah, 58h, 0C3h, 36h, 0D0h
db 6, 8Bh, 4, 36h, 0D0h, 6, 8Bh, 4, 36h
db 0C6h, 6, 0AEh, 4, 55h, 0F7h,	0C7h, 1
db 0, 74h, 5, 36h, 0D0h, 6, 0AEh, 4, 0D0h
db 0E7h, 36h, 88h, 3Eh,	0AFh, 4, 52h, 8Ah
db 0E6h, 0BAh, 0CEh, 3,	0B0h, 8, 2 dup(0E8h)
db 0F3h, 5Ah, 8Ah, 24h,	46h, 75h, 3, 0E8h
db 0C1h, 0F3h, 0D3h, 0C8h, 3, 0E9h, 83h
db 0EDh, 8, 76h, 2Fh, 0E8h, 87h, 0FFh, 0B6h
db 0FFh, 50h, 52h, 8Ah,	0E6h, 0BAh, 0CEh
db 3, 0B0h, 8, 0E8h, 0C5h, 0F3h, 5Ah, 58h
db 0EBh, 3, 0E8h, 72h
db 0FFh, 0D3h, 0C0h, 86h, 0E0h,	3Bh, 0CDh
db 73h,	8, 8Ah,	24h, 46h, 75h, 3, 0E8h,	90h
db 0F3h, 0D3h, 0C8h, 83h, 0EDh,	8, 77h,	0E6h
db 50h,	22h, 0F2h, 8Ah,	0E6h, 0BAh, 0CEh
db 3, 0B0h, 8, 0E8h, 9Ah, 0F3h,	58h, 0E8h
db 4Ah,	0FFh, 0C3h, 0, 0Bh, 11h, 0, 50h
db 1Eh,	80h, 2,	0E0h, 1, 0, 0A0h, 1, 0FFh
db 40h,	3 dup(0), 1, 0,	11h, 29h
dw seg seg001
dd byte_3681
db 55h,	2Ch, 79h, 2Ch, 8Bh, 2Ch, 0CEh, 2Ch
db 0F3h, 2Ch, 13h, 2Dh,	2 dup(1), 50h, 0
db 80h,	1, 8, 0, 3, 7, 2 dup(0), 1, 0, 1
db 0A8h, 33h, 0D2h, 33h, 0DEh, 33h, 0E9h
db 33h,	0F2h, 33h, 0FDh, 33h, 26h, 2Fh,	31h
db 2Fh,	4Ch, 2Fh, 5Dh, 2Fh, 73h, 2Fh, 77h
db 2Fh,	0D3h, 32h, 3Ch,	33h, 7Eh, 33h, 8Ch
db 2Fh,	0C1h, 2Fh, 0E7h, 2Fh, 49h, 30h,	0D9h
db 36h,	15h, 31h, 46h, 31h, 0D6h, 31h, 0Ch
db 12h,	0, 50h,	1Eh, 80h, 2, 0E0h, 1, 0
db 0A0h, 0Fh, 2	dup(0FFh), 3 dup(0), 0Fh
db 2, 11h, 29h
dw seg seg001
dd byte_3681
db 55h,	2Ch, 79h, 2Ch, 8Bh, 2Ch, 0CEh, 2Ch
db 0FFh, 2Ch, 13h, 2Dh,	1, 4, 50h, 0, 80h
db 1, 8, 0, 3, 7, 2 dup(0), 1, 0, 1, 0A8h
db 33h,	0D2h, 33h, 0DEh, 33h, 0E9h, 33h
db 0F2h, 33h, 0FDh, 33h, 6, 34h, 16h, 34h
db 66h,	34h, 92h, 34h, 0A6h, 34h, 6Fh, 1Bh
db 0BAh, 34h, 0FCh, 34h, 26h, 35h, 4Fh,	35h
db 75h,	35h, 0AAh, 35h,	40h, 36h, 0F8h,	36h
db 6Bh,	37h, 0D3h, 3Ah,	8Ah, 3Bh, 0Dh, 13h
db 0, 28h, 19h,	40h, 1,	0C8h, 2	dup(0),	0A0h
db 2 dup(0FFh),	40h, 3 dup(0), 0Fh, 2, 11h
db 29h
dw seg seg001
dd byte_3681
db 55h,	2Ch, 79h, 2Ch, 83h, 2Ch, 0CEh, 2Ch
db 4, 2Dh, 13h,	2Dh, 8,	1, 40h,	1, 2 dup(0FFh)
db 1, 4	dup(0),	0D6h, 0, 34h, 1, 16h, 2Dh
db 0D9h, 33h, 0DEh, 33h, 0E9h, 33h, 0F2h
db 33h,	0FDh, 33h, 2Fh,	2Dh, 34h, 2Dh, 3Dh
db 2Dh,	49h, 2Dh, 73h, 2Fh, 77h, 2Fh, 59h
db 2Dh,	79h, 2Dh, 9Ah, 2Dh, 0B5h, 2Dh, 0C4h
db 2Dh,	0E6h, 2Dh, 1Dh,	2Eh, 5Ch, 2Eh, 15h
db 31h,	85h, 2Eh, 0C1h,	2Eh, 0,	1, 2, 3
db 4, 5, 6, 7, 8, 9, 0Ah, 0Bh, 0Ch, 0Dh
db 0Eh,	0Fh, 10h
byte_3681 db 5 dup(0), 2Ah, 0, 2Ah, 2 dup(0), 3	dup(2Ah)
db 2 dup(0), 2Ah, 0, 2 dup(2Ah), 15h, 0
db 3 dup(2Ah), 5 dup(15h), 3Fh,	15h, 3Fh
db 2 dup(15h), 3 dup(3Fh), 2 dup(15h), 3Fh
db 15h,	3 dup(3Fh), 15h, 3 dup(3Fh), 3 dup(0)
db 3 dup(5), 3 dup(8), 3 dup(0Bh), 3 dup(0Eh)
db 3 dup(11h), 3 dup(14h), 3 dup(18h), 3 dup(1Ch)
a222888??? db '   $$$(((---222888???',0
db 0, 3Fh, 10h,	0, 3Fh,	1Fh, 0,	3Fh, 2Fh
db 0, 2	dup(3Fh), 0, 2 dup(3Fh), 0, 2Fh
db 3Fh,	0, 1Fh,	3Fh, 0,	10h, 3Fh, 2 dup(0)
db 3Fh,	10h, 0,	3Fh, 1Fh, 0, 3Fh, 2Fh, 0
db 2 dup(3Fh), 0, 2Fh, 3Fh, 0, 1Fh, 3Fh
db 0, 10h, 3Fh,	2 dup(0), 3Fh, 2 dup(0)
db 3Fh,	10h, 0,	3Fh, 1Fh, 0, 3Fh, 2Fh, 0
db 2 dup(3Fh), 0, 2Fh, 3Fh, 0, 1Fh, 3Fh
db 0, 10h, 3Fh,	2 dup(1Fh), 3Fh, 27h, 1Fh
db 3Fh,	2Fh, 1Fh, 3Fh, 37h, 1Fh, 2 dup(3Fh)
db 1Fh,	2 dup(3Fh), 1Fh, 37h, 3Fh, 1Fh,	2Fh
db 3Fh,	1Fh, 27h, 3Fh, 2 dup(1Fh), 3Fh,	27h
db 1Fh,	3Fh, 2Fh, 1Fh, 3Fh, 37h, 1Fh, 2	dup(3Fh)
db 1Fh,	37h, 3Fh, 1Fh, 2Fh, 3Fh, 1Fh, 27h
db 3Fh,	2 dup(1Fh), 3Fh, 2 dup(1Fh), 3Fh
db 27h,	1Fh, 3Fh, 2Fh, 1Fh, 3Fh, 37h, 1Fh
db 2 dup(3Fh), 1Fh, 37h, 3Fh, 1Fh, 2Fh,	3Fh
db 1Fh
a??1?6??????6?1	db 27h,'?--?1-?6-?:-??-??-:?-6?-1?--?1-?6-'
db '?:-??-:?-6?-1?--?--?1-?6-?:-??-:?-6'
db '?-1?',0
db 0, 1Ch, 7, 0, 1Ch, 0Eh, 0, 1Ch, 15h,	0
db 2 dup(1Ch), 0, 2 dup(1Ch), 0, 15h, 1Ch
db 0, 0Eh, 1Ch,	0, 7, 1Ch, 2 dup(0), 1Ch
db 7, 0, 1Ch, 0Eh, 0, 1Ch, 15h,	0, 2 dup(1Ch)
db 0, 15h, 1Ch,	0, 0Eh,	1Ch, 0,	7, 1Ch,	2 dup(0)
db 1Ch,	2 dup(0), 1Ch, 7, 0, 1Ch, 0Eh, 0
db 1Ch,	15h, 0,	2 dup(1Ch), 0, 15h, 1Ch
db 0, 0Eh, 1Ch,	0, 7, 1Ch, 2 dup(0Eh), 1Ch
db 11h,	0Eh, 1Ch, 15h, 0Eh, 1Ch, 18h, 0Eh
db 2 dup(1Ch), 0Eh, 2 dup(1Ch),	0Eh, 18h
db 1Ch,	0Eh, 15h, 1Ch, 0Eh, 11h, 1Ch, 2	dup(0Eh)
db 1Ch,	11h, 0Eh, 1Ch, 15h, 0Eh, 1Ch, 18h
db 0Eh,	2 dup(1Ch), 0Eh, 18h, 1Ch, 0Eh,	15h
db 1Ch,	0Eh, 11h, 1Ch, 2 dup(0Eh), 1Ch,	2 dup(0Eh)
db 1Ch,	11h, 0Eh, 1Ch, 15h, 0Eh, 1Ch, 18h
db 0Eh,	2 dup(1Ch), 0Eh, 18h, 1Ch, 0Eh,	15h
db 1Ch,	0Eh, 11h, 1Ch, 2 dup(14h), 1Ch,	16h
db 14h,	1Ch, 18h, 14h, 1Ch, 1Ah, 14h, 2	dup(1Ch)
db 14h,	2 dup(1Ch), 14h, 1Ah, 1Ch, 14h,	18h
db 1Ch,	14h, 16h, 1Ch, 2 dup(14h), 1Ch,	16h
db 14h,	1Ch, 18h, 14h, 1Ch, 1Ah, 14h, 2	dup(1Ch)
db 14h,	1Ah, 1Ch, 14h, 18h, 1Ch, 14h, 16h
db 1Ch,	2 dup(14h), 1Ch, 2 dup(14h), 1Ch
db 16h,	14h, 1Ch, 18h, 14h, 1Ch, 1Ah, 14h
db 2 dup(1Ch), 14h, 1Ah, 1Ch, 14h, 18h,	1Ch
db 14h,	16h, 1Ch, 2 dup(0), 10h, 4, 0, 10h
db 8, 0, 10h, 0Ch, 0, 2	dup(10h), 0, 2 dup(10h)
db 0, 0Ch, 10h,	0, 8, 10h, 0, 4, 10h, 2	dup(0)
db 10h,	4, 0, 10h, 8, 0, 10h, 0Ch, 0, 2	dup(10h)
db 0, 0Ch, 10h,	0, 8, 10h, 0, 4, 10h, 2	dup(0)
db 10h,	2 dup(0), 10h, 4, 0, 10h, 8, 0,	10h
db 0Ch,	0, 2 dup(10h), 0, 0Ch, 10h, 0, 8
db 10h,	0, 4, 10h, 2 dup(8), 10h, 0Ah, 8
db 10h,	0Ch, 8,	10h, 0Eh, 8, 2 dup(10h)
db 8, 2	dup(10h), 8, 0Eh, 10h, 8, 0Ch, 10h
db 8, 0Ah, 10h,	2 dup(8), 10h, 0Ah, 8, 10h
db 0Ch,	8, 10h,	0Eh, 8,	2 dup(10h), 8, 0Eh
db 10h,	8, 0Ch,	10h, 8,	0Ah, 10h, 2 dup(8)
db 10h,	2 dup(8), 10h, 0Ah, 8, 10h, 0Ch
db 8, 10h, 0Eh,	8, 2 dup(10h), 8, 0Eh, 10h
db 8, 0Ch, 10h,	8, 0Ah,	10h, 2 dup(0Bh)
db 10h,	0Ch, 0Bh, 10h, 0Dh, 0Bh, 10h, 0Fh
db 0Bh,	2 dup(10h), 0Bh, 2 dup(10h), 0Bh
db 0Fh,	10h, 0Bh, 0Dh, 10h, 0Bh, 0Ch, 10h
db 2 dup(0Bh), 10h, 0Ch, 0Bh, 10h, 0Dh,	0Bh
db 10h,	0Fh, 0Bh, 2 dup(10h), 0Bh, 0Fh,	10h
db 0Bh,	0Dh, 10h, 0Bh, 0Ch, 10h, 2 dup(0Bh)
db 10h,	2 dup(0Bh), 10h, 0Ch, 0Bh, 10h,	0Dh
db 0Bh,	10h, 0Fh, 0Bh, 2 dup(10h), 0Bh,	0Fh
db 10h,	0Bh, 0Dh, 10h, 0Bh, 0Ch, 10h, 18h dup(0)



sub_3981 proc near
mov	bx, 27D4h
test	byte_503C, 10h
jz	short loc_39C3
mov	word_5070, 50h ; 'P'
mov	word_5072, 0FFB0h
mov	word_5074, 0
jmp	short loc_39B1
sub_3981 endp

align 2



sub_39A0 proc near
mov	bx, 2838h
test	byte_503C, 10h
jz	short loc_39C3
test	byte_503B, 10h
jz	short loc_39C3

loc_39B1:
mov	cx, 64h	; 'd'
call	sub_2774
clc
retn
sub_39A0 endp




sub_39B9 proc near
mov	bx, 289Ch
test	byte_503C, 10h
jnz	short loc_39B1

loc_39C3:
stc
retn
sub_39B9 endp

db 0A0h, 55h, 1, 55h, 56h, 57h,	0B4h, 0
db 0CDh, 10h, 5Fh, 5Eh,	5Dh, 80h, 3Eh, 58h
db 1, 3Ch, 75h,	0Fh, 0B2h, 3Ch,	0B8h, 23h
db 11h,	32h, 0DBh, 55h,	56h, 57h, 0CDh,	10h
db 5Fh,	5Eh, 5Dh, 0C3h,	0A3h, 0BBh, 1, 0A1h
db 5Dh,	1, 0A3h, 84h, 4, 0C3h, 6, 0Eh, 7
db 0B9h, 0, 1, 0EBh, 2Fh, 6, 0Eh, 7, 80h
db 3Eh,	78h, 4,	0, 74h,	22h, 0B0h, 10h,	0BBh
db 10h,	0, 33h,	0D2h, 33h, 0C9h, 55h, 56h
db 57h,	0B4h, 10h, 0CDh, 10h, 5Fh, 5Eh,	5Dh
db 0BAh, 0, 29h, 0B0h, 2, 55h, 56h, 57h
db 0B4h, 10h, 0CDh, 10h, 5Fh, 5Eh, 5Dh,	0B9h
db 10h,	0, 33h,	0DBh, 0C4h, 16h, 6Bh, 1
db 0B0h, 12h, 55h, 56h,	57h, 0B4h, 10h,	0CDh
db 10h,	5Fh, 5Eh, 5Dh, 7, 0C3h,	3Dh, 2 dup(0FFh)
db 75h,	4, 3Bh,	0D0h, 74h, 1Bh,	0FFh, 16h
db 77h,	1, 72h,	15h, 8Ah, 0FEh,	86h, 0F0h
db 86h,	0ECh, 86h, 0CAh, 0B0h, 10h, 55h
db 56h,	57h, 0B4h, 10h,	0CDh, 10h, 5Fh,	5Eh
db 5Dh,	0F8h, 0C3h, 80h, 0FBh, 1, 77h, 19h
db 0F6h, 0DBh, 80h, 0E3h, 0Fh, 0EBh, 5,	80h
db 0FBh, 0Fh, 77h, 0Dh,	0F7h, 0C2h, 0C0h
db 0FFh, 75h, 7, 0A9h, 2 dup(0C0h), 75h
db 2, 0F8h, 0C3h, 0F9h,	0C3h, 0E9h, 1, 10h
db 8Bh,	0C1h, 8Bh, 0DAh, 0D1h, 0E2h, 0D1h
db 0E2h, 3, 0D3h, 0B1h,	6, 0D3h, 0E2h, 3
db 0C2h, 0A3h, 82h, 4, 0C6h, 6,	80h, 4,	0FFh
db 0C3h, 0A2h, 81h, 4, 0F8h, 0C3h, 1Eh,	0C5h
db 1Eh,	82h, 4,	8Ah, 7,	1Fh, 0C3h, 1Eh,	0A0h
db 81h,	4, 0C5h, 1Eh, 82h, 4, 88h, 7, 1Fh
db 0C3h, 0C6h, 6, 0F0h,	3, 1, 0A0h, 81h
db 4, 8Bh, 1Eh,	82h, 4,	26h, 88h, 7, 0C3h
db 8Bh,	1Eh, 8Ch, 4, 0D1h, 0C7h, 73h, 4
db 26h,	88h, 66h, 0, 0Bh, 0F6h,	79h, 6,	3
db 0F3h, 45h, 0E2h, 0EFh, 0C3h,	3, 36h,	8Eh
db 4, 45h, 3, 0EAh, 0E2h, 0E5h,	0C3h, 8Bh
db 1Eh,	8Ch, 4,	0D1h, 0C7h, 73h, 4, 26h
db 88h,	66h, 0,	0Bh, 0F6h, 79h,	7, 3, 0F3h
db 3, 0EAh, 0E2h, 0EEh,	0C3h, 3, 36h, 8Eh
db 4, 45h, 3, 0EAh, 0E2h, 0E4h,	0C3h, 8Bh
db 36h,	90h, 4,	0D1h, 0C7h, 73h, 4, 26h
db 88h,	66h, 0,	3, 0EAh, 0E2h, 0F4h, 0C3h
db 7, 2Eh, 2, 2Eh, 0Ch,	2Eh, 4Ah, 1Bh, 11h
db 2Eh,	32h, 0E4h, 0D1h, 0E0h, 8Bh, 0D8h
db 2Eh,	8Bh, 87h, 0ABh,	2Dh, 0A3h, 0B8h
db 1, 0C3h, 8Bh, 0CDh, 0D1h, 0E9h, 0D1h
db 0E9h, 0D1h, 0E9h, 0BBh, 54h,	1Bh, 8Bh
db 0D7h, 0F7h, 0DAh, 3Bh, 0CAh,	77h, 3,	0F3h
db 0A4h, 0C3h, 2Bh, 0CAh, 87h, 0CAh, 0F3h
db 0A4h, 87h, 0CAh, 0FFh, 0D3h,	0EBh, 0F1h
db 36h,	8Bh, 1Eh, 0B8h,	1, 8Bh,	0D6h, 8Bh
db 0CDh, 0D1h, 0E9h, 0D1h, 0E9h, 0D1h, 0E9h
db 81h,	0FBh, 4Ah, 1Bh,	74h, 0D6h, 0ACh
db 0Bh,	0F6h, 74h, 18h,	0FFh, 0E3h, 26h
db 20h,	5, 0EBh, 0Dh, 26h, 8, 5, 0EBh, 8
db 0F6h, 0D0h, 0AAh, 0EBh, 4, 26h, 30h,	5
db 47h,	0E2h, 0E4h, 0C3h, 0E8h,	2Fh, 0EDh
db 0FFh, 0E3h, 57h, 6, 0C6h, 6,	0F0h, 3
db 1, 0C4h, 3Eh, 82h, 4, 0A0h, 81h, 4, 80h
db 3Eh,	87h, 4,	0, 74h,	23h, 8Bh, 0CFh,	83h
db 0E1h, 7, 0B4h, 1, 0D2h, 0CCh, 87h, 0CBh
db 8Ah,	1Eh, 3Ch, 4, 8Ah, 97h, 47h, 3, 0D0h
db 0CCh, 84h, 0E2h, 74h, 5, 0AAh, 0E2h,	0F7h
db 0EBh, 9, 47h, 0E2h, 0F2h, 0EBh, 4, 8Bh
db 0CBh
db 0F3h, 0AAh, 7, 5Fh, 0C3h, 0A1h, 82h,	4
db 33h,	0D2h, 0B9h, 40h, 1, 0F7h, 0F1h,	8Bh
db 0D8h, 0D1h, 0E0h, 0D1h, 0E0h, 3, 0C3h
db 0B1h, 6, 0D3h, 0E0h,	8Bh, 0D0h, 0A1h
db 96h,	4, 3, 0C2h, 0A3h, 9Ch, 4, 3, 16h
db 98h,	4, 89h,	16h, 9Eh, 4, 0C3h, 52h,	57h
db 6, 0C4h, 3Eh, 82h, 4, 8Ah, 16h, 86h,	4
db 8Ah,	36h, 81h, 4, 33h, 0C9h,	33h, 0DBh
db 3Bh,	3Eh, 9Ch, 4, 74h, 10h, 4Fh, 26h
db 8Ah,	5, 3Ah,	0C2h, 74h, 7, 32h, 0C6h
db 0Ah,	0C8h, 43h, 2 dup(0EBh),	47h, 89h
db 3Eh,	82h, 4,	0Bh, 0DBh, 74h,	7, 53h,	51h
db 0E8h, 62h, 0FFh, 59h, 5Bh, 7, 5Fh, 5Ah
db 0C3h, 57h, 6, 55h, 8Bh, 0DAh, 0C4h, 3Eh
db 82h,	4, 8Ah,	16h, 86h, 4, 8Ah, 36h, 81h
db 4, 33h, 0C9h, 26h, 8Ah, 5, 3Ah, 0C2h
db 75h,	11h, 4Bh, 74h, 0Ah, 47h, 3Bh, 3Eh
db 9Eh,	4, 76h,	0EFh, 4Fh, 33h,	0DBh, 8Bh
db 0D3h, 0EBh, 2Dh, 89h, 3Eh, 88h, 4, 89h
db 3Eh,	82h, 4,	53h, 33h, 0DBh,	3Bh, 3Eh
db 9Eh,	4, 77h,	0Fh, 26h, 8Ah, 5, 3Ah, 0C2h
db 74h,	9, 32h,	0C6h, 0Ah, 0C8h, 43h, 47h
db 2 dup(0EBh),	4Fh, 0Bh, 0DBh,	74h, 7,	53h
db 51h,	0E8h, 7, 0FFh, 59h, 5Bh, 5Ah, 89h
db 3Eh,	82h, 4,	8Bh, 36h, 88h, 4, 5Dh, 7
db 5Fh,	0C3h, 0, 50h, 0F6h, 0D8h, 1Ah, 0C0h
db 0A2h, 81h, 4, 0F8h, 58h, 0C3h, 6, 0A0h
db 80h,	4, 0C4h, 1Eh, 82h, 4, 8Ah, 0Eh,	7Bh
db 1, 26h, 8Ah,	27h, 22h, 0E0h,	0D3h, 0E8h
db 73h,	0FCh, 0D3h, 0E0h, 8Ah, 0C4h, 7,	0C3h
db 1Eh,	8Bh, 0Eh, 80h, 4, 0C5h,	1Eh, 82h
db 4, 32h, 2Fh,	22h, 0E9h, 30h,	2Fh, 1Fh
db 0C3h, 0C6h, 6, 0F0h,	3, 1, 8Bh, 0Eh,	80h
db 4, 8Bh, 1Eh,	82h, 4,	26h, 32h, 2Fh, 22h
db 0E9h, 26h, 30h, 2Fh,	0C3h, 8Eh, 6, 84h
db 4, 0C3h, 0AEh, 2Fh, 0A3h, 2Fh, 0B5h,	2Fh
db 0B7h, 2Fh, 0BAh, 2Fh, 0Dh, 30h, 8, 30h
db 12h,	30h, 14h, 30h, 19h, 30h, 32h, 0E4h
db 0D1h, 0E0h, 8Bh, 0D8h, 2Eh, 8Bh, 87h
db 78h,	2Fh, 0A3h, 0B8h, 1, 2Eh, 8Bh, 87h
db 82h,	2Fh, 0A3h, 0B9h, 4, 0C3h, 0F6h,	0D6h
db 0Ah,	0E6h, 0F6h, 0D6h, 26h, 20h, 25h
db 47h,	0C3h, 22h, 0E6h, 26h, 8, 25h, 47h
db 0C3h, 0F6h, 0D4h, 26h, 32h, 25h, 22h
db 0E6h, 26h, 30h, 25h,	47h, 0C3h, 8Ah,	24h
db 46h,	0ACh, 8Ah, 0F8h, 0D3h, 0C0h, 83h
db 0EDh, 8, 76h, 0Dh, 26h, 88h,	25h, 47h
db 8Ah,	0E7h, 75h, 0EEh, 0E8h, 7Bh, 2 dup(0EBh)
db 0E9h, 22h, 0E5h, 26h, 88h, 25h, 47h,	75h
db 3, 0E8h, 6Eh, 0EBh, 0C3h, 8Ah, 24h, 46h
db 75h,	3, 0E8h, 5Bh, 0EBh, 0D3h, 0C8h,	3
db 0E9h, 83h, 0EDh, 8, 76h, 44h, 36h, 0FFh
db 16h,	0B8h, 1, 0B6h, 0FFh, 36h, 8Bh, 1Eh
db 0B9h, 4, 0EBh, 17h, 0FFh, 0E3h, 26h,	20h
db 25h,	0EBh, 0Fh, 26h,	8, 25h,	0EBh, 0Ah
db 0F6h, 0D4h, 26h, 88h, 25h, 0EBh, 3, 26h
db 30h,	25h, 47h, 0D3h,	0C0h, 0ACh, 0Bh
db 0F6h, 74h, 20h, 86h,	0E0h, 0D3h, 0C8h
db 83h,	0EDh, 8, 77h, 0D9h, 83h, 0C5h, 8
db 3Bh,	0CDh, 72h, 8, 0Bh, 0F6h, 75h, 3
db 0E8h, 23h, 0EBh, 4Eh, 22h, 0F2h, 36h
db 0FFh, 16h, 0B8h, 1, 0C3h, 0E8h, 3, 2	dup(0EBh)
db 0DBh, 57h, 6, 0C6h, 6, 0F0h,	3, 1, 0C4h
db 3Eh,	82h, 4,	8Bh, 16h, 80h, 4, 0Ah, 0D2h
db 78h
db 24h,	32h, 0E4h, 8Ah,	0Eh, 7Bh, 1, 0Ah
db 0E2h, 4Bh, 74h, 71h,	0D2h, 0CAh, 73h
db 0F7h, 80h, 3Eh, 87h,	4, 0, 74h, 3, 0E8h
db 78h,	0, 8Ah,	0C6h, 26h, 32h,	5, 22h,	0C4h
db 26h,	30h, 5,	47h, 8Bh, 0C3h,	8Ah, 0Eh
db 83h,	1, 0D3h, 0E8h, 74h, 46h, 91h, 80h
db 3Eh,	87h, 4,	0, 74h,	3Ah, 53h, 32h, 0FFh
db 8Ah,	1Eh, 3Ch, 4, 80h, 3Eh, 7Bh, 1, 2
db 75h,	1Ah, 8Bh, 0C7h,	0D1h, 0C8h, 0D1h
db 0D3h, 8Ah, 0C6h, 26h, 32h, 5, 22h, 87h
db 47h,	3, 26h,	30h, 5,	47h, 0D1h, 0CBh
db 0E2h, 0E9h, 5Bh, 0EBh, 16h, 8Ah, 0C6h
db 26h,	32h, 5,	22h, 87h, 47h, 3, 26h, 30h
db 5, 47h, 0E2h, 0F1h, 5Bh, 0EBh, 4, 8Ah
db 0C6h, 0F3h, 0AAh, 23h, 1Eh, 84h, 1, 74h
db 14h,	0EBh, 84h, 80h,	3Eh, 87h, 4, 0,	74h
db 3, 0E8h, 0Bh, 0, 26h, 32h, 35h, 22h,	0F4h
db 26h,	30h, 35h, 7, 5Fh, 0C3h,	53h, 80h
db 3Eh,	7Bh, 1,	2, 75h,	14h, 52h, 32h, 0FFh
db 8Ah,	1Eh, 3Ch, 4, 8Bh, 0D7h,	0D1h, 0CAh
db 0D1h, 0D3h, 22h, 0A7h, 47h, 3, 5Ah, 0EBh
db 0Ah,	32h, 0FFh, 8Ah,	1Eh, 3Ch, 4, 22h
db 0A7h, 47h, 3, 5Bh, 0C3h, 88h, 1Eh, 81h
db 4, 0C3h, 0C4h, 3Eh, 82h, 4, 8Ah, 2Eh
db 80h,	4, 8Ah,	16h, 86h, 4, 8Ah, 36h, 81h
db 4, 8Ah, 0Eh,	7Bh, 1,	26h, 8Ah, 1Dh, 33h
db 0F6h, 0C3h, 8Ah, 0C3h, 32h, 0C2h, 22h
db 0C5h, 74h, 9, 8Ah, 0C3h, 32h, 0C6h, 22h
db 0C5h, 0Bh, 0F0h, 45h, 0C3h, 52h, 56h
db 57h,	6, 55h,	0E8h, 0CCh, 0FFh, 8Bh, 0EEh
db 3Bh,	3Eh, 9Ch, 4, 74h, 59h, 0D2h, 0C5h
db 72h,	9, 0E8h, 0D7h, 0FFh, 74h, 2Ah, 0D2h
db 0C5h, 0EBh, 0F5h, 83h, 0EFh,	1, 72h,	27h
db 26h,	8Ah, 1Dh, 3Bh, 3Eh, 9Ch, 4, 74h
db 25h,	8Ah, 0C3h, 32h,	0C2h, 84h, 0C5h
db 74h,	1Dh, 0D2h, 0C5h, 73h, 0F8h, 8Ah
db 0C3h, 32h, 0C6h, 0Bh, 0F0h, 3, 2Eh, 81h
db 1, 0EBh, 0DAh, 0D2h,	0CDh, 73h, 2Eh,	0EBh
db 4, 8Ah, 2Eh,	7Fh, 1,	47h, 0EBh, 25h,	8Ah
db 0Eh,	7Bh, 1,	8Ah, 2Eh, 80h, 1, 0E8h,	93h
db 0FFh, 74h, 0E6h, 0D2h, 0C5h,	72h, 12h
db 3Ah,	2Eh, 9Ah, 4, 77h, 0DCh,	0EBh, 0EFh
db 0D2h, 0C5h, 72h, 6, 3Ah, 2Eh, 9Ah, 4
db 76h,	0E5h, 0D2h, 0CDh, 8Bh, 0DDh, 0Bh
db 0DBh, 74h, 0Bh, 89h,	3Eh, 82h, 4, 88h
db 2Eh,	80h, 4,	0E8h, 7Dh, 0FEh, 8Bh, 0DDh
db 8Bh,	0CEh, 5Dh, 7, 5Fh, 5Eh,	5Ah, 0C3h
db 57h,	6, 55h,	8Bh, 0EAh, 0E8h, 3Ch, 0FFh
db 8Ah,	0C3h, 32h, 0C2h, 84h, 0C5h, 75h
db 1Ch,	4Dh, 74h, 16h, 0D2h, 0CDh, 73h,	0F5h
db 47h,	26h, 8Ah, 1Dh, 3Bh, 3Eh, 9Eh, 4
db 75h,	0E7h, 3Ah, 2Eh,	9Bh, 4,	73h, 0E1h
db 33h,	0EDh, 0E9h, 0ABh, 0, 89h, 3Eh, 0B6h
db 4, 88h, 2Eh,	0B8h, 4, 89h, 3Eh, 82h,	4
db 88h,	2Eh, 80h, 4, 55h, 33h, 0EDh, 0F6h
db 0C5h, 80h, 75h, 0Ah,	0E8h, 17h, 0FFh
db 74h,	55h, 0D2h, 0CDh, 73h, 0F7h, 47h
db 80h,	3Eh, 7Bh, 1, 2,	74h, 1Bh, 26h, 8Ah
db 1Dh,	39h, 3Eh, 9Eh, 4, 76h, 37h, 8Ah
db 0C3h, 0F6h, 0D0h, 32h, 0C2h,	75h, 0DEh
db 32h,	0DEh, 0Bh, 0F3h, 83h, 0C5h, 8, 47h
db 0EBh, 0E5h, 0B4h, 55h, 26h, 8Ah, 1Dh
db 39h,	3Eh, 9Eh, 4, 76h, 1Ah, 8Ah, 0C3h
db 0F6h, 0D0h, 32h, 0C2h, 8Ah, 0F8h, 0D0h
db 0EFh
db 22h,	0FCh, 22h, 0F8h, 75h, 0B9h, 32h
db 0DEh, 0Bh, 0F3h, 83h, 0C5h, 4, 47h, 0EBh
db 0DDh, 74h, 9, 8Ah, 0Eh, 7Bh,	1, 0D2h
db 0C5h, 47h, 0EBh, 1Dh, 8Ah, 2Eh, 7Fh,	1
db 0E8h, 0B7h, 0FEh, 74h, 14h, 0D2h, 0CDh
db 72h,	0Eh, 3Bh, 3Eh, 9Eh, 4, 75h, 0F1h
db 3Ah,	2Eh, 9Bh, 4, 72h, 2, 0EBh, 0E9h
db 0D2h, 0C5h, 51h, 8Bh, 0DDh, 0Bh, 0DBh
db 74h,	3, 0E8h, 0ACh, 0FDh, 8Bh, 0DDh,	59h
db 89h,	3Eh, 82h, 4, 88h, 2Eh, 80h, 4, 5Ah
db 8Bh,	0CEh, 0EBh, 0Eh, 8Bh, 0DDh, 8Bh
db 0D5h, 8Ah, 0CBh, 89h, 3Eh, 82h, 4, 88h
db 2Eh,	80h, 4,	8Bh, 36h, 0B6h,	4, 0A0h
db 0B8h, 4, 5Dh, 7, 5Fh, 0C3h, 0Bh, 0D2h
db 8Bh,	16h, 0B0h, 4, 78h, 4, 8Bh, 16h,	0B2h
db 4, 0C3h, 0E8h, 0F0h,	0FFh, 87h, 0D9h
db 8Ah,	0Eh, 7Bh, 1, 0D1h, 0C7h, 73h, 2
db 0Ah,	0C5h, 0Bh, 0F6h, 79h, 25h, 3, 36h
db 8Ch,	4, 0D2h, 0CDh, 72h, 5, 4Bh, 75h
db 2 dup(0EBh),	3Eh, 8Ah, 0CCh,	26h, 32h
db 4Eh,	0, 22h,	0C8h, 26h, 30h,	4Eh, 0,	32h
db 0C0h, 8Ah, 0Eh, 7Bh,	1, 45h,	4Bh, 75h
db 0D3h, 0EBh, 26h, 3, 36h, 8Eh, 4, 8Ah
db 0CCh, 26h, 32h, 4Eh,	0, 22h,	0C8h, 26h
db 30h,	4Eh, 0,	32h, 0C0h, 8Ah,	0Eh, 7Bh
db 1, 0D2h, 0CDh, 83h, 0D5h, 0,	2Bh, 0EAh
db 73h,	4, 3, 2Eh, 0B4h, 4, 4Bh, 75h, 0ABh
db 26h,	32h, 66h, 0, 22h, 0E0h,	26h, 30h
db 66h,	0, 0C3h, 0E8h, 87h, 0FFh, 87h, 0D9h
db 8Ah,	0Eh, 7Bh, 1, 0D1h, 0C7h, 73h, 0Ch
db 8Ah,	0ECh, 26h, 32h,	6Eh, 0,	22h, 0E8h
db 26h,	30h, 6Eh, 0, 0Bh, 0F6h,	79h, 10h
db 3, 36h, 8Ch,	4, 2Bh,	0EAh, 73h, 4, 3
db 2Eh,	0B4h, 4, 4Bh, 75h, 0DDh, 0C3h, 3
db 36h,	8Eh, 4,	0D2h, 0C8h, 83h, 0D5h, 0
db 2Bh,	0EAh, 73h, 4, 3, 2Eh, 0B4h, 4, 4Bh
db 75h,	0C8h, 0C3h, 0E8h, 45h, 0FFh, 8Bh
db 36h,	0B4h, 4, 0D1h, 0C7h, 73h, 0Ch, 8Ah
db 0FCh, 26h, 32h, 7Eh,	0, 22h,	0F8h, 26h
db 30h,	7Eh, 0,	2Bh, 0EAh, 73h,	2, 3, 0EEh
db 0E2h, 0E8h, 0C3h, 8Bh, 0DAh,	0D1h, 0E2h
db 0D1h, 0E2h, 3, 0D3h,	0EBh, 0Ah, 8Bh,	0DAh
db 0D1h, 0E2h, 0D1h, 0E2h, 3, 0D3h, 0D1h
db 0E2h, 0D1h, 0E2h, 0D1h, 0E2h, 0D1h, 0E2h
db 8Bh,	0C1h, 0D1h, 0E8h, 0D1h,	0E8h, 0D1h
db 0E8h, 3, 0D0h, 89h, 16h, 82h, 4, 80h
db 0E1h, 7, 0B5h, 80h, 0D2h, 0EDh, 88h,	2Eh
db 80h,	4, 0C3h, 0D0h, 6, 80h, 4, 72h, 1
db 0C3h, 0FFh, 0Eh, 82h, 4, 0C3h, 0A1h,	82h
db 4, 3Bh, 6, 92h, 4, 73h, 2, 0F9h, 0C3h
db 0A1h, 7Dh, 1, 29h, 6, 82h, 4, 0F8h, 0C3h
db 0A1h, 82h, 4, 3Bh, 6, 94h, 4, 72h, 2
db 0F9h, 0C3h, 0A1h, 7Dh, 2 dup(1), 6, 82h
db 4, 0F8h, 0C3h, 50h, 3Ah, 6, 5Fh, 1, 76h
db 3, 0A0h, 5Fh, 1, 0A2h, 81h, 4, 0F8h,	58h
db 0C3h, 56h, 6, 0C4h, 36h, 82h, 4, 0BBh
db 3, 1, 0BAh, 0CEh, 3,	0B8h, 5, 0, 0E8h
db 40h,	0E7h, 0B0h, 4, 0EEh, 42h, 8Ah, 0C3h
db 32h,	0E4h, 8Ah, 0Eh,	80h, 4,	0EEh, 26h
db 8Ah,	2Ch, 22h, 0E9h,	0F6h, 0DDh, 0D0h
db 0D4h, 2Ah, 0C7h, 73h, 0F2h, 86h, 0E0h
db 0E8h, 28h, 0E7h, 7, 5Eh, 0C3h, 56h, 6
db 0C4h, 36h, 82h, 4, 0BBh, 2 dup(2), 0EBh
db 0CAh, 56h, 6, 0C4h, 36h, 82h, 4, 8Bh
db 0DEh, 0B7h
db 2, 80h, 0E3h, 1, 2, 0DFh, 0EBh, 0B9h
db 6, 0BAh, 0CEh, 3, 0B0h, 5, 0EEh, 0A0h
db 66h,	1, 42h,	0EEh, 0B0h, 8, 4Ah, 0EEh
db 0A1h, 80h, 4, 42h, 0EEh, 0C4h, 1Eh, 82h
db 4, 26h, 86h,	27h, 0B0h, 0FFh, 0EEh, 0B0h
db 5, 4Ah, 0EEh, 0A0h, 66h, 1, 24h, 10h
db 42h,	0EEh, 7, 0C3h, 0C6h, 6,	0F0h, 3
db 1, 0BAh, 0CFh, 3, 0A1h, 80h,	4, 0EEh
db 8Bh,	1Eh, 82h, 4, 26h, 86h, 27h, 0C3h
db 8Eh,	6, 84h,	4, 0BAh, 0CEh, 3, 0B0h,	5
db 0EEh, 0A0h, 66h, 1, 42h, 0EEh, 0B0h,	8
db 4Ah,	0EEh, 0C3h, 0BAh, 0CFh,	3, 0D1h
db 0C7h, 73h, 2, 0Ah, 0C7h, 0Bh, 0F6h, 79h
db 1Ah,	3, 36h,	8Ch, 4,	0D0h, 0CFh, 72h
db 4, 0E2h, 0ECh, 0EBh,	23h, 0EEh, 8Ah,	0C4h
db 26h,	86h, 46h, 0, 32h, 0C0h,	45h, 0E2h
db 0DEh, 0EBh, 15h, 3, 36h, 8Eh, 4, 0EEh
db 8Ah,	0C4h, 26h, 86h,	46h, 0,	32h, 0C0h
db 0D0h, 0CFh, 13h, 2Eh, 90h, 4, 0E2h, 0C7h
db 0EEh, 26h, 86h, 66h,	0, 0C3h, 0BAh, 0CFh
db 3, 0D1h, 0C7h, 73h, 7, 0EEh,	8Ah, 0FCh
db 26h,	86h, 7Eh, 0, 0Bh, 0F6h,	79h, 0Bh
db 3, 36h, 8Ch,	4, 3, 2Eh, 90h,	4, 0E2h
db 0E7h, 0C3h, 3, 36h, 8Eh, 4, 0D0h, 0C8h
db 13h,	2Eh, 90h, 4, 0E2h, 0DAh, 0C3h, 0BAh
db 0CFh, 3, 0EEh, 8Bh, 1Eh, 90h, 4, 0D1h
db 0C7h, 73h, 6, 8Ah, 0C4h, 26h, 86h, 46h
db 0, 3, 0EBh, 0E2h, 0F2h, 0C3h, 0F6h, 0D4h
db 26h,	86h, 25h, 47h, 0C3h, 10h, 8, 2 dup(0)
db 18h,	0B3h, 0CCh, 3Dh, 0B3h, 44h, 3Dh
db 0B3h, 2 dup(88h), 1Eh, 8Bh, 4, 0BBh,	3Dh
db 35h,	3Ch, 2,	74h, 3,	0BBh, 3Fh, 35h,	89h
db 1Eh,	0B8h, 1, 0BBh, 44h, 35h, 2Eh, 0D7h
db 8Ah,	0E0h, 0BAh, 0CEh, 3, 0B0h, 3, 0E8h
db 0F6h, 0E5h, 0C3h, 0D0h, 0E7h, 0BAh, 0CEh
db 3, 0B0h, 4, 0EEh, 8Ah, 0C7h,	42h, 0EEh
db 8Ah,	24h, 46h, 0ACh,	8Ah, 0F8h, 0D3h
db 0C0h, 83h, 0EDh, 8, 76h, 0Dh, 26h, 88h
db 25h,	47h, 8Ah, 0E7h,	75h, 0EEh, 0E8h
db 0BDh, 0E5h, 0EBh, 0E9h, 22h,	0E5h, 26h
db 88h,	25h, 47h, 75h, 3, 0E8h,	0B0h, 0E5h
db 0C3h, 36h, 0D0h, 6, 8Bh, 4, 36h, 0D0h
db 6, 8Bh, 4, 52h, 8Ah,	0DEh, 0BAh, 0CEh
db 3, 0B0h, 8, 0EEh, 93h, 42h, 0EEh, 4Ah
db 0B0h, 5, 0EEh, 32h, 0C0h, 42h, 0EEh,	4Ah
db 0B0h, 4, 0EEh, 8Ah, 0C4h, 42h, 0EEh,	0BAh
db 0C4h, 3, 0B0h, 2, 0EEh, 36h,	0A0h, 8Bh
db 4, 24h, 0Fh,	42h, 0EEh, 5Ah,	8Ah, 24h
db 46h,	75h, 3,	0E8h, 68h, 0E5h, 36h, 8Bh
db 1Eh,	0B8h, 1, 0D3h, 0C8h, 3,	0E9h, 83h
db 0EDh, 8, 76h, 37h, 0FFh, 0D3h, 0B6h,	0FFh
db 50h,	52h, 8Ah, 0E6h,	0BAh, 0CEh, 3, 0B0h
db 8, 0EEh, 86h, 0C4h, 42h, 0EEh, 5Ah, 58h
db 0EBh, 2, 0FFh, 2 dup(0D3h), 0C0h, 0ACh
db 0Bh,	0F6h, 74h, 2Ch,	86h, 0E0h, 0D3h
db 0C8h, 83h, 0EDh, 8, 77h, 0EEh, 83h, 0C5h
db 8, 3Bh, 0CDh, 72h, 8, 0Bh, 0F6h, 75h
db 3, 0E8h, 38h, 0E5h, 4Eh, 50h, 22h, 0F2h
db 8Ah,	0E6h, 0BAh, 0CEh, 3, 0B0h, 8, 0EEh
db 86h,	0C4h, 42h, 0EEh, 4Ah, 58h, 0FFh
db 0D3h, 0C3h, 0E8h, 0Ch, 0E5h,	0EBh, 0CFh
db 57h,	6, 0C6h, 6, 0F0h, 3, 1,	0BAh, 0CEh
db 3, 0B0h, 5, 0EEh, 0A0h, 66h,	1, 42h,	0EEh
db 4Ah,	0B0h, 8, 0EEh, 42h, 0C4h, 3Eh, 82h
db 4, 8Bh, 0Eh,	80h, 4,	0Ah, 0C9h
db 78h,	1Eh, 32h, 0E4h,	0Ah, 0E1h, 4Bh,	74h
db 4Ch,	0D0h, 0C9h, 73h, 0F7h, 80h, 3Eh
db 87h,	4, 0, 74h, 3, 0E8h, 54h, 0, 8Ah
db 0C4h, 0EEh, 8Ah, 0C5h, 26h, 86h, 5, 47h
db 51h,	0B0h, 0FFh, 0EEh, 8Bh, 0C3h, 8Ah
db 0Eh,	83h, 1,	0D3h, 0E8h, 74h, 1Eh, 91h
db 8Ah,	0C4h, 80h, 3Eh,	87h, 4,	0, 74h,	12h
db 50h,	0B4h, 0FFh, 0E8h, 2Dh, 0, 8Ah, 0C4h
db 0EEh, 58h, 26h, 8Ah,	25h, 0AAh, 0E2h
db 0FAh, 0EBh, 2, 0F3h,	0AAh, 59h, 23h,	1Eh
db 84h,	1, 75h,	0AFh, 0EBh, 10h, 80h, 3Eh
db 87h,	4, 0, 74h, 3, 0E8h, 0Ch, 0, 8Ah
db 0C4h, 0EEh, 26h, 86h, 2Dh, 0E8h, 0A6h
db 0E4h, 7, 5Fh, 0C3h, 53h, 32h, 0FFh, 8Ah
db 1Eh,	3Ch, 4,	22h, 0A7h, 47h,	3, 5Bh,	0C3h
db 0A1h, 82h, 4, 0B9h, 50h, 0, 33h, 0D2h
db 0F7h, 0F1h, 0D1h, 0E0h, 0EBh, 64h, 90h
db 0A1h, 82h, 4, 0B9h, 28h, 0, 33h, 0D2h
db 0F7h, 0F1h, 0E8h, 56h, 0, 0EBh, 10h,	90h
db 0A1h, 82h, 4, 0B9h, 50h, 0, 33h, 0D2h
db 0F7h, 0F1h, 0D1h, 0E0h, 0E8h, 44h, 0
db 57h,	56h, 53h, 0BEh,	7, 0, 0BFh, 3, 0
db 32h,	0FFh, 0D0h, 8Dh, 0BCh, 4, 0D0h,	0D7h
db 4Fh,	0F6h, 6, 7Ch, 1, 2, 74h, 9, 4Fh
db 0D0h, 8Dh, 0BCh, 4, 0D0h, 0D7h, 0EBh
db 14h,	0D0h, 8Dh, 0BCh, 4, 0D0h, 0D7h,	4Fh
db 0D0h, 8Dh, 0BCh, 4, 0D0h, 0D7h, 4Fh,	0D0h
db 8Dh,	0BCh, 4, 0D0h, 0D7h, 88h, 0BCh,	0C0h
db 4, 0BFh, 3, 0, 4Eh, 79h, 0C9h, 5Bh, 5Eh
db 5Fh,	0C3h, 0D1h, 0E0h, 0D1h,	0E0h, 0D1h
db 0E0h, 8Bh, 0D0h, 0D1h, 0E0h,	0D1h, 0E0h
db 3, 0C2h, 8Bh, 0D0h, 3, 6, 96h, 4, 0A3h
db 9Ch,	4, 3, 16h, 98h,	4, 89h,	16h, 9Eh
db 4, 0C3h, 50h, 57h, 8Ah, 0C7h, 32h, 0E4h
db 8Bh,	0F8h, 80h, 3Eh,	7Ch, 1,	2, 77h,	7
db 0D1h, 0E7h, 4Fh, 88h, 9Dh, 0BCh, 4, 4Fh
db 88h,	9Dh, 0BCh, 4, 88h, 1Eh,	81h, 4,	5Fh
db 58h,	0C3h, 52h, 0C4h, 36h, 82h, 4, 8Ah
db 2Eh,	80h, 4,	0BAh, 0CEh, 3, 0B0h, 5,	0EEh
db 0B0h, 8, 42h, 0EEh, 4Ah, 0B0h, 2, 0EEh
db 0A0h, 86h, 4, 42h, 0EEh, 32h, 0C9h, 33h
db 0DBh, 5Ah, 0C3h, 52h, 0BAh, 0CEh, 3,	8Ah
db 26h,	66h, 1,	80h, 3Eh, 87h, 4, 0, 74h
db 3, 80h, 0E4h, 10h, 0B0h, 5, 0EEh, 86h
db 0C4h, 42h, 0EEh, 4Ah, 0B0h, 8, 0EEh,	8Ah
db 0C3h, 80h, 3Eh, 87h,	4, 0, 74h, 7, 8Ah
db 0E0h, 0E8h, 0F2h, 0FEh, 8Ah,	0C4h, 42h
db 0EEh, 4Ah, 26h, 8Ah,	5, 80h,	3Eh, 87h
db 4, 0, 74h, 5, 0E8h, 7Eh, 0, 0EBh, 7,	8Ah
db 1Eh,	81h, 4,	26h, 88h, 1Dh, 0Ah, 0FFh
db 75h,	5, 0E8h, 0D6h, 0, 0EBh,	2Fh, 0B0h
db 8, 0EEh, 8Ah, 0C7h, 80h, 3Eh, 87h, 4
db 0, 74h, 7, 8Ah, 0E0h, 0E8h, 0BDh, 0FEh
db 8Ah,	0C4h, 42h, 0EEh, 4Ah, 26h, 8Ah,	4
db 80h,	3Eh, 87h, 4, 0,	74h, 9,	87h, 0FEh
db 0E8h, 47h, 0, 87h, 0FEh, 0EBh, 3, 26h
db 88h,	1Ch, 0E8h, 0A5h, 0, 0Bh, 0EDh, 74h
db 35h,	47h, 0Ah, 0EDh,	74h, 2,	2 dup(4Fh)
db 8Ah,	0FDh, 8Bh, 0CDh, 8Ah, 0C3h, 80h
db 3Eh,	87h, 4,	0, 74h,	1Fh, 0B4h, 0FFh
db 0E8h, 82h, 0FEh, 0B0h, 8, 0E8h, 19h,	0E3h
db 0Ah,	0FFh, 0BBh, 1, 0, 74h, 2, 0F7h,	0DBh
db 26h,	8Ah, 5,	0E8h, 0Ch, 0, 3, 0FBh, 0E2h
db 0F6h
db 0EBh, 2, 0F3h, 0AAh,	0B1h, 1, 5Ah, 0C3h
db 52h,	53h, 0BAh, 0C4h, 3, 0B0h, 2, 0EEh
db 42h,	0B0h, 8, 0BBh, 3, 0, 0EEh, 8Ah,	0A7h
db 0BCh, 4, 26h, 88h, 25h, 26h,	8Ah, 25h
db 4Bh,	0D0h, 0E8h, 73h, 0F0h, 4Ah, 0B0h
db 2, 0EEh, 86h, 0C4h, 0B0h, 0Fh, 42h, 0EEh
db 5Bh,	5Ah, 0C3h, 0F6h, 6, 7Ch, 1, 4, 75h
db 0Eh,	57h, 0BFh, 60h,	6Dh, 0E8h, 0C7h
db 0FFh, 47h, 0E8h, 0C3h, 0FFh,	5Fh, 0EBh
db 6, 0E8h, 0BDh, 0FFh,	26h, 8Ah, 5, 0B0h
db 8, 0EEh, 32h, 0C0h, 42h, 0EEh, 4Ah, 0C3h
db 0D1h, 0E5h, 0D1h, 0E5h, 0D1h, 0E5h, 3
db 0D5h, 8Bh, 0DAh, 0C3h, 52h, 0BAh, 0CEh
db 3, 0B0h, 2, 0EEh, 0A0h, 81h,	4, 42h,	0EEh
db 5Ah,	0C3h, 0B8h, 8, 0FFh, 0EEh, 86h,	0C4h
db 42h,	0EEh, 4Ah, 0C3h, 8Ah, 0FDh, 84h
db 0E8h, 75h, 0Dh, 0Ah,	0FDh, 84h, 0FCh
db 75h,	0Ch, 42h, 0D0h,	0CDh, 73h, 0F1h
db 0D0h, 0C5h, 0F6h, 0D0h, 22h,	0F8h, 0C3h
db 42h,	0C3h, 84h, 0C5h, 74h, 3, 47h, 0EBh
db 15h,	8Ah, 0FDh, 84h,	0FCh, 75h, 16h,	84h
db 0E8h, 75h, 0Bh, 0Ah,	0FDh, 84h, 0FCh
db 75h,	0Ch, 42h, 0D0h,	0C5h, 73h, 0F1h
db 0D0h, 0CDh, 0F6h, 0D0h, 22h,	0F8h, 0C3h
db 42h,	0C3h, 32h, 0C9h, 26h, 8Ah, 4, 22h
db 0C3h, 32h, 0C3h, 75h, 1Bh, 0Bh, 0FFh
db 74h,	0Dh, 46h, 26h, 8Ah, 4, 0F6h, 0D0h
db 0Ah,	0C0h, 75h, 0Dh,	4Fh, 75h, 0F3h,	46h
db 26h,	8Ah, 4,	22h, 0C7h, 32h,	0C7h, 74h
db 2, 8Ah, 0C8h, 0C3h, 52h, 55h, 0FFh, 36h
db 82h,	4, 0FFh, 36h, 80h, 4, 53h, 89h,	3Eh
db 0C8h, 4, 8Ah, 0C3h, 0Ah, 0C0h, 74h, 5
db 0E8h, 8, 1, 75h, 3Ah, 83h, 3Eh, 0C8h
db 4, 0, 74h, 23h, 46h,	89h, 36h, 82h, 4
db 0C6h, 6, 80h, 4, 80h, 33h, 0EDh, 0FFh
db 16h,	98h, 1,	3Ah, 86h, 0C0h,	4, 75h,	1Dh
db 45h,	0D0h, 2Eh, 80h,	4, 73h,	0EFh, 0FFh
db 0Eh,	0C8h, 4, 75h, 0DDh, 5Bh, 0Ah, 0FFh
db 53h,	74h, 8,	8Ah, 0C7h, 46h,	0E8h, 0A2h
db 0, 75h, 2, 0B1h, 0FFh, 0FEh,	0C1h, 5Bh
db 8Fh,	6, 80h,	4, 8Fh,	6, 82h,	4, 5Dh,	5Ah
db 0C3h, 32h, 0C9h, 26h, 8Ah, 4, 22h, 0C3h
db 32h,	0C3h, 75h, 1Fh,	0Ah, 0FFh, 74h,	1Dh
db 0Bh,	0FFh, 74h, 0Dh,	4Eh, 26h, 8Ah, 4
db 0F6h, 0D0h, 0Ah, 0C0h, 75h, 0Dh, 4Fh
db 75h,	0F3h, 4Eh, 26h,	8Ah, 4,	22h, 0C7h
db 32h,	0C7h, 74h, 2, 8Ah, 0C8h, 0C3h, 52h
db 55h,	0FFh, 36h, 82h,	4, 0FFh, 36h, 80h
db 4, 53h, 8Ah,	0C3h, 89h, 3Eh,	0C8h, 4
db 0Ah,	0C0h, 74h, 5, 0E8h, 4Bh, 0, 75h
db 3Bh,	83h, 3Eh, 0C8h,	4, 0, 74h, 24h,	4Eh
db 89h,	36h, 82h, 4, 0C6h, 6, 80h, 4, 1
db 0BDh, 7, 0, 0FFh, 16h, 98h, 1, 3Ah, 86h
db 0C0h, 4, 75h, 1Dh, 4Dh, 0D0h, 26h, 80h
db 4, 73h, 0EFh, 0FFh, 0Eh, 0C8h, 4, 75h
db 0DCh, 5Bh, 0Ah, 0FFh, 53h, 74h, 8, 8Ah
db 0C7h, 4Eh, 0E8h, 40h, 0, 75h, 2, 0B1h
db 0FFh, 0FEh, 0C1h, 5Bh, 8Fh, 6, 80h, 4
db 8Fh,	6, 82h,	4, 5Dh,	5Ah, 0C3h, 0B5h
db 80h,	0BDh, 8, 0, 0D0h, 0C5h,	4Dh, 0D0h
db 0C8h, 73h, 0F9h, 88h, 2Eh, 80h, 4, 50h
db 89h,	36h, 82h, 4, 0FFh, 16h,	98h, 1,	38h
db 86h,	0C0h, 4, 58h, 75h, 0Dh,	4Dh, 0D0h
db 0C8h, 73h, 6, 0D0h, 26h, 80h, 4, 73h
db 0E5h, 33h
db 0EDh, 0C3h, 0B5h, 1,	33h, 0EDh, 0F7h
db 0D5h, 0D0h, 0CDh, 45h, 0D0h,	0C0h, 73h
db 0F9h, 89h, 36h, 82h,	4, 88h,	2Eh, 80h
db 4, 50h, 0FFh, 16h, 98h, 1, 38h, 86h,	0C0h
db 4, 58h, 75h,	0Dh, 0D0h, 0C0h, 73h, 7
db 45h,	0D0h, 2Eh, 80h,	4, 73h,	0E9h, 33h
db 0EDh, 0C3h, 0BEh, 60h, 6Dh, 0F7h, 0C7h
db 1, 0, 75h, 0Ch, 46h,	4Eh, 26h, 8Ah, 4
db 26h,	88h, 5,	4Fh, 49h, 0E3h,	0Ah, 46h
db 26h,	8Ah, 4,	26h, 88h, 5, 4Fh, 0E2h,	0EBh
db 0C3h, 0BEh, 60h, 6Dh, 0F7h, 0C7h, 1,	0
db 75h,	0Ch, 46h, 4Eh, 26h, 8Ah, 4, 26h
db 88h,	5, 47h,	49h, 0E3h, 0Ah,	46h, 26h
db 8Ah,	4, 26h,	88h, 5,	47h, 0E2h, 0EBh
db 0C3h, 6, 0E8h, 0B6h,	0FCh, 0D0h, 0C5h
db 73h,	8, 83h,	0EEh, 1, 73h, 3, 0E9h, 0A2h
db 0, 3Bh, 36h,	9Ch, 4,	73h, 3,	0E9h, 99h
db 0, 75h, 9, 3Ah, 2Eh,	9Ah, 4,	76h, 3,	0E9h
db 8Eh,	0, 8Bh,	0FEh, 8Ah, 0CDh, 0BDh, 2 dup(0FFh)
db 33h,	0D2h, 32h, 0E4h, 26h, 8Ah, 5, 84h
db 0C5h, 74h, 5, 32h, 0C9h, 0EBh, 78h, 90h
db 3Bh,	3Eh, 9Ch, 4, 75h, 4, 8Ah, 26h, 9Ah
db 4, 84h, 0C5h, 75h, 0Fh, 84h,	0E5h, 75h
db 0Bh,	0D0h, 0C5h, 73h, 0F4h, 4Fh, 45h
db 26h,	8Ah, 5,	0EBh, 0E3h, 3Bh, 36h, 9Ch
db 4, 74h, 2, 32h, 0E4h, 8Ah, 0E9h, 26h
db 8Ah,	4, 0E8h, 0BBh, 0FDh, 8Ah, 0DFh,	32h
db 0FFh, 56h, 45h, 74h,	13h, 4Dh, 0B5h,	1
db 26h,	8Ah, 5,	3Bh, 3Eh, 9Ch, 4, 75h, 4
db 8Ah,	26h, 9Ah, 4, 0E8h, 0A0h, 0FDh, 89h
db 3Eh,	82h, 4,	88h, 2Eh, 80h, 4, 57h, 8Bh
db 0FDh, 80h, 3Eh, 87h,	4, 0, 74h, 5, 0E8h
db 68h,	0FEh, 0EBh, 6, 0E8h, 54h, 0FDh,	0E8h
db 33h,	0FEh, 5Eh, 5Fh,	0Ah, 0C9h, 74h,	9
db 32h,	0EDh, 0F6h, 0D5h, 0FDh,	0E8h, 2Eh
db 2 dup(0FCh),	0E8h, 34h, 0FDh, 0E8h, 0E7h
db 0DFh, 7, 0C3h, 6, 0E8h, 0FFh, 0FBh, 26h
db 8Ah,	4, 32h,	0E4h, 3Bh, 36h,	9Eh, 4,	75h
db 4, 8Ah, 26h,	9Bh, 4,	84h, 0C5h, 74h,	13h
db 84h,	0E5h, 75h, 0Fh,	4Ah, 74h, 0Ch, 0D0h
db 0CDh, 73h, 0F1h, 46h, 26h, 8Ah, 4, 0B5h
db 80h,	0EBh, 0DFh, 84h, 0C5h, 74h, 5, 33h
db 0D2h, 0EBh, 72h, 90h, 52h, 33h, 0D2h
db 89h,	36h, 88h, 4, 56h, 88h, 2Eh, 8Ah
db 4, 0E8h, 10h, 0FDh, 8Ah, 0DFh, 32h, 0FFh
db 33h,	0EDh, 8Bh, 3Eh,	9Eh, 4,	2Bh, 0FEh
db 0F6h, 0C3h, 1, 74h, 20h, 0Bh, 0FFh, 74h
db 1Ch,	4Dh, 0B5h, 80h,	45h, 46h, 26h, 8Ah
db 4, 0Ah, 0C0h, 75h, 3, 4Fh, 75h, 0F4h
db 3Bh,	36h, 9Eh, 4, 75h, 4, 8Ah, 26h, 9Bh
db 4, 0E8h, 0DFh, 0FCh,	89h, 36h, 82h, 4
db 88h,	2Eh, 80h, 4, 5Fh, 57h, 56h, 8Bh
db 0F7h, 8Bh, 0FDh, 80h, 3Eh, 87h, 4, 0
db 74h,	5, 0E8h, 2Eh, 0FDh, 0EBh, 6, 0E8h
db 0A9h, 0FCh, 0E8h, 0FDh, 0FCh, 5Eh, 5Fh
db 0Ah,	0C9h, 74h, 6, 32h, 0EDh, 0FCh, 0E8h
db 85h,	0FBh, 0E8h, 8Ch, 0FCh, 5Ah, 0E8h
db 3Eh,	0DFh, 8Bh, 36h,	88h, 4,	0A0h, 8Ah
db 4, 7, 0C3h, 0, 1, 2,	3, 4, 5, 6, 7, 10h
db 11h,	12h, 13h, 14h, 15h, 16h, 17h, 0
db 1, 2, 3, 4, 5, 14h, 7, 38h, 39h, 3Ah
db 3Bh,	3Ch, 3Dh, 3Eh, 3Fh, 0E9h, 2Eh, 0F0h
db 0E9h, 6Eh, 0F0h, 0F6h, 6, 7Bh, 4
db 18h,	75h, 0F3h, 80h,	3Eh, 78h, 4, 0,	74h
db 28h,	2 dup(0A0h), 4,	56h, 57h, 6, 2 dup(1Eh)
db 7, 0BFh, 0DCh, 4, 57h, 0C5h,	36h, 67h
db 1, 0B9h, 10h, 0, 0F3h, 0A4h,	0AAh, 5Ah
db 1Fh,	0B0h, 2, 55h, 56h, 57h,	0B4h, 10h
db 0CDh, 10h, 5Fh, 5Eh,	5Dh, 7,	5Fh, 5Eh
db 0C3h, 0F6h, 6, 7Bh, 4, 18h, 75h, 0BFh
db 80h,	3Eh, 78h, 4, 0,	74h, 25h, 3Dh, 2 dup(0FFh)
db 75h,	4, 3Bh,	0D0h, 74h, 1Dh,	0FFh, 16h
db 77h,	1, 72h,	16h, 32h, 0FFh,	88h, 87h
db 0DCh, 4, 86h, 0F8h, 0B0h, 0,	55h, 56h
db 57h,	0B4h, 10h, 0CDh, 10h, 5Fh, 5Eh,	5Dh
db 0F8h, 0C3h, 0F9h, 0C3h, 3Ah,	1Eh, 5Fh
db 1, 77h, 0F8h, 0F7h, 0C2h, 0C0h, 0FFh
db 75h,	0F2h, 0A9h, 2 dup(0C0h), 75h, 0EDh
db 0F6h, 6, 7Bh, 4, 18h, 75h, 31h, 0B9h
db 4, 0, 0D3h, 0E8h, 0D3h, 0EAh, 0D0h, 0E8h
db 0D0h, 0D5h, 0D0h, 0ECh, 0D0h, 0D5h, 0D0h
db 0EAh, 0D0h, 0D5h, 0D0h, 0E8h, 0D0h, 0D5h
db 0D0h, 0ECh, 0D0h, 0D5h, 0D0h, 0EAh, 0D0h
db 0D5h, 8Ah, 0C5h, 80h, 3Eh, 60h, 1, 0Fh
db 75h,	9, 24h,	7, 0F6h, 0C5h, 38h, 74h
db 2, 0Ch, 10h,	0F8h, 0C3h, 57h, 0FCh, 33h
db 0C9h, 8Ah, 0Eh, 5Fh,	1, 41h,	26h, 0ADh
db 92h,	26h, 0ADh, 92h,	83h, 0FAh, 0FFh
db 75h,	4, 3Bh,	0D0h, 74h, 0Ah,	33h, 0DBh
db 51h,	0FFh, 16h, 77h,	1, 59h,	72h, 22h
db 0E2h, 0E5h, 8Ah, 0Eh, 5Fh, 1, 41h, 8Bh
db 0D9h, 2 dup(4Eh), 0FDh, 4Bh,	26h, 0ADh
db 99h,	92h, 26h, 0ADh,	53h, 51h, 0FFh,	16h
db 75h,	1, 59h,	5Bh, 72h, 5, 0E2h, 0EDh
db 0F8h, 0EBh, 1, 0F9h,	0FCh, 5Fh, 0C3h
db 0, 0D0h, 6, 80h, 4, 0D0h, 6,	80h, 4,	72h
db 1, 0C3h, 0FFh, 0Eh, 82h, 4, 2 dup(0C3h)
db 0A1h, 82h, 4, 33h, 6, 92h, 4, 80h, 0E4h
db 60h,	75h, 0Bh, 0A1h,	82h, 4,	3Bh, 6,	92h
db 4, 73h, 2, 0F9h, 0C3h, 0A1h,	82h, 4,	2Bh
db 6, 0B0h, 4, 73h, 5, 3, 6, 0B4h, 4, 0F8h
db 0A3h, 82h, 4, 0C3h, 0A1h, 82h, 4, 33h
db 6, 94h, 4, 80h, 0E4h, 60h, 75h, 0Bh,	0A1h
db 82h,	4, 3Bh,	6, 94h,	4, 72h,	2, 0F9h
db 0C3h, 0A1h, 82h, 4, 2Bh, 6, 0B2h, 4,	73h
db 5, 3, 6, 0B4h, 4, 0F8h, 0A3h, 82h, 4
db 0C3h, 0A1h, 82h, 4, 8Ah, 0ECh, 80h, 0E5h
db 60h,	80h, 0E4h, 1Fh,	33h, 0D2h, 0F7h
db 36h,	7Dh, 1,	0F7h, 26h, 7Dh,	1, 0Ah,	0E5h
db 92h,	0A1h, 96h, 4, 3, 0C2h, 0A3h, 9Ch
db 4, 0A1h, 98h, 4, 3, 0C2h, 0A3h, 9Eh,	4
db 0C3h



sub_4B5C proc near
push	bp
push	si
push	di
int	10h		; - VIDEO -
pop	di
pop	si
pop	bp
retn
sub_4B5C endp




sub_4B65 proc near
mov	al, byte ptr word_4D7B+1
jmp	short loc_4B6D
sub_4B65 endp




sub_4B6A proc near
mov	al, byte ptr word_4D7B

loc_4B6D:
push	dx
mov	dx, word_4D22
shl	dx, 1
shl	dx, 1
shl	dx, 1
shl	dx, 1
xor	ah, ah
push	ds
push	ax
mul	dx
mov	ds, dx
mov	word_500E, ax
pop	ax
mov	byte_5022, al
pop	ds
pop	dx
retn
sub_4B6A endp

db 50h,	52h, 0B2h, 7, 0B8h, 1, 6

loc_4B93:
cmp	byte_50AE, al
jz	short loc_4B93
int	21h
pop	dx
pop	ax
retn
db 50h,	53h, 51h, 52h, 3Ch, 0FFh, 74h, 6
db 8Ah,	0D0h, 0B4h, 6, 0CDh, 21h, 5Ah, 59h
db 5Bh,	58h, 0C3h, 0Fh dup(0)
seg001 ends


; Segment type:	Pure data
dseg segment para public 'DATA' use16
assume cs:dseg
db    0
db    0
word_4BC2 dw 0
align 8
db  4Dh	; M
db  53h	; S
db  20h
db  52h	; R
db  75h	; u
db  6Eh	; n
db  2Dh	; -
db  54h	; T
db  69h	; i
db  6Dh	; m
db  65h	; e
db  20h
db  4Ch	; L
db  69h	; i
db  62h	; b
db  72h	; r
db  61h	; a
db  72h	; r
db  79h	; y
db  20h
db  2Dh	; -
db  20h
db  43h	; C
db  6Fh	; o
db  70h	; p
db  79h	; y
db  72h	; r
db  69h	; i
db  67h	; g
db  68h	; h
db  74h	; t
db  20h
db  28h	; (
db  63h	; c
db  29h	; )
db  20h
word_4BEC dw 3931h
db  38h	; 8
db  37h	; 7
db  2Ch	; ,
db  20h
db  4Dh	; M
db  69h	; i
db  63h	; c
db  72h	; r
db  6Fh	; o
db  73h	; s
db  6Fh	; o
db  66h	; f
db  74h	; t
db  20h
db  43h	; C
db  6Fh	; o
db  72h	; r
db  70h	; p
db  1Eh
db    0
word_4C02 dw 0
word_4C04 dw 0
off_4C06 dw offset sub_651
word_4C08 dw 0
dw seg dseg
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_4C58 dw 48h
aC_file_info db	';C_FILE_INFO',0
dword_4C67 dd 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_4C79 dw 0
byte_4C7B db 0
align 8
db  14h
db    0
db  81h	; 
db  81h	; 
db  81h	; 
db    1
db    1
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_4C96 dw 0
word_4C98 dw 0
word_4C9A dw 0
word_4C9C dw 0E0h
seg_4C9E dw seg	dseg
db  43h	; C
db    0
db    0
db    0
byte_4CA4 db 0
byte_4CA5 db 0
dword_4CA6 dd 0
word_4CAA dw 0
word_4CAC dw 5F0h
word_4CAE dw 0
word_4CB0 dw 0
word_4CB2 dw 0
db    0
db    0
word_4CB6 dw 0
db    0
db    0
word_4CBA dw 0
db    0
db    0
word_4CBE dw 0
word_4CC0 dw 2000h
align 4
byte_4CC4 db 0
align 2
db    6
db    7
db    6
db    7
db    6
db    7
db    6
db    7
db    6
db    7
db    0
db    0
db    0
db    0
byte_4CD4 db 0
align 2
off_4CD6 dw offset sub_2B01
dw offset sub_2B11
dw offset sub_2B16
dw offset sub_2B1E
dw offset sub_2C8F
dw offset sub_2C8A
dw offset sub_2CC9
dw offset sub_2B23
dw offset sub_D78
dw offset sub_D78
dw offset sub_D78
dw offset sub_D78
dw offset sub_D78
dw offset sub_309A
dw offset sub_309F
dw offset sub_30DA
dw offset sub_30AB
dw offset sub_3981
dw offset sub_39A0
dw offset sub_39B9
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
byte_4D0E db 0
db    0
db    0
db    0
db  19h
db    0
byte_4D14 db 0
word_4D15 dw 0
byte_4D17 db 28h
byte_4D18 db 19h
word_4D19 dw 140h
word_4D1B dw 0C8h
word_4D1D dw 0B800h
byte_4D1F db 0Fh
byte_4D20 db 0
byte_4D21 db 2
word_4D22 dw 80h
byte_4D24 db 0
byte_4D25 db 7
byte_4D26 db 0
word_4D27 dw 0
db    0
db    0
word_4D2B dw 0
db    0
db    0
off_4D2F dw offset sub_D78
off_4D31 dw offset sub_D78
off_4D33 dw offset sub_D78
off_4D35 dw offset sub_D78
off_4D37 dw offset sub_D78
off_4D39 dw offset sub_D78
byte_4D3B db 1
byte_4D3C db 1
word_4D3D dw 28h
db  80h	; 
db    1
db    8
db    0
db    3
db    7
db    0
word_4D46 dw 0D6h
word_4D48 dw 134h
off_4D4A dw offset sub_D78
off_4D4C dw offset sub_D78
off_4D4E dw offset sub_D78
db    8
db    0
off_4D52 dw offset sub_D78
off_4D54 dw offset sub_D78
off_4D56 dw offset sub_D78
off_4D58 dw offset sub_D78
off_4D5A dw offset sub_D78
off_4D5C dw offset sub_D78
off_4D5E dw offset sub_D78
off_4D60 dw offset sub_D78
off_4D62 dw offset sub_D78
off_4D64 dw offset sub_D78
off_4D66 dw offset sub_D78
off_4D68 dw offset sub_D78
db    8
db    0
db    8
db    0
off_4D6E dw offset sub_D78
off_4D70 dw offset sub_D78
off_4D72 dw offset sub_D78
off_4D74 dw offset sub_D78
off_4D76 dw offset sub_D78
db    8
db    0
db    7
word_4D7B dw 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
unk_4D90 db    0
db    0
word_4D92 dw 0
dword_4D94 dd 0
dword_4D98 dd 0
dd byte_EEA
dd byte_EF2+25h
aHelloGraphicsW	db 'Hello Graphics World!',0
align 4
aA? db '?',0
align 2
aAcNmsg	db 'C<<NMSG>>',0
align 2
aR6000StackOver	db 'R6000',0Dh,0Ah
db '- stack overflow',0Dh,0Ah,0
db    3
db    0
db  52h	; R
db  36h	; 6
db  30h	; 0
db  30h	; 0
db  33h	; 3
db  0Dh
db  0Ah
db  2Dh	; -
db  20h
db  69h	; i
db  6Eh	; n
db  74h	; t
db  65h	; e
db  67h	; g
db  65h	; e
db  72h	; r
db  20h
db  64h	; d
db  69h	; i
db  76h	; v
db  69h	; i
db  64h	; d
db  65h	; e
db  20h
db  62h	; b
db  79h	; y
db  20h
db  30h	; 0
db  0Dh
db  0Ah
db    0
db    9
db    0
db  52h	; R
db  36h	; 6
db  30h	; 0
db  30h	; 0
db  39h	; 9
db  0Dh
db  0Ah
db  2Dh	; -
db  20h
db  6Eh	; n
db  6Fh	; o
db  74h	; t
db  20h
db  65h	; e
db  6Eh	; n
db  6Fh	; o
db  75h	; u
db  67h	; g
db  68h	; h
db  20h
db  73h	; s
db  70h	; p
db  61h	; a
db  63h	; c
db  65h	; e
db  20h
db  66h	; f
db  6Fh	; o
db  72h	; r
db  20h
db  65h	; e
db  6Eh	; n
db  76h	; v
db  69h	; i
db  72h	; r
db  6Fh	; o
db  6Eh	; n
db  6Dh	; m
db  65h	; e
db  6Eh	; n
db  74h	; t
db  0Dh
db  0Ah
db    0
db 0FCh	;
db    0
db  0Dh
db  0Ah
db    0
db 0FFh
db    0
db  72h	; r
db  75h	; u
db  6Eh	; n
db  2Dh	; -
db  74h	; t
db  69h	; i
db  6Dh	; m
db  65h	; e
db  20h
db  65h	; e
db  72h	; r
db  72h	; r
db  6Fh	; o
db  72h	; r
db  20h
db    0
db    2
db    0
db  52h	; R
db  36h	; 6
db  30h	; 0
db  30h	; 0
db  32h	; 2
db  0Dh
db  0Ah
db  2Dh	; -
db  20h
db  66h	; f
db  6Ch	; l
db  6Fh	; o
db  61h	; a
db  74h	; t
db  69h	; i
db  6Eh	; n
db  67h	; g
db  20h
db  70h	; p
db  6Fh	; o
db  69h	; i
db  6Eh	; n
db  74h	; t
db  20h
db  6Eh	; n
db  6Fh	; o
db  74h	; t
db  20h
db  6Ch	; l
db  6Fh	; o
db  61h	; a
db  64h	; d
db  65h	; e
db  64h	; d
db  0Dh
db  0Ah
db    0
db    1
db    0
db  52h	; R
db  36h	; 6
db  30h	; 0
db  30h	; 0
db  31h	; 1
db  0Dh
db  0Ah
db  2Dh	; -
db  20h
db  6Eh	; n
db  75h	; u
db  6Ch	; l
db  6Ch	; l
db  20h
db  70h	; p
db  6Fh	; o
db  69h	; i
db  6Eh	; n
db  74h	; t
db  65h	; e
db  72h	; r
db  20h
db  61h	; a
db  73h	; s
db  73h	; s
db  69h	; i
db  67h	; g
db  6Eh	; n
db  6Dh	; m
db  65h	; e
db  6Eh	; n
db  74h	; t
db  0Dh
db  0Ah
db    0
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_4ED0 db 0
align 2
word_4ED2 dw 0
word_4ED4 dw 0
word_4ED6 dw 0
word_4ED8 dw 0
byte_4EDA db 0
byte_4EDB db 0
word_4EDC dw 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_4EE6 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_4F17 dw 0
word_4F19 dw 0
word_4F1B dw 0
word_4F1D dw 0
word_4F1F dw 0
word_4F21 dw 0
byte_4F23 db 0
byte_4F24 db 0
byte_4F25 db 0
byte_4F26 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_4F58 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_4FA8 dw 0
word_4FAA dw 0
word_4FAC dw 0
word_4FAE dw 0
byte_4FB0 db 0
align 2
byte_4FB2 db 0
db  90h	; 
db    0
db    0
db    0
db    0
word_4FB8 dw 0
word_4FBA dw 0
word_4FBC dw 0
word_4FBE dw 0
word_4FC0 dw 0
word_4FC2 dw 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_4FCC dw 0
byte_4FCE db 0
byte_4FCF db 0
word_4FD0 dw 0
word_4FD2 dw 0
word_4FD4 dw 0
word_4FD6 dw 0
word_4FD8 dw 0
word_4FDA dw 0
word_4FDC dw 0
byte_4FDE db 0
byte_4FDF db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_4FE8 dw 0
word_4FEA dw 0
word_4FEC dw 0
word_4FEE dw 0
word_4FF0 dw 0
byte_4FF2 db 0
byte_4FF3 db 0
word_4FF4 dw 0
word_4FF6 dw 0
byte_4FF8 db 0
db  90h	; 
byte_4FFA db 0
byte_4FFB db 0
byte_4FFC db 0
byte_4FFD db 0
word_4FFE dw 0
word_5000 dw 0
byte_5002 db 0
byte_5003 db 0
byte_5004 db 0
db  90h	; 
word_5006 dw 0
word_5008 dw 0
word_500A dw 0
word_500C dw 0
word_500E dw 0
word_5010 dw 0
word_5012 dw 0
word_5014 dw 0
word_5016 dw 0
word_5018 dw 0
align 4
unk_501C db    0
byte_501D db 0
db    0
db    0
db    0
db    0
byte_5022 db 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
word_502A dw 0
word_502C dw 0
word_502E dw 0
word_5030 dw 0
word_5032 dw 0
word_5034 dw 0
align 4
byte_5038 db 0
word_5039 dw 0
byte_503B db 0
byte_503C db 0
word_503D dw 0
align 2
word_5040 dw 0
dword_5042 dd 0
byte_5046 db 0
byte_5047 db 0
db    0
db    0
db    0
db    0
word_504C dw 0
word_504E dw 0
word_5050 dw 0
word_5052 dw 0
word_5054 dw 0
word_5056 dw 0
word_5058 dw 0
byte_505A db 0
byte_505B db 0
align 8
byte_5060 db 0
align 2
word_5062 dw 0
word_5064 dw 0
word_5066 dw 0
dword_5068 dd 0
align 8
word_5070 dw 0
word_5072 dw 0
word_5074 dw 0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    0
byte_50AE db 0
align 2
dseg ends


; Segment type:	Uninitialized
seg003 segment byte stack 'STACK' use16
assume cs:seg003
assume es:nothing, ss:nothing, ds:dseg,	fs:nothing, gs:nothing
db 800h	dup(?)
seg003 ends


end start
